[{"category": "technology", "description": "Bench top power supplies are one of the must-haves for any electronics hobbyist or maker. But they take up space, which for people like me with limited space, that can be a big problem. With the Analog Discovery 2 and Waveforms 2015, you can bundle multiple tools together in one small package, including an adjustable power supply.For this Instructable you will need:-Analog Discovery 2*-Waveforms 2015 software- a computer with USB port to run the software*Most of the functionality between the Analog Discovery legacy, the AD2 and the Electronics Explorer Board is nearly identical for most of the tools. Except for the Power Supplies. The AD2 has more capability over the legacy version AD1, and the EEBoard has always had more capability than either. With that in mind, I will focus first on the AD2, then on the EEBoard, then the AD legacy.Edit: With the addition of the Digital Discovery there is a fourth version of the Power Supplies tool. This version is covered at the end of this I'ble after the AD legacy.", "title": "Using the Power Supplies With the Analog Discovery 2", "url": "https://www.instructables.com/id/Using-the-Power-Supplies-With-the-Analog-Discovery/", "section": "technology", "steps": [{"step": 1, "steps_text": "If you want some help getting your AD2 set up and calibrated, or installing Waveforms 2015, check out this quick start I'ble collection.Once you have your AD2 and Waveforms all set up, open the Power Supplies by clicking on the \"Supplies\" button.This will open the power supplies window.At the top you have three options: \"File\", \"Control\", and \"Window\".\"File\" lets you Save the current power supply settings as a new project. You can then Open that project to set the power supplies to the saved setting. You can also Close the power supplies window from here.\"Control\" gives access to the Run and Stop functions.\"Window\" lets you view other Waveforms tools you have open, the main Waveforms screen, or the Help window.Below that is the Master Enable button, which is the run/stop button.Next you have the ready/on/off buttons for each power supply. If the master enable is off, you can switch between ready and off. With master enable on, you can switch between on and off.To the right you have two drop down menus, one for the positive supply (V+) and one for the negative supply (V-). You can directly enter a value here with up to three decimal places. The accuracy of the output compared to the entered value will depend greatly on whether your AD2 is calibrated correctly. The positive supply can have any value between +500 mV and +5 V, while the negative supply can have a value anywhere between -500 mV and -5 V.Since the Analog Discovery 2 can be powered by either the USB or a 5V auxiliary power supply, you'll see one of two notes at the bottom of the window.The USB powered note.The auxiliary power supply note.Most circuits won't require more than the USB capabilities. However, in the event that you do draw more power than the AD2 can output, the program will fault and turn off all tools and outputs. This will happen if any output pin is connected directly to GND, including both power supply pins. Simply remove or change whatever is drawing a high current and try again.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 1: Analog Discovery 2"}, {"step": 2, "steps_text": "The Electronics Explorer Board power supplies have many more capabilities and options than the AD2, which is why it gets its own dedicated step.If you want some help getting your EEBoard set up and calibrated, or installing Waveforms 2015, check out this quick start I'ble collection. The calibration is similar to the AD2, and I recommend you calibrate your EEBoard before using it. You will need to have a high wattage (\u224810 W) resistor between 10-50\u03a9 and a quality voltmeter to finish the calibration.Once you have your EEBoard and Waveforms all set up, open the Power Supplies by clicking on the \"Supplies\" button.This will open the power supplies window.At the top you have three options: \"File\", \"Control\", and \"Window\".\"File\" lets you Save the current power supply settings as a new project. You can then Open that project to set the power supplies to the saved setting. You can Export the power supply settings, either as an image or as raw data in *.csv, *.txt, or *.tdms format. You can also Close the power supplies window from here.\"Control\" gives access to the Run and Stop functions.\"Window\" lets you view other Waveforms tools you have open, the main Waveforms screen, or the Help window.Below that you have the controls for each of the four power supply types.At the top left is Master Enable, which will turn on/off any power supply channel that has a check mark in the list below that button. Any channel that is not checked will not turn on with the Master Enable button.To the right of the enable boxes, there are four boxes.At the top left is the Positive Supply (VP+). You can set the voltage to any value between 0 and +9 V out to 3 decimal places. You can also set the max current limit to any value between 0 and 1.5 A out to 3 decimal places. Once VP+ is enabled and turned on, the EEBoard will send back real time voltage and current data, which will be displayed in the box below the drop down menu.Below the Positive Supply is the Negative Supply (VP-). The parameter limitations are the same as for VP+, except negative instead of positive. Real time data will also be displayed once VP- has been enabled and turned on.To the top right you have your Fixed Supply (Vcc). You can choose either +3.3 V or +5 V. This is really useful for powering micro-controllers/processors or FPGA chips that require a steady power supply. Real time voltage and current data is displayed below the drop down menu. You can not limit the current available on this channel.Below the Fixed Supply are the Reference Voltages (Vref1 and Vref2). You can set these values anywhere between -10 V and +10 V. Decimal precision varies with whether you are using mV or V values. There is no real time data from the EEBoard monitoring these pins.Next is the plot window.At the left side you have various metrics that you can use to monitor your circuit. The Value column shows the value as of the last sample.By clicking  you can select from a list of additional metrics to add to the watch list.Double click on the metric you want to add, then click \"Close\". The new metric will appear at the bottom of the list. Note that Vmtr n is an exclusive function to the EEBoard and designates one of four built in voltmeters on the board itself. They measure voltage in reference to the internal GND plane of the EEBoard.Clicking  lets you remove the selected metric, or clear all metrics at once. You can also press \"Delete\" on your keyboard to remove a highlighted metric.With a metric highlighted,  lets you reassign a metric to that slot. You can have as many instances of the same metric as you want. You can also just double click on a metric to reassign that slot to a different metric. will add Maximum and Minimum columns to each metric, next to the Value column. As more samples are taken, these values will change to reflect the max or min value that has been measured by that metric.The History box  sets the total metric history that is viewable in the plot window. You can set this value to most values between 10 s and 24 hours. If the value you enter won't work, the plot will auto correct to the closest value that will work. lets you change the plot update rate and how many samples are shown in the plot window. Be aware that these two values are tied to the value in the History box, and changes in one will likely affect one or both of the other two. will clear the plot window of all metric traces. This can be done at any time, whether the supplies are on or off. New traces will become visible as more samples begin to register.The Plot column has a box for each metric to enable/disable that particular trace on the plot. Check the box to enable the trace.To change the color of the trace, click on the color box in the Color column. Pick your new color from the window that opens and click \"OK\" to change it.Each metric has a small gear icon  in the last column, right next to the plot window. This lets you set the vertical plot scale for that particular metric. Auto adjustment is set by default, but you can set the unit/division value and the offset value.In the top right corner of the plot you see . You can add or remove labels to the plot, change the background from black to white, and change the default trace width for all metrics. If you click on a metric, its trace will be slightly wider than the others and will also rise to the top layer of the plot to make it easier to see.Lastly, just above the top right corner of the plot you'll see . This will make the plot slide closed, widening the metric value columns on the left to allow for clearer viewing of the data. Click it again to slide the plot window back open. The plot will continue to update even if it is closed, and opening it will show the accurate history according to the rate, sample, and history settings.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 2: Electronics Explorer Board"}, {"step": 3, "steps_text": "The Analog Discovery Legacy is the original version of the Analog Discovery.Setup and calibration is the same as for the AD2, so if you want some help getting your legacy set up and calibrated, or installing Waveforms 2015, check out this quick start I'ble collection.Once you have your Legacy and Waveforms all set up, open the Power Supplies by clicking on the \"Supplies\" button.This will open the power supplies window.At the top you have three options: \"File\", \"Control\", and \"Window\".\"File\" lets you Save the current power supply settings as a new project. You can then Open that project to set the power supplies to the saved setting. You can also Close the power supplies window from here.\"Control\" gives access to the Run and Stop functions.\"Window\" lets you view other Waveforms tools you have open, the main Waveforms screen, or the Help window.Below that is the Master Enable button, which is the run/stop button.Next you have the ready/on/off buttons for each power supply. If the master enable is off, you can switch between ready and off. With master enable on, you can switch between on and off.V+ is set at +5 V, while V- is set at -5 V. The accuracy of the output value will depend greatly on whether your device is calibrated correctly.At the very bottom, there is a meter that indicates how much current the device is outputting. Keeping it low is better. If you do draw more power than the device can output, the program will fault and turn off all tools and outputs. This will happen if any output pin is connected directly to GND, including both power supply pins. Simply remove or change whatever is drawing a high current and try again.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 3: Analog Discovery Legacy"}, {"step": 4, "steps_text": "The Digital Discovery is the all digital version of the Analog Discovery.Setup and calibration is the same as for the AD2, so if you want some help getting your Digital Discovery set up and calibrated, or installing Waveforms 2015, check out this quick start I'ble collection.Once you have your DD and Waveforms all set up, open the Power Supplies by clicking on the \"Supplies\" button.This will open the power supply tool window.At the top you have three options: \"File\", \"Control\", and \"Window\".\"File\" lets you Save the current power supply settings as a new project. You can then Open that project to set the power supplies to the saved setting. You can also Close the power supplies window from here.\"Control\" gives access to the Run and Stop functions.\"Window\" lets you view other Waveforms tools you have open, the main Waveforms screen, or the Help window.Below that is the control section for the digital output voltage level. Here you can set the output voltage level for the four VIO pins as well as any DIO (24-40) pin that is used as a digital output. Any voltage between 1.2V and 3.3V is allowed. The threshold voltage is also set here for any DIN (0-23) pin or DIO pin used as a digital input. Note that the Threshold value and slider are locked to the Voltage value and slider. Changing one will change the other. Clicking \"Voltage Output\" enables or disables only the VIO pins. The DIO pins 24-40 used as outputs are normally driven by the other Waveforms tools like the Logic Analyzer, Pattern Generator, Static I/O, or Digital Protocol Analyzer.The \"Digital IO Drivers\" box lets you set the output current of the output pins at 2, 4, 6, 8, 12, or 16mA, or you can select \"Auto\". The slew rate can also be set as \"Slow\", \"Fast\", or \"Quiet\".The \"Digital Input weak pull\" box is used to adjust the input sensitivity of the DIN (0-23) pins. Options are \"Up\", \"Middle\", or \"Down\".The \"Digital IO Pulls\" section allows you to set default pull resistors for the 16 DIO pins (24-40). The options are \"Up\", \"Float\", or \"Down\". All 16 pins can be set together using the \"All\" buttons on the left, or each set individually using the tri-state slide switches.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 4: Digital Discovery"}, {"step": 5, "steps_text": "As you can see the Power Supplies with the Analog Discovery 2 and Waveforms 2015 software are simple and easy to use.As always, thanks for reading. If you have questions, please ask them in the comments below, though PMs are always welcome as well. You just never know when someone else has the same question and that way we can all learn and help each other get better. Have fun building!Also, please check out the Digilent blog where I contribute from time to time.", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 5: That's All There Is to It."}], "channel": "Tools"}, {"category": "technology", "description": "MS50XX series is the series of altimeters Meas-Specs, uses air pressure measurement to estimate the altitude. Here I'm gonna use MS5607 unitDatasheet: http://www.meas-spec.com/downloads/MS5607-02BA03.pdf", "title": "Interfacing Altimeter MS5067 With Linkit-One", "url": "https://www.instructables.com/id/Interfacing-Altimeter-MS5067-with-Linkit-One/", "section": "technology", "steps": [{"step": 1, "steps_text": "       MS5607   :   LinkitGND   :   gndVIN     :   3V3 CS      :   D12 SCL    :   A5/SCL SDA   :  A4/SDA", "step_imgs": ["https://cdn.instructables.com/FE1/WOUW/IGTYC956/FE1WOUWIGTYC956.LARGE.jpg"], "step_title": "Step 1: Connections"}, {"step": 2, "steps_text": "We use intersema header file which works with the raw data from the sensor and gives us data understood by us ie. in centimeters.Also we compile and upload our own code. I have uploaded my own code (MS5607) with the instructable. You can write your own.NOTE: Copy the intersema.h file with the libraries in the arduino folderusually:   C:\\Program Files (x86)\\Arduino\\arduino-1.6.5-r2\\libraries", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 2: Code"}, {"step": 3, "steps_text": "Compile and Upload the code to the linkit one Wait for atleast 10 seconds to get stable output with (-/+)20 cm accuracy/", "step_imgs": ["https://cdn.instructables.com/FL1/PJWF/IGTYCADE/FL1PJWFIGTYCADE.LARGE.jpg"], "step_title": "Step 3: Compile, Run, Output"}], "channel": "Sensors"}, {"category": "technology", "description": "OverviewI was inspired to build this device by a home assignment on Digital Signal Processing online course. This is a DTMF decoder implemented with Arduino UNO, it detects a digit pressed on a phone keypad in the tone mode by the sound it produces.", "title": "DTMF Detector", "url": "https://www.instructables.com/id/DTMF-Detector/", "section": "technology", "steps": [{"step": 1, "steps_text": "In DTMF each symbol is encoded with two frequencies according to the table on the picture.The device captures input from the microphone and calculates amplitudes of eight frequencies. Two frequencies with maximum amplitudes give a row and a column of the encoded symbol.Data acquisitionIn order to perform spectrum analysis samples should be captured at a certain predictable frequency. To achieve this I used free-run ADC mode with maximum precision (prescaler 128) it gives sampling rate 9615Hz. The code below shows how to configure Arduino\u2019s ADC.void initADC() {\n  // Init ADC; f = ( 16MHz/prescaler ) / 13 cycles/conversion \n  ADMUX  = 0; // Channel sel, right-adj, use AREF pin\n  ADCSRA = _BV(ADEN)  | // ADC enable\n           _BV(ADSC)  | // ADC start\n           _BV(ADATE) | // Auto trigger\n           _BV(ADIE)  | // Interrupt enable\n           _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // 128:1 / 13 = 9615 Hz\n  ADCSRB = 0; // Free-run mode\n  DIDR0  = _BV(0); // Turn off digital input for ADC pin      \n  TIMSK0 = 0;                // Timer0 off\n}\nAnd the interrupt handler looks like this\nISR(ADC_vect) { \n  uint16_t sample = ADC;samples[samplePos++] = sample - 400;\n  \n  if(samplePos >= N) {\n    ADCSRA &= ~_BV(ADIE); // Buffer full, interrupt off\n  }\n}Spectrum analysisAfter collecting samples I calculate amplitudes of 8 frequencies encoding symbols. I don\u2019t need to run full FFT for this, so I used Goertzel\u2019s algorithm.void goertzel(uint8_t *samples, float *spectrum) {\n  float v_0, v_1, v_2;\n  float re, im, amp;\n    \n  for (uint8_t k = 0; k < IX_LEN; k++) {\n    float c = pgm_read_float(&(cos_t[k]));\n    float s = pgm_read_float(&(sin_t[k]));\n    \n    float a = 2. * c;\n    v_0 = v_1 = v_2 = 0;  \n    for (uint16_t i = 0; i < N; i++) {\n      v_0 = v_1;\n      v_1 = v_2;\n      v_2 = (float)(samples[i]) + a * v_1 - v_0;\n    }\n    re = c * v_2 - v_1;\n    im = s * v_2;\n    amp = sqrt(re * re + im * im);\n    spectrum[k] = amp;        \n  } \n}", "step_imgs": ["https://cdn.instructables.com/FEP/R2FR/JQ0TDZ0S/FEPR2FRJQ0TDZ0S.LARGE.jpg"], "step_title": "Step 1: Understanding the Algorithm"}, {"step": 2, "steps_text": "The picture above shows the example of encoding of digit 3 where maximum amplitude corresponds to frequencies 697Hz and 1477Hz.The complete sketch looks as follows/** * Connections:\n * [ Mic to Arduino ]\n *  - Out -> A0\n *  - Vcc -> 3.3V\n *  - Gnd -> Gnd\n *  - Arduino: AREF -> 3.3V\n * [ Display to Arduino ]\n *  - Vcc -> 5V\n *  - Gnd -> Gnd\n *  - DIN -> D11\n *  - CLK -> D13\n *  - CS  -> D9\n */\n#include \n#include #include #define CS_PIN      9#define N           256\n#define IX_LEN      8\n#define THRESHOLD   20LEDMatrixDriver lmd(1, CS_PIN);uint8_t samples[N];\nvolatile uint16_t samplePos = 0;float spectrum[IX_LEN];// Frequences [697.0, 770.0, 852.0, 941.0, 1209.0, 1336.0, 1477.0, 1633.0]\n// Calculated for 9615Hz 256 samples  \nconst float cos_t[IX_LEN] PROGMEM = {\n  0.8932243011955153, 0.8700869911087115, 0.8448535652497071, 0.8032075314806449, \n  0.6895405447370669, 0.6343932841636456, 0.5555702330196023, 0.4713967368259978\n  };\n  \nconst float sin_t[IX_LEN] PROGMEM = {\n  0.44961132965460654, 0.49289819222978404, 0.5349976198870972, 0.5956993044924334, \n  0.7242470829514669, 0.7730104533627369, 0.8314696123025451, 0.8819212643483549\n  };typedef struct {\n  char digit;\n  uint8_t index;   \n} digit_t;digit_t detected_digit;const char table[4][4] PROGMEM = {\n  {'1', '2', '3', 'A'},\n  {'4', '5', '6', 'B'},\n  {'7', '8', '9', 'C'},\n  {'*', '0', '#', 'D'}\n};const uint8_t char_indexes[4][4] PROGMEM = {\n  {1, 2, 3, 10},\n  {4, 5, 6, 11},\n  {7, 8, 9, 12},\n  {15, 0, 14, 13}\n};byte font[16][8] = { \n                     {0x00,0x38,0x44,0x4c,0x54,0x64,0x44,0x38}, // 0\n                     {0x04,0x0c,0x14,0x24,0x04,0x04,0x04,0x04}, // 1\n                     {0x00,0x30,0x48,0x04,0x04,0x38,0x40,0x7c}, // 2\n                     {0x00,0x38,0x04,0x04,0x18,0x04,0x44,0x38}, // 3\n                     {0x00,0x04,0x0c,0x14,0x24,0x7e,0x04,0x04}, // 4\n                     {0x00,0x7c,0x40,0x40,0x78,0x04,0x04,0x38}, // 5\n                     {0x00,0x38,0x40,0x40,0x78,0x44,0x44,0x38}, // 6\n                     {0x00,0x7c,0x04,0x04,0x08,0x08,0x10,0x10}, // 7\n                     {0x00,0x3c,0x44,0x44,0x38,0x44,0x44,0x78}, // 8\n                     {0x00,0x38,0x44,0x44,0x3c,0x04,0x04,0x78}, // 9\n                     {0x00,0x1c,0x22,0x42,0x42,0x7e,0x42,0x42}, // A\n                     {0x00,0x78,0x44,0x44,0x78,0x44,0x44,0x7c}, // B\n                     {0x00,0x3c,0x44,0x40,0x40,0x40,0x44,0x7c}, // C\n                     {0x00,0x7c,0x42,0x42,0x42,0x42,0x44,0x78}, // D\n                     {0x00,0x0a,0x7f,0x14,0x28,0xfe,0x50,0x00}, // #\n                     {0x00,0x10,0x54,0x38,0x10,0x38,0x54,0x10}  // *\n                  };void initADC() {\n  // Init ADC; f = ( 16MHz/prescaler ) / 13 cycles/conversion \n  ADMUX  = 0; // Channel sel, right-adj, use AREF pin\n  ADCSRA = _BV(ADEN)  | // ADC enable\n           _BV(ADSC)  | // ADC start\n           _BV(ADATE) | // Auto trigger\n           _BV(ADIE)  | // Interrupt enable\n           _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // 128:1 / 13 = 9615 Hz\n  ADCSRB = 0; // Free-run mode\n  DIDR0  = _BV(0); // Turn off digital input for ADC pin      \n  TIMSK0 = 0;                // Timer0 off\n}void goertzel(uint8_t *samples, float *spectrum) {\n  float v_0, v_1, v_2;\n  float re, im, amp;\n    \n  for (uint8_t k = 0; k < IX_LEN; k++) {\n    float c = pgm_read_float(&(cos_t[k]));\n    float s = pgm_read_float(&(sin_t[k]));\n    \n    float a = 2. * c;\n    v_0 = v_1 = v_2 = 0;  \n    for (uint16_t i = 0; i < N; i++) {\n      v_0 = v_1;\n      v_1 = v_2;\n      v_2 = (float)(samples[i]) + a * v_1 - v_0;\n    }\n    re = c * v_2 - v_1;\n    im = s * v_2;\n    amp = sqrt(re * re + im * im);\n    spectrum[k] = amp;        \n  } \n}float avg(float *a, uint16_t len) {\n  float result = .0;\n  for (uint16_t i = 0; i < len; i++) {\n    result += a[i];\n  }\n  return result / len;\n}int8_t get_single_index_above_threshold(float *a, uint16_t len, float threshold) {\n  \n  if (threshold < THRESHOLD) {\n    return -1;\n  }\n  \n  int8_t ix = -1;\n  for (uint16_t i = 0; i < len; i++) {\n    if (a[i] > threshold) {\n      if (ix == -1) {\n        ix = i;\n      } else {\n        return -1;\n      }\n    } \n  }\n  return ix;  \n}void detect_digit(float *spectrum) {\n  float avg_row = avg(spectrum, 4);\n  float avg_col = avg(&spectrum[4], 4);\n  int8_t row = get_single_index_above_threshold(spectrum, 4, avg_row);\n  int8_t col = get_single_index_above_threshold(&spectrum[4], 4, avg_col);\n  \n  if (row != -1 && col != -1 && avg_col > 200) {\n    detected_digit.digit = pgm_read_byte(&(table[row][col]));\n    detected_digit.index = pgm_read_byte(&(char_indexes[row][col]));\n  } else {\n    detected_digit.digit = 0;\n  }\n}void drawSprite(byte* sprite) {\n  // The mask is used to get the column bit from the sprite row\n  byte mask = B10000000;\n  \n  for(int iy = 0; iy < 8; iy++ ) {\n    for(int ix = 0; ix < 8; ix++ ) {\n      lmd.setPixel(7 - iy, ix, (bool)(sprite[iy] & mask ));      // shift the mask by one pixel to the right\n      mask = mask >> 1;\n    }    // reset column mask\n    mask = B10000000;\n  }\n}void setup() {  \n  cli();\n  initADC();\n  sei();  Serial.begin(115200);\n  \n  lmd.setEnabled(true);\n  lmd.setIntensity(2);\n  lmd.clear();\n  lmd.display();  detected_digit.digit = 0;\n}unsigned long z = 0;void loop() {\n  while(ADCSRA & _BV(ADIE)); // Wait for audio sampling to finish\n  goertzel(samples, spectrum);  \n  detect_digit(spectrum);  if (detected_digit.digit != 0) {\n    drawSprite(font[detected_digit.index]);\n    lmd.display();\n  }   \n  \n  if (z % 5 == 0) {    \n    for (int i = 0; i < IX_LEN; i++) {\n      Serial.print(spectrum[i]);\n      Serial.print(\"\\t\");\n    }\n    Serial.println();    \n    Serial.println((int)detected_digit.digit);\n  }\n  z++;  samplePos = 0;  ADCSRA |= _BV(ADIE);       // Resume sampling interrupt\n}ISR(ADC_vect) { \n  uint16_t sample = ADC;  samples[samplePos++] = sample - 400;\n  \n  if(samplePos >= N) {\n    ADCSRA &= ~_BV(ADIE); // Buffer full, interrupt off\n  }\n}", "step_imgs": ["https://cdn.instructables.com/F71/2AAQ/JQ0TE7K5/F712AAQJQ0TE7K5.LARGE.jpg"], "step_title": "Step 2: The Code"}, {"step": 3, "steps_text": "The following connections should be made:Mic to ArduinoOut -> A0\nVcc -> 3.3V\nGnd -> GndIt is important to connect AREF to 3.3V.Display to ArduinoVcc -> 5V\nGnd -> Gnd\nDIN -> D11\nCLK -> D13\nCS  -> D9", "step_imgs": ["https://cdn.instructables.com/F8L/94KN/JPN3N1GY/F8L94KNJPN3N1GY.LARGE.jpg"], "step_title": "Step 3: Schematics"}, {"step": 4, "steps_text": "What could be improved here? I used N = 256 samples at rate 9615Hz which has some spectrum leakage, if N = 205 and rate is 8000Hz then the desired frequencies coincide with discretisation grid. For that ADC should be used in timer overflow mode.", "step_imgs": [], "step_title": "Step 4: Conclusion"}], "channel": "Arduino"}, {"category": "technology", "description": "Recently, I have been experimenting with microcontrollers. A project that really caught my eye was the Chronulator at http://www.sharebrained.com. At the same time, Texas Instruments released an experimenter's kit called the Launchpad for the outstanding price of $4.30 plus shipping. This kit comes with everything you need to get started, including 2 microprocessors. One\u00a0microprocessor is fairly decked out with\u00a0lots of features. The other chip,\u00a0a\u00a0MSP430G2211,\u00a0is more\u00a0plain.\r\nI decided as a learning experience to use the MSP430G2211 from the\u00a0Launchpad kit to build a Chronulator.\u00a0It turns out that this is a really fun project, and yes, I learned a lot!See the plans for the mantel clock case that I built for this Chronulator.\r\n\u00a0\u00a0\u00a0\u00a0 ", "title": "MSP430 Based Chronulator (using Launchpad Chip)", "url": "https://www.instructables.com/id/MSP430-Based-Chronulator-using-Launchpad-chip/", "section": "technology", "steps": [{"step": 1, "steps_text": "The first thing you need is a Launchpad kit from Texas Instruments. You will also have to download the free compiler/debugger. They have 2 different options for compiler/debugger. I used the IAR Embedded Workbench KickStart.\r\nThe details on how to get a Launchpad are at http://processors.wiki.ti.com/index.php/MSP430_LaunchPad_%28MSP-EXP430G2%29?DCMP=launchpad&HQS=Other+OT+launchpadwikiList of Materials to make Chronulator:\r\n\u00a0 1\u00a0\u00a0-\u00a0\u00a0 Radio\u00a0Shack General Purpose Printed\u00a0Circuit board part\u00a0# 276-150\u00a0(project board)\r\n\u00a0\u00a04\u00a0 -\u00a0\u00a0 0.1uF capacitors\r\n\u00a0\u00a01\u00a0 -\u00a0\u00a0\u00a01nF capacitor\r\n\u00a0 3\u00a0 -\u00a0\u00a0 47k resistors\r\n\u00a0 3\u00a0 -\u00a0\u00a0 push buttons\r\n\u00a0 1\u00a0 -\u00a0\u00a0 14 pin DIP socket\r\n\u00a0 2\u00a0 -\u00a0\u00a0 panel meters with any combination of\u00a0full scale values of 50uA, 100uA, or 1mA\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0note:\u00a0I'm using a\u00a050uA (mins)\u00a0and a 100uA\u00a0(hrs) because that is what I had on hand.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Higher sensitivity meters\u00a0will result in\u00a0using less power - longer battery life.\r\n\u00a0 1\u00a0 -\u00a0 4 pin male single in-line\u00a00.1 inch header (to connect meters)\r\n\u00a0 1\u00a0 -\u00a0 4 pin female\u00a0single in-line 0.1 inch header with wire\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 note: I\u00a0got mine by cutting off a small power connector from an old\u00a0PC\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 power supply.\r\n\u00a0\u00a01\u00a0 -\u00a0\u00a0battery holder for 3 AA sized batteries (Radio Shack)\r\n\u00a0 3\u00a0 -\u00a0\u00a0AA batteries\r\n\u00a0 1\u00a0 -\u00a0\u00a0battery leads for 9V size battery (the battery holder required this)\r\n\u00a0\u00a01\u00a0 -\u00a0 MSP430G2211 (part of Launchpad kit)\r\n\u00a0\u00a01\u00a0 -\u00a0 watch crystal -\u00a032.768\u00a0kHz\u00a0(One comes with the Launchpad - but I would\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0suggest keeping that one on the Launchpad and getting another for this project.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0I went to Target and bought a watch from their\u00a0dollar bin and took the\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0crystal from\u00a0it. BG Micro sells them\u00a0for $0.65, but\u00a0you have to pay shipping.)\r\n\u00a0\u00a01\u00a0 -\u00a0 LDO, low Iq, 2.5V voltage regulator (I'm using a Seiko S-812-C series regulator\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Mouser part # 628-812C25AY-G, Manuf # S-812C25AY-B-G\u00a0 price: $0.51)\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The key is to use a LDO regulator with low quiescent current (Iq).\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Note: Another alternative is to\u00a0use\u00a04 AA batteries\u00a0and a 3.3 V LDO,\u00a0low Iq,\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 voltage regulator.\r\n\u00a0\u00a02\u00a0 -\u00a0\u00a0\u00a0resistors\u00a0(values depend on meters used\u00a0- see next step)\r\n\u00a0\r\nMisc:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hookup wire\r\n\u00a0\u00a0Tools Required:\r\n\u00a0\u00a0 Solder gun and solder suitable for working with printed circuit boards\r\n\u00a0\u00a0 Desoldering tool\r\n\u00a0\u00a0 Multi-meter (optional, but great in troubleshooting - Harbor Freight price: $3.97)\r\n\u00a0\u00a0 Screw drivers (for working with\u00a0panel meters)\r\n\u00a0\u00a0 needle\u00a0nose pliers\r\n\u00a0\u00a0\u00a0wire cutter\r\n\u00a0\u00a0\u00a0\r\n\u00a0", "step_imgs": ["https://cdn.instructables.com/FUO/5BFP/GD0R1ICK/FUO5BFPGD0R1ICK.LARGE.jpg", "https://cdn.instructables.com/FC6/BFZO/GD0R1ICM/FC6BFZOGD0R1ICM.LARGE.jpg"], "step_title": "Step 1: What You Need - Materials / Tools"}, {"step": 2, "steps_text": "\r\n\tBelow is the schematic for the Chronulator. It has 3 push buttons, two of which allow you to adjust the minutes and hours. Pushing the minute or hour buttons will increment the minute or hour values by one. The third button is a reset button. The circuit diagram\u00a0shows the meter current limiting resistors that I used for my particular meters. I have a 50 uA full scale meter for my minute meter, and a 100 uA full scale meter for my hour meter. The value of the resistor installed between the meter plus terminal and the microcomputer pin depends on the full scale of the meter used.\r\n\tHere is a table of what resistor you should use based on the meter FS value.\r\n\tIt assumes you are using\u00a0the 2.5V Vcc that the author originally used.\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Resistor\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mAh used by\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mAh used by\r\n\t\u00a0\u00a0\u00a0\u00a0FS\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Hour meter\u00a0per 12\u00a0hrs\u00a0\u00a0 \u00a0 Minute meter per 12 hrs\r\n\t--------------------------------------------------------------------------------------------------\r\n\t\u00a0 50 uA\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 33k\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.025\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 0.3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n\t100 uA\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 18k\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.050\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 0.6\r\n\t\u00a0\u00a0\u00a01 mA\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 2.2k\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 6.0\r\n\tMore sensitive meters are definitely better. If you have to use a FS=1mA meter\r\n\tuse it for your hour meter.\r\n\tWith the 2.5V\u00a0voltage regulator you should be able to take the batteries down to about 1V and get at least 80% of the batteries' energy (~2000 mAh)\u00a0without any calibration shifts.Note:\u00a0If you are using 4 AA batteries and a 3.3V voltage regulator\u00a0the results are the same.\r\n\tIf you are using a 3.3V Vcc use these resistor\u00a0values:\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Resistor\r\n\t\u00a0\u00a0 FS\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 value\r\n\t-------------------------------\r\n\t\u00a0 50 uA\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a047k\r\n\t100 uA\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a022k\u00a0\r\n\t\u00a0\u00a0 1 mA\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a02.7k\u00a0\r\n\tIf for some reason later when we calibrate\u00a0m_cal and h_cal, the sum of the elements of your m_cal array\u00a0or your h_cal array are not between 8000 and 9500 adjust your resistor value. If\u00a0the sum of the array is above 9500 reduce the resistor value. If is below 8000, increase the resistor value.\u00a0\u00a0\r\n\t\u00a0Note: The capacitor that is\u00a0wired parallel to\u00a0the Reset button has been changed from\u00a00.1uF to 1nF. This change was made to make \"spy-by-wire\" work.\u00a0\u00a0 \u00a0dp-09/10/10", "step_imgs": ["https://cdn.instructables.com/FJ3/6IYR/GDVYRA5C/FJ36IYRGDVYRA5C.LARGE.jpg"], "step_title": "Step 2: The Circuit"}, {"step": 3, "steps_text": "\r\nIn this\u00a0step\u00a0I would like to give the basic procedure\u00a0for using the IAR compiler/debugger. Later in the project we will be tuning the\u00a0adjustment arrays for the meters to compensate for nonlinearities. We will end up\u00a0going through this process several times. Also, I wanted to point out steps 3 and\u00a04, which caused\u00a0me to do some head scratching because I didn't know about them.\r\n\u00a0 1.\u00a0\u00a0 Open\u00a0existing or create new workspace.\r\n\u00a0 2.\u00a0\u00a0 Create new project for Chronulator.\r\n\u00a0 3.\u00a0\u00a0 Select Project -> Options... -> category: general options and change\r\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 device to MSP430G2211.\r\n\u00a0 4.\u00a0\u00a0 Change Category to \"Debugger\" and change \"Driver\" to FET Debugger.\r\n\u00a0 5.\u00a0\u00a0 Hit ok.\r\n\u00a0 6.\u00a0\u00a0 Create new file (file -> new -> file)\r\n\u00a0 7.\u00a0\u00a0 Copy/paste code into new file and name file.\r\n\u00a0 8.\u00a0\u00a0 Go to the workspace window, your Chronulator project should be there. If not\r\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 select the correct tab at the bottom of the window.\r\n\u00a0 9.\u00a0\u00a0 Right click the project in the tree and select add ->\u00a0file \"your file name .c\".\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Your file should be added to the project tree.\r\n10.\u00a0\u00a0\u00a0Right click the project again and select Rebuild all.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 You can now expand the \"your file name.c\" branch of the tree and see the\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 h files that are added.\r\n11.\u00a0\u00a0 Now to put the code on your chip, select the \"make\" icon or menu:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Project -> make, or F7 (to make).\r\n12.\u00a0\u00a0 Make sure that your Launchpad is plugged in to a USB port and that the\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Launchpad\u00a0board has the MSP430G2211 chip on board (or has been connected via\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"spy-by-wire\" with the project board)\u00a0and the 32K crystal has been installed.\r\n13.\u00a0\u00a0 Select the \"Download and Debug\" icon or menu: Project -> Download and Debug,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 or Ctrl+D.\u00a0 This will download the code to the chip and start the debugger.\r\n14.\u00a0\u00a0 If everything is ok, your computer will pause for a brief time and then a new set\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 of toolbars will show up. This is the debugger. For the simplest case, we can\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 hit the \"Go\" toolbar icon, watch the circuit operation and then hit the\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"Stop Debugger\" toolbar icon. When you stop the debugger, the toolbar\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 will return to their normal state.\r\nIf you make changes to the code you cycle through steps 12 to 14.", "step_imgs": ["https://cdn.instructables.com/F5T/OLXU/GD0R1ID5/F5TOLXUGD0R1ID5.LARGE.jpg"], "step_title": "Step 3: Using IAR Embedded Workbench KickStart"}, {"step": 4, "steps_text": "The c code for the project is below in an attached file. You will note 2 different lines in the code that contain arrays of 12 numbers, one for minutes (m_cal) and one for hours (h_cal). After you load the code into your microprocessor via the Launchpad, you will need to adjust the numbers in these arrays. That will be covered in the later step.", "step_imgs": ["https://cdn.instructables.com/F1Q/8DLD/GD0R1ICQ/F1Q8DLDGD0R1ICQ.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 4: The Code"}, {"step": 5, "steps_text": "\r\n\tWhile I was building the Chronulator, I ended up\u00a0constructing a few useful gizmos. They are not necessary, but I have found\u00a0them helpful. They also can be used over again on other Launchpad projects that use batteries and require a regulated voltage. The gizmos consist of a small 2.5V regulator that can be\u00a0piggybacked to the Launchpad, a power line for the battery pack to the regulator, and a super glued block of 5 jumpers to speed putting in and removing the jumpers on the Launchpad. The schematic for the little piggybacked regulator is the same as the power supply\u00a0shown in step 2.\r\n\t\u00a0", "step_imgs": ["https://cdn.instructables.com/FXH/861Y/GD0R1IJW/FXH861YGD0R1IJW.LARGE.jpg", "https://cdn.instructables.com/FRI/4ZF3/GD0R1IK7/FRI4ZF3GD0R1IK7.LARGE.jpg", "https://cdn.instructables.com/FI9/4KR4/GD0R1IKU/FI94KR4GD0R1IKU.LARGE.jpg"], "step_title": "Step 5: Helpful Gizmos"}, {"step": 6, "steps_text": "Before you can change the scale of a panel meter, you must have a panel meter. One way to obtain\u00a0panel meters\u00a0is to visit swap meets or industrial surplus locations.\u00a0Ideally you find meters that have a full scale of 50 or 100 uA.\u00a0The more common full scale is 1 mA.\u00a0Often\u00a0you find panel meters with odd scales, for example pH, or scales marked for high currents like 5 A or\u00a0 odd voltages.\u00a0 These may still be usable. If you are lucky,\u00a0the full scale value (ex. FS=100uA) will be on the meter face in small letters down below where you would normally view.\u00a0 The neat thing about surplus or junkyard meters is they are\u00a0often\u00a0very\u00a0unusual looking.\u00a0So I suggest you keep a look out for these types of panel meters.\u00a0\r\nYou can always buy new\u00a0panel meters,\u00a0the going price is about\u00a0$9 for a 2 - 2.5 inch meter made in Asia. The nice thing about these meters is you can select sensitivities from 50 uA through 1mA for the same price. \u00a0\u00a0One source is BG Micro (http://www.bgmicro.com). The downside is they are a little boring.\r\nWhen you select a meter, make sure that you can easily remove the front. If the front is glued to the back of the meter, pass on it and move on. When you remove the front of the meter, you typically find that the face is attached with a couple of screws to the meter movement.\r\nI used 2 different methods to change the scales on the panel meters\u00a0of my chronulator. On the minute meter, I\u00a0printed out a new scale on plain paper and\u00a0used a glue stick to stick it over the old scale. On my hour meter,\u00a0I printed out a new\u00a0face the same size as the old face on photo paper and flipped the face plate and used a\u00a0glue stick to attach the new face\u00a0to the backside of the plate. In this case, I wanted to retain the look\u00a0of the original face plate by keeping the manufacturer's name and \"Direct Current\" heading.\u00a0The best way to do this is to scan\u00a0the original\u00a0face plate using a flat bed\u00a0scanner. The scanned image then becomes the background layer of\u00a0your new meter face\u00a0in the graphic program you\u00a0use.\u00a0\u00a0\r\nThe ShareBrained Technology site has several meter faces that you can download. They fit the meters used in their Chronulator kits. You might get lucky and be able to use one of them.\r\nThere is also a meter scale program that can be used that has a free limited version available from Tonne Software, http://www.tonnesoftware.com . I haven't used it.One last note, the hour meter scale goes 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12. It does not go 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12. This is because the Chronulator works like an analog clock and sweeps the hour hand as the hour progresses.", "step_imgs": ["https://cdn.instructables.com/FJV/2DJP/GD0R1JB8/FJV2DJPGD0R1JB8.LARGE.jpg"], "step_title": "Step 6: Changing the Scales of the Panel Meters"}, {"step": 7, "steps_text": "Once you have your panel meters with their new scales, you are ready to\u00a0tune the calibration arrays for m_cal and h_cal in the C code.\r\nThere are several ways that you can proceed. One way is to fabricate the circuit on the breadboard and move the chip to the Launchpad\u00a0each repetition of adjusting the array. The other way is to keep the\u00a0chip in the Launchpad and\u00a0isolate the prototyping portion of the board. This is done by removing the 5 jumpers from terminal block J3\u00a0and\u00a0supplying 2.5V to the external power\u00a0terminal block J6. When you want to program the chip you have to restore the jumpers and remove the external power supply. If you use this second method you have to hookup the meters and the buttons.\r\nThere is a third way, using the \"spy-by-wire\" interface. In this method\u00a0when we\u00a0build our project breadboard, we include some test points. The test points allow us to connect between the project breadboard and the Launchpad. We can\u00a0program our microcontroller without ever removing it from the project board. The Launchpad is used simply as a programmer. This is the method that I recommend you use.Adding the Test Points:\r\nThere are 4 test points that need to be added.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0 1.\u00a0 Vcc\u00a0\u00a0(IC pin 1)\r\n\u00a0\u00a0\u00a0\u00a0\u00a0 2.\u00a0 Gnd (IC pin 14)\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0 3.\u00a0\u00a0Test (IC pin 11)\r\n\u00a0\u00a0\u00a0\u00a0\u00a0 4.\u00a0\u00a0RST (IC pin 10)\u00a0\r\nThe simplest way to add a test point is to make a little U of wire and attach it at the desired location. See the pictures below. ", "step_imgs": ["https://cdn.instructables.com/F0S/VA36/GDVYRA55/F0SVA36GDVYRA55.LARGE.jpg", "https://cdn.instructables.com/FG4/1BH1/GDVYRA56/FG41BH1GDVYRA56.LARGE.jpg", "https://cdn.instructables.com/FM8/PZ79/GD0R1KZG/FM8PZ79GD0R1KZG.LARGE.jpg"], "step_title": "Step 7: Prep for Using \"spy-by-wire\""}, {"step": 8, "steps_text": "\"spy-by-wire\" is a two wire interface to program the flash memory on the MSP430 microcontroller. It is available on the newer MSP430 chips, including all of the chips that can be used on the Launchpad.\u00a0The two pins used in this interface are RST and TEST. We will also bring over the power connections, VCC and GND,\u00a0from the Launchpad when we program.\r\nBelow is a picture of the connections required to use the \"spy-by-wire\" interface.Programming Connections:\r\n\u00a0\u00a0\u00a0 1.\u00a0 Disconnect the battery pack from the project board.\r\n\u00a0\u00a0\u00a0 2.\u00a0\u00a0Connect jumper from Launchpad\u00a0J6 terminal \"Vcc\" to project board Vcc test point.\r\n\u00a0\u00a0\u00a0 3.\u00a0\u00a0Connect jumper from Launchpad J6 terminal \"Gnd\"\u00a0to project board\u00a0Gnd test point.\r\n\u00a0\u00a0\u00a0 4.\u00a0 Connect jumper from Launchpad J2 terminal \"TEST\" to project board TEST test point.\r\n\u00a0\u00a0\u00a0 5.\u00a0 Connect jumper from Launchpad J2 terminal \"RST\"\u00a0to project board RST test point.\r\n\u00a0\u00a0\u00a0 note: All 5 jumpers of Launchpad terminal J3 should be in place.\r\nWhen the two boards are connected in this manner, you can program the microcontroller while it is in the project board.\u00a0 You use IAR Embedded Workbench KickStart just as you would if the whole project was on the Launchpad.Since we are using a different voltage supply voltage (2.5V instead of 3.3V)\u00a0in this project, you must break the connections when you are testing the project board. Note: If you are using 4 AA batteries and a 3.3V regulator I would still break the connections to be\u00a0sure that\u00a0voltage you use to calibrate\u00a0the meters with is correct.\u00a0\u00a0Testing\u00a0Project Board Connections:\r\n\u00a0\u00a0\u00a0\u00a01.\u00a0 Disconnect all four\u00a0of the project board connections to the Launchpad.\r\n\u00a0\u00a0\u00a0 2.\u00a0 Connect the battery pack\u00a0to the project board.\r\n\u00a0\u00a0\u00a0 3.\u00a0 Press\u00a0the Reset button.\u00a0\u00a0\u00a0\u00a0", "step_imgs": ["https://cdn.instructables.com/FJN/UJHH/GDVYRA57/FJNUJHHGDVYRA57.LARGE.jpg", "https://cdn.instructables.com/FI5/PQ17/GDVYRA5B/FI5PQ17GDVYRA5B.LARGE.jpg"], "step_title": "Step 8: Using \"spy-by-wire\""}, {"step": 9, "steps_text": "\r\n\tHere are some basic checks that you should make to your wired up project board before inserting the MSP430 chip. They can all be done from the top side of the breadboard.Using an multi-meter as an ohms meter:\r\n\t\u00a0 1. Visually double check that you have placed the right pins of your regulator into\r\n\t\u00a0\u00a0\u00a0 \u00a0 Vin, Vout, and Gnd.\r\n\t\u00a0 2. Check between the pins in the IC socket for pin to pin shorts. There should\r\n\t\u00a0\u00a0\u00a0 \u00a0 not be any shorts. You\u00a0will see ~94k ohms between pins 6 and 7 (2\u00a0x 47k).\r\n\t\u00a0 3. Check between pin 1 of the IC socket and Vcc. You should see a\u00a0short.\r\n\t\u00a0 4. Check between pin 14 of the IC socket and Gnd. You should see a short.\r\n\t\u00a0 5. Check between pin 1 and pin 14 of the IC socket. You should see an open.\r\n\t\u00a0 6. Check across Vcc and Gnd and push each button in turn.\u00a0As each button\r\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0 is pushed the meter should read from infinity to 47k.\r\n\t\u00a0 7.\u00a0 Place the multi-meter positive lead in pin 6 of the IC socket and the negative\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0multi-meter lead on the junction of the 47k resistor and the minute advance\r\n\t\u00a0\u00a0\u00a0\u00a0 \u00a0 button. You should see a short. Do the same for pin 7 and the junction\u00a0of\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0the 47k resistor and\u00a0hour advance button.\u00a0Also do the same for pin 10 and\r\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0 the\u00a0junction for the 47k resistor and the Reset button.\u00a0\r\n\t\u00a0\u00a08.\u00a0\u00a0Place the positive multi-meter lead on the\u00a0positive minute meter pin of the\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 meter junction block and the negative multi-meter lead on IC socket pin\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 3. You should see the resistive value of your minute meter's current\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 limiting resistor.\r\n\t\u00a0 9. \u00a0Place the positive multi-meter lead on the positive hour meter pin of the\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 meter junction block and the negative multi-meter lead on IC socket pin\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 4. You should see the resistive value of your hour meter's current\u00a0\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 limiting resistor.\r\n\t10.\u00a0 Place the positive multi-meter lead on the negatives (2) of the meter\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 junction block and the negative lead on Gnd.\u00a0You should see a\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 short for each negative.\r\n\t10.\u00a0 Make sure that the 32k Hz crystal is installed at\u00a0IC\u00a0socket\u00a0pins 12 and 13.\r\n\t11.\u00a0 Visually triple check that you\u00a0have placed the right pins of your regulator into\r\n\t\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 Vin, Vout, and Gnd.\r\n\t12. \u00a0 Plug in the battery pack, place the multimeter on a voltage scale\u00a0and\u00a0\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 measure the voltage between Vcc and Gnd.\u00a0You should see 2.5V.\r\n\t13.\u00a0\u00a0 Unplug the battery pack.\r\n\t14.\u00a0\u00a0 Install the MSP430 chip.\u00a0 Make sure that pin 1 of the chip (upper left pin\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0with the u shaped indent to the top, and top of chip facing you) is installed\r\n\t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 in pin 1 of the IC socket.\r\n\t\u00a0", "step_imgs": ["https://cdn.instructables.com/F1Q/8DLD/GD0R1ICQ/F1Q8DLDGD0R1ICQ.LARGE.jpg"], "step_title": "Step 9: Basic Checks Before Putting MSP430 Into Project Board"}, {"step": 10, "steps_text": "Analog panel meters have\u00a0inherent nonlinearities, especially cheap or old meters with wear and dirt. We also add nonlinearities to the meter by driving them using PWM (pulse width modulation) and by our homemade meter scales. The c program for this project handles this by providing 2 arrays that are used to individually tune the meter readings.\r\nThe 2 arrays are named m_cal (used\u00a0with minute meter) \u00a0and h_cal (used with hour meter). The 12 members of the array represent the number of clock pulses required to move the meter movement one major division. In the case of the hour meter, this is one hour. In the case of the minute meter, this is 5 minutes. The period for the PWM for both meters is the same. It is 10000 clock pulses.\u00a0\u00a0The sum of all 12 members of a given tuning\u00a0array will be less than the period. I tried to leave about 10% of the PWM period\u00a0as head room. So typically the arrays will sum to about 9000.\r\nThe minute scale has 5 sub-divisions\u00a0(1 min) per major division (5 mins). The hour meter sweeps every major minute division (5 mins), so there are 12 sub-divisions for the hour meter per each major division (1 hr). For this reason the numbers in m_cal should be divisible by 5, and the numbers in h_cal should be divisible by 12. This isn't an absolute requirement, but\u00a0 using other numbers will result in remainders being dropped and could cause confusion.\r\nLet us look at an example. If the hour array (h_cal) is equal to h_cal[] = {720, 708, 696, 736, ...}, to move the meter to 3 O'clock you need to set the PWM pulse count to the sum of 720, 708, and 696, which is equal to 2124. If you were at one O'clock and wanted to go half way between one and two you would add 360 (708 divided by 2 and rounded up to the next number divisible by 12) to 720.\r\nThe arrays that are in the program should be close to what you need regardless of the meter sensitivity you use, since you change the resistors to change the current provided to the meters. You should only have to tune them up.How to tune the meter cal array:Step 1:\r\nWe will start with the minute meter. To make things easier we will change the minute advance from 1 minute per button push to 5 minutes per button push. Locate in the code the following lines and un-comment them. They are part of the port_1 interrupt service routine.\r\n// for (int j = 1; j <= 4; j++) // inc 4 mins Uncomment these 4 lines when tuning m_cal\r\n// {\r\n// one_min();\r\n// }\r\nDisconnect the battery pack of the project board and make the \"spy-by-wire\" connections between the project board and the Launchpad. Load the modified program onto the MSP430.\u00a0 Now everytime we push the minute increment button the minute meter will jump 5 minutes instead of 1.Step 2:\r\nRemove the \"spy-by-wire\" connections form the project board test points and reconnect the battery pack. Press the Reset button.\u00a0Next adjust the zero of the meter. Then press the minute increment button and observe where the meter comes to on the scale. It should be close to 5 minutes. Write down whether it is less than 5, exactly at 5, or greater than five. Press the minute increment button again and determine how close to 10 minutes it is. Do this to about 20 minutes (4 button presses).Step 3:\r\nDisconnect the battery pack of the project board and make the \"spy-by-wire\" connections between the project board and the Launchpad.\u00a0Using your notes adjust the first four members of m_cal based on what you observed. If the meter was higher than expected then adjust the member\u00a0down. If the meter was below what you expected adjust the member up. Start from the\u00a0lower end of the scale and move up. If you see a trend where each time you push the button the difference becomes greater from the desired point reduce all the numbers. If the first one is off a little and the others seem to be off about the same offset, than adjust the first member that is off. I usually make adjustments of 5 or 10, unless I am way off then I make adjustments of 20. After you have made the adjustments to m_cal, enter the debugger and download the changes to the chip.Step 4:\r\nRemove the \"spy-by-wire\" connections form the project board test points and reconnect the battery pack. Observe the results of the changes you made. Repeat steps 2 (without adjusting the meter zero), 3, and 4 as needed, slowly moving up the scale (25 minutes to 60 minutes)\u00a0until every time you hit the minute increment button, the meter goes exactly to a 5 minute major division of the scale.Step 5:\r\nWhen you are happy with the tuning of the minute meter you can move to the hour meter. I suggest that you re-comment the\u00a04 lines we uncommented in step 1 and make sure\u00a0the changed code gets back on the chip.Step 6:\r\nThe tuning of the hour meter h_cal array is similar to\u00a0what you did on minute meter.\u00a0When you hit the hour increment button it should jump to the next hour on the scale.\u00a0The adjustments should be multiples of 12 instead of multiples of 5. I typically make adjustments of 12 and 24.\r\nI know this procedure sounds difficult, but it is really simple\u00a0once you determine how much the meter will move to your adjustment. The whole thing should\u00a0take no\u00a0more than 30 minutes.\r\n\u00a0", "step_imgs": [], "step_title": "Step 10: Tuning the Meter Calibration Arrays"}, {"step": 11, "steps_text": "One of the potential gotchas of this type of project is selecting the correct load capacitors (C_load) for the 32.768 kHz crystal. You often have little data about the crystal. Different crystal manufacturers design the crystals with different load capacitor requirements. Searching the web I have seen a range of 6 - 22 pF recommended. The most common one appears to be 12 pf.\r\nDifferences in circuit layout on the project board (or PCB) complicates the problem by adding more capacitance. On the plus side, the MSP430G2211 has the ability to provide different capacitance values to the circuit. We can change the capacitance value within a range by software. In the code you will find the following lines. We will select one based on the result of our tests.\r\n// crystal Cload capacitor adjustment - only one line of next four should be uncommented\r\n//\u00a0BCSCTL3 = LFXT1S_0 + XCAP_3; // 32768KHz crystal, 12.5 pF\r\n// BCSCTL3 = LFXT1S_0 + XCAP_2; // 32768KHz crystal, 10 pF\r\n\u00a0 \u00a0BCSCTL3 = LFXT1S_0 + XCAP_1; // 32768KHz crystal, 6 pF\r\n// BCSCTL3 = LFXT1S_0 + XCAP_0; // 32768KHz crystal, 1 pFImpact of an incorrect selection of C_load:\r\nWhen C_load for a crystal is too high the crystal oscillates at a slightly lower frequency. Likewise, when the capacitance is too low the crystal will oscillate slightly faster. For a 32.768 kHz crystal, we are generally talking about 1 or 2 Hertz. One or two Hertz, you say, that doesn't sound like much. What is the big deal?\r\nThe MSP430's 16 bit timer resets every 2^15 or 32,768 pulses. If we use a crystal that provides exactly 32,768 pulses per second, then the timer will reset every second. If the crystal is actually running at 32,766 pulses per second, the effective MSP430 \"second\" is\r\n1 sec + 2/32766 sec = 1 1/16383 sec\r\nAfter 16383 seconds (~4.55 hours), the Chronulator would be one second behind a clock with a crystal running at 32,768 Hz. In other words, it would lose a minute every 11.375 days.\r\n\u00a0\u00a0\u00a0 Crystal\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Pulses\u00a0 \u00a0\u00a0\u00a0\u00a0 Time to be\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Time to be\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Fast /\r\n\u00a0 Frequency\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Off\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0off 1 sec.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 off 1 min.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Slow\r\n----------------------------------------------------------------------------------------\r\n\u00a0\u00a0 32,766\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 -2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 4.55 hrs.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 11.375 days\u00a0\u00a0\u00a0\u00a0 Slow\r\n\u00a0\u00a0 32,767\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 -1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 9.50 hrs.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a022.750 days\u00a0\u00a0\u00a0 \u00a0Slow\r\n\u00a0\u00a0 32,768\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0-- should keep good time --\r\n\u00a0\u00a0 32,769\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 9.50 hrs.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 22.750 days\u00a0\u00a0\u00a0\u00a0 \u00a0Fast\r\n\u00a0\u00a0 32,770\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 4.55 hrs.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 11.375 days\u00a0\u00a0\u00a0\u00a0\u00a0 FastHow to select the proper value of C_load:Step 1:\r\nSelect a watch that keeps very good time, or use your computer or cell phone clock, to be your standard. Place your standard next to the Chronulator. Wait until your clock' second hand is at about at 20 seconds and quickly set your chronulator time to just one minute behind your clock. When the clock's second hand approaches 12 (or 60 if digital) push the chronulator's minute increment button to bring the two clocks into sync. Since you will most likely be off a second or two, observe both clocks another minute to get the exact second that the Chronulator's minute meter advances (\"ticks\"). Write down the date, time, and the second of the \"tick\". You will not remember.Step 2:\r\nWait a day or two, then check to see if the both clocks are still in sync. If you are not sure wait a few more days, by that time if they are off, you should be able to tell. If you still can't tell, then things are ok and no adjustment will need to be made.Step 3:\r\nIf the clocks have lost sync, adjust C_load capacitance by changing one of the commented lines above in the c program and commenting the setting that was in use. If your standard clock is ahead of the Chronulator, the Chronulator is slow. Decrease the capacitance value. If your standard clock is behind the Chronulator, the Chronulater is fast. Increase the capacitance value.\r\nWhat if your clock is still fast and you can't increase the capacitance any higher? In this case, you could add 2 very small capacitors (6-12 pF) from each of the crystal's leads to ground. I would just try another crystal. If you decide to add capacitors you can get them from Mouser (6 pf - Mouser part # 81-RPE5C1h6R0D2P1B03 $0.18, 12 pF - Mouser part # 81-RPE5C2!120J2P1Z03 $0.23).\r\nWhat if your clock is still slow and you can't decrease the capacitance any lower? In this case, check if you can reduce the capacitance on your project board. This can be done by making sure that the crystal is close to IC pins 12 and 13. Also make sure\u00a0that the runs for the crystal are short. If this doesn't help, I would try another crystal from another source.By the way, if you have a pulse counter, you can make ACLK available at P1.0 with a simple program (attached below) and check the crystal's frequency in the project board\u00a0directly. I used this technique to observe changes on my Launchpad / crystal setup. I found that the recommended setting of 12 pF (XCAP_3) was a little too\u00a0high C_load. Look at the different photos below to see the results of different XCAP settings. You might wonder about my counter calibration. I feel very comfortable that it is correct, because I was able to achieve a 32,766 Hz setup on my project board / crystal combination.\u00a0With this setup, I observed the 1 second loss every 4.55 hours shown in the table above. When I optimized it for C_load (i.e., observed freq = 32,768 Hz), the clock was right on the money.", "step_imgs": ["https://cdn.instructables.com/FIF/1YQP/GDNJ4956/FIF1YQPGDNJ4956.LARGE.jpg", "https://cdn.instructables.com/FJB/AZN8/GDNJ494I/FJBAZN8GDNJ494I.LARGE.jpg", "https://cdn.instructables.com/FNZ/FIWI/GDNJ49FO/FNZFIWIGDNJ49FO.LARGE.jpg", "https://cdn.instructables.com/F3V/PZKQ/GDNJ49F5/F3VPZKQGDNJ49F5.LARGE.jpg", "https://cdn.instructables.com/F1T/ZBVM/GDNJ49FE/F1TZBVMGDNJ49FE.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 11: Determining the 32.768 KHz Crystal's Load Capacitance"}, {"step": 12, "steps_text": "Q: What about a case?\r\n\tA: See my mantel clock case for this project at:\r\n\t\u00a0\u00a0\u00a0\u00a0 https://www.instructables.com/id/Mantel-Clock-Case-for-Chronulator-Meter-ClockQ: How does the code work?\r\n\tA:\u00a0\u00a0The watchdog is set to delay mode and creates interrupts at 1 second intervals, using ACLK and the 32.768 kHz watch crystal. This allows you to count seconds. Timer_A interrupts are used to generate 2 independent PWM outputs which drive the meters. Port_1 is used to provide interrupts for the minute and hour increment buttons. You will note that there is no loop in the main subroutine. The program is completely interrupt driven after it reaches the end of main(). When not servicing an interrupt the MSP430 is in\u00a0LPM0.Q:\u00a0Why doesn't \"spy-by-wire\"\u00a0work?\r\n\tA:\u00a0\u00a0The most likely cause is that you have a\u00a00.1uF capacitor parallel to the\u00a0Reset button instead of a 1nF (0.001uF) capacitor.Q: Can I use a 3.3V\u00a0voltage regulator instead of a 2.5V one?A:\u00a0 Yes, a 3.3V voltage regulator can be used, but you should\u00a0use 4 AA batteries (6V) instead of 3 (4.5V). The battery count is increased so the batteries can age with out causing PWM calibration problems. The regulator should be LDO and low Iq.\r\n\t\u00a0", "step_imgs": ["https://cdn.instructables.com/F83/XATV/GDVYRCVF/F83XATVGDVYRCVF.LARGE.jpg", "https://cdn.instructables.com/FAT/64L5/GIJG2GT8/FAT64L5GIJG2GT8.LARGE.jpg"], "step_title": "Step 12: FAQ"}], "channel": "Clocks"}, {"category": "technology", "description": "We built a prototype of a fluid tracking sensor application.  The prototype has three components:1. A Tabletop sensor that tracks the weight of a bottle of water in grams and sends the data to the Intel Analytics cloud.2. A portable sensor that also tracks the weight of a bottle of water in grams while it is in a sleeve.The tabletop sensor uses the Intel Edison Dev Kit with HX711 weight sensor.The portable sensor uses the HX711 weight sensor with a SparkFun kit with the Edison chip.", "title": "FluidTrakker Intro", "url": "https://www.instructables.com/id/FluidTrakker-Intro/", "section": "technology", "steps": [{"step": 1, "steps_text": "For this step, you will need a HX711 load amp board a load cell, and a platform for the scale.The HX711 can be acquired from Spark Fun: https://www.sparkfun.com/products/13230The load cell is basically a metal bar with strain gauges to measure the stress and distortion from a force or \"load\". This is fed into the HX711 which converts the readings into a digital value. For this project, we chose the Seeed Studio 5kg load cell: http://www.seeedstudio.com/depot/Weight-Sensor-Loa...  Four (4) M6 flat head machine screws are used to mount the load cell to the base and hold the presure plate.The base can be a piece of plywood with holes for accepting the load cell. Nylon washers provide the spacing needed so that the load cell can float freely (e.g. cantilever design).The pressure plate is placed on the top of the load cell with the appropriate spacers and held down with M6 screws.", "step_imgs": ["https://cdn.instructables.com/FJD/2EEV/INYW5E2I/FJD2EEVINYW5E2I.LARGE.jpg", "https://cdn.instructables.com/FJB/OVRK/INYW5E3C/FJBOVRKINYW5E3C.LARGE.jpg", "https://cdn.instructables.com/F2P/OII6/INYW5E8M/F2POII6INYW5E8M.LARGE.jpg"], "step_title": "Step 1: Build the Pressure Plate Platform"}, {"step": 2, "steps_text": "Connect the HX711 to the load amp per the the wiring hookup.The instructions to hook it up can be found at Spark Fun: https://learn.sparkfun.com/tutorials/load-cell-amp...In this project, I hooked up the wires as follows:Load cell side:Red wire to RED on the HX711 boardBlack wire to BLKWhite wire to WHTGreen wire to GRNBare wire to YLWEdison using Arduino breakout board5V Power to VCC on the HX711 boardPin 3 to DATPin 2 to CLKGround to GND", "step_imgs": ["https://cdn.instructables.com/FTQ/YSS7/INYW5E9W/FTQYSS7INYW5E9W.LARGE.jpg"], "step_title": "Step 2: Hook Up the Load Amp"}, {"step": 3, "steps_text": "Before you can used the load cell /  load amp combo, you will need to first run on a program to calibrate the load cell.The code is written in NodeJS and is based on the Arduino sketch found on the SparkFun web site. It is easy to port the code to Javascript from Arduino sketch C++.I ported the code to Javascript and posted it to GitHub. Go to https://github.com/coloradocarlos/calibrate_hx711.Download the code and open the code in the Intel XDK IoT Edition (https://software.intel.com/en-us/intel-xdk).  Then upload the code to the Edison using the XDK. Unlike other Node.js applications, you cannot run the calibration app using just the \"play button\" from the XDK as the app requires interactive keyboard input. However, the SSH Terminal in the XDK works fine.The calibration app is designed for measuring grams, but it can be easily modified to support ounces. This is because the HX711 simply returns a 24-bit number and it is up to you to scale to the desired units.To execute:Remove all weights from the scale Logon to the Edison via the ssh terminal # cd to ~/.node_app_slot # node main.js Allow the calibration app to tare (zero out) the scale After a few readings, put a known weight on the scale (for example, a 500 ml water bottle) Press + or - on the keyboard to match the weight of the known weight Ctrl-C to exitOnce you have the calibration_factor, you can put the constant in your application.There are a couple of things to be aware when using the calibration app:Once the scale is tared and there are no weights on the scale, the value returned may be a very large integer value, such as 4719744.5.  This is because the jsupm_hx711 (version 0.6.2) stock library does not handle the sign bit to return negative numbers. Negative numbers are to be expected when the scale is around +/- 0.0 or you create a \"negative weight\" on the pressure plate. The scale may produce a few erroneous misreads when weight is put on the scale. An app should eliminate outliers and smooth the data.", "step_imgs": [], "step_title": "Step 3: Calibrate the Load Cell"}, {"step": 4, "steps_text": "The next step is to develop a NodeJS application that reads the load cell and does something with it.For the 4/23/2016 Denver IoT Hackathon, we chose to send the reading to the Intel IoT Analytics Cloud.To setup the Intel IoT Analytics (Beta), follow the instructions in one or more of the following resources:https://www.instructables.com/id/Intel-IoT-Analytic...https://software.intel.com/en-us/intel-iot-platfor...For the app, we created in the Iot Analytics a custom component called \"scale.v1.0\". The component is added to the Catalog ( Account -> Catalog -> Add Component).A sample app that sends data to the Intel Iot Analytics cloud can be found on GitHub. See https://github.com/coloradocarlos/iotanalytics_hx7...", "step_imgs": ["https://cdn.instructables.com/F7S/FEZD/INYW5DSK/F7SFEZDINYW5DSK.LARGE.jpg", "https://cdn.instructables.com/FA5/H2KP/INYW5EDF/FA5H2KPINYW5EDF.LARGE.jpg"], "step_title": "Step 4: Develop the NodeJS Application"}, {"step": 5, "steps_text": "The previous steps showed how to build a static weight scale.But how about a portable, battery operated scale for an on-the-go application? One that fits in a hydration bottle sleeve?To \"go portable\", gather a few more parts:Nalgene insulated bottle sleeve: https://www.rei.com/product/852426/nalgene-insulat...SparkFun Edison base block: https://www.sparkfun.com/products/13045SparkFun Edison GPIO block: https://www.sparkfun.com/products/13038SparkFun Edison battery block: https://www.sparkfun.com/products/13037SparkFun Edison hardware kit: https://www.sparkfun.com/products/13187Portable load cell based scaleThe following steps show how to build a portable scale.", "step_imgs": ["https://cdn.instructables.com/FC3/5KSM/INYW5G0Q/FC35KSMINYW5G0Q.LARGE.jpg"], "step_title": "Step 5: Going Portable"}, {"step": 6, "steps_text": "The SparkFun blocks snap together like Legos. We suggest reading the tutorials on the blocks at https://learn.sparkfun.com/tutorials/general-guide...The order of the blocks are:Console block with Edison GPIO block Battery blockCare must be taken with the battery block. The power connectors to the 3.7 Li-Iom battery can potentially short other blocks which is why it is a good idea to put it under the GPIO block (also Kapton tape may help).Hooking up the Edison using GPIO block:3.3V Power to VCC on the HX711 board GP12 to DAT GP128 to CLK Ground to GND", "step_imgs": ["https://cdn.instructables.com/FIA/Z0J3/INYW5HX8/FIAZ0J3INYW5HX8.LARGE.jpg"], "step_title": "Step 6: Assembling the SparkFun Blocks"}, {"step": 7, "steps_text": "A small version of the scale can be easily built that can fit inside the Nalgene sleeve.We removed a 5 kg load cell from a retail food scale purchased from a department store: http://www.amazon.com/Taylor-Stainless-Digital-Kit...Then we used a Dremel tool to create 2 circular disks for the pressure plates using oak paneling purchased from a home improvement center.After drilling offset counter-sink holes on our drill press, we created the classic cantilever \"Z\" configuration using washers, the load cell, and circular pressure plates.See photo for details.", "step_imgs": ["https://cdn.instructables.com/F8I/9NY5/INYW5HAX/F8I9NY5INYW5HAX.LARGE.jpg"], "step_title": "Step 7: Making a Portable Scale"}, {"step": 8, "steps_text": "We will use the same calibration code used for the static scale, but there are a couple of changes. The first thing to change in the software is the GPIO pin mapping. Before we had an Arduino breakout board and used the pin numbering of the Arduino. With the SparkFun blocks, we will use the MRAA numbering.Change the code to use MRAA:DATA: 20CLOCK: 13Second, calibration should be performed over the wireless interface using a fully charged battery to minimize variation in the reads. As the battery begins to drain, the 3.3V power rail may not deliver enough power to the load amp to properly read the load cell. A little experimentation may be in order to determine if the on-battery vs. on-USB affects calibration.", "step_imgs": [], "step_title": "Step 8: Calibrating a Portable Scale"}, {"step": 9, "steps_text": "Place the scale at the bottom of the Nalgene insulated sleeve and use tape to secure the wires to the sides.The Edison blocks can be secured to the exterior of the sleeve using a clear plastic bag.After loading the HX711 application onto the Edison, remember to allow the Edison to tare the scale at boot up. this means removing the bottle from the sleeve before starting up. As an alternative, the calibration code prints out a \"zero factor\" value that can be used for permanent scales where taring is not feasible. The Edison UPM code for the HX711 should be consulted on how to apply the zero factor.", "step_imgs": [], "step_title": "Step 9: Final Assembly"}], "channel": "Sensors"}, {"category": "technology", "description": "The essential tools you need to model an object later in 3D on your computer.", "title": "Budget 3D Modeler's Pocket Kit", "url": "https://www.instructables.com/id/Budget-3D-Modelers-Pocket-Kit/", "section": "technology", "steps": [{"step": 1, "steps_text": "To model an item in 3D, you need to know the object's dimensions and details. Sometimes you can obtain drawings or blueprints to help you, but for the smaller items, you need a way to record some basic measurements and details.\rAssemble the following components:\r3\"x5\" memo pad\rmechanical pencil\r6-inch steel pocket ruler\r6 foot measuring tape\rMost of these items can be found in your local grocery or department store. You may need to visit a hardware store to get the steel pocket ruler.", "step_imgs": ["https://cdn.instructables.com/F0A/D7RE/FE8PERMC/F0AD7REFE8PERMC.LARGE.jpg"], "step_title": "Step 1: Assembling the Kit"}, {"step": 2, "steps_text": "The Measuring Group is made up of two components - the 6-inch steel rule and the 6-foot measuring tape. \rThe 6-inch steel rule, unlike a regular ruler starts at the very end of the ruler, allowing for very precise measurements for both standard and metric. The one I have also has decimal equivalents on the back for standard 8ths, 16ths, 32nds and 64ths divisions.\rThe steel rule's pocket clip also allows it to be used as a depth gauge.\rThe slim 6-foot measuring tape allows you to measure objects larger than six inches or around odd-shaped items and still be a convenient size for your pocket. This measuring tape also measures in metric.", "step_imgs": ["https://cdn.instructables.com/FNH/BJBE/FE8PEROO/FNHBJBEFE8PEROO.LARGE.jpg"], "step_title": "Step 2: The Measuring Group"}, {"step": 3, "steps_text": "The measurements are useless without some way of recording them so they can be used later, along with any unusual details. \rThe notepad allows you to write down measurements and make detailed drawings of the object your modelling.\rA mechanical pencil allows you to write and erase as necessary. ", "step_imgs": ["https://cdn.instructables.com/FNK/DZAE/FE8PERQ9/FNKDZAEFE8PERQ9.LARGE.jpg"], "step_title": "Step 3: The Recording Group"}, {"step": 4, "steps_text": "Some basic upgrades to this kit would include:\r0.5mm mechanical pencil for sharper details\rPocket protractor for angles.\rRubber eraser for removing pencil marks and paperweight.", "step_imgs": ["https://cdn.instructables.com/F0A/D7RE/FE8PERMC/F0AD7REFE8PERMC.LARGE.jpg"], "step_title": "Step 4: Upgrades"}], "channel": "Software"}, {"category": "technology", "description": "This project works on anexcellent deal of reflex mechanism.It involves a  basic idea of developing an \u201cAUTONOMOUS HOOVER\u201d,that helps to reduce the daily work chores at houses,offices etc..", "title": "AUTONOMOUS HOOVER (Intel IOT)", "url": "https://www.instructables.com/id/AUTONOMOUS-HOOVER-Intel-IOT/", "section": "technology", "steps": [{"step": 1, "steps_text": "This project works on an excellent deal of reflex mechanism.It involves a  basic idea of developing an \u201cAUTONOMOUS HOOVER\u201d,that helps to reduce the daily work chores at houses,offices etc..The work of this device is to suck dust and stack those in the storage section provided along with.To facilitate targeted functions, interactivity with high quality infrared and dirt sensors play an essential role.  Additionally, a navigator is suited to accomplish the task by the device itself so that, it could detect any obstacle on its path and move accordingly without the user\u2019s intervention, by fixing rotator at the base of the device. Moreover, it could sense steep drops and retrace a portion of the path taken in order to avoid falling.This versatile device could carry metal detectors that can be incorporated within the device in order to filter out valuables along the cleaning area.According to a particular sequence of interacting with the hoover and the user,this machine can be operated anywhere by using Intel Edison Hence the data can be updated in cloud database for monitoring purpose.Besides the involuntary sucking function,a wireless voice command is used remotely  and also the path can be recorded.To achieve this, an Intel Edison board would suffice.The benefits of this device are many besides keeping the surface cleaner, can operate remotely saving time for people and lower maintenance cost as well.", "step_imgs": [], "step_title": "Step 1: Idea"}, {"step": 2, "steps_text": "Intel Edison      servo motor      proximity sensor      Infrared sensor      Dust sensor      Brushless motor      Small propeller      LCD display      Batteries      2-channel relay board      Temperature sensor", "step_imgs": [], "step_title": "Step 2: Hardware Required"}, {"step": 3, "steps_text": "\u00d8 Design a 4 wheeled bot for the hoover to run.\u00d8  Back wheeled motors are each connected to 12V DC supply.\u00d8  Inorder  to interface the intel board with the bot,a 2- channel relay board is connected which helps in stepping down the voltage as well.\u00d8  The system with arduino software connected with the intel Edison board, is programmed and dumped into the same for the following result: The dust sensor is used for sensing      the dust and displaying the dust value in the LCD display.  The proximity sensor is programmed so      as to avoid any obstacle.\u00d8  The machine would stop automatically when it detects an obstacle and proceeds by sucking the dust.\u00d8  For sucking the dust,the machine uses the air blower that\u2019s set in front of the bot.\u00d8  The air blower runs on 12 V DC supply.\u00d8  To store the dust,a stack session is provided along the sucking out section of the air blower.\u00d8  A scrubber is placed at the back of the bot to clean the area soon after it sucks dust.", "step_imgs": [], "step_title": "Step 3: Procedure"}, {"step": 4, "steps_text": "IRsensor: #ifndef _IRSENDREV_H_#define _IRSENDREV_H_// len, start_H, start_L, nshort, nlong, data_len, data[data_len]....#define D_LEN       0#define D_STARTH    1#define D_STARTL    2#define D_SHORT     3#define D_LONG      4#define D_DATALEN   5#define D_DATA      6#define USECPERTICK 50  // microseconds per clock interrupt tick#define RAWBUF 300 // Length of raw duration buffer// Marks tend to be 100us too long, and spaces 100us too short// when received due to sensor lag.#define MARK_EXCESS 100#define __DEBUG     0// Results returned from the decoderclass decode_results {    public:    volatile unsigned int *rawbuf; // Raw intervals in .5 us ticks    int rawlen;           // Number of records in rawbuf.};// main class for receiving IRclass IRSendRev{    private:    decode_results results;    //**************************rev**********************************    private:    int decode(decode_results *results);    void enableIRIn();    public:    void Init(int revPin);                          // init    void Init();    unsigned char Recv(unsigned char *revData);     //     unsigned char IsDta();                          // if IR get data    void Clear();                                   // clear IR data    //**************************send*********************************    private:    void sendRaw(unsigned int buf[], int len, int hz);    // private:    void mark(int usec);    void space(int usec);     void enableIROut(int khz);    public:    void Send(unsigned char *idata, unsigned char ifreq);};extern IRSendRev IR;#endifDust sensor:int pin = 8;unsigned long duration;unsigned long starttime;unsigned long sampletime_ms = 30000;//sampe 30s ;unsigned long lowpulseoccupancy = 0;float ratio = 0;float concentration = 0;void setup() {  Serial.begin(9600);  pinMode(8,INPUT);  starttime = millis();//get the current time;}void loop() {  duration = pulseIn(pin, LOW);  lowpulseoccupancy = lowpulseoccupancy+duration;  if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s  {    ratio = lowpulseoccupancy/(sampletime_ms*10.0);  // Integer percentage 0=>100    concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve    Serial.print(\"concentration = \");    Serial.print(concentration);    Serial.println(\" pcs/0.01cf\");    Serial.println(\"\\n\");    lowpulseoccupancy = 0;    starttime = millis();  }}", "step_imgs": ["https://cdn.instructables.com/FJ6/C347/IDFSCRV9/FJ6C347IDFSCRV9.LARGE.jpg"], "step_title": "Step 4: Programs"}], "channel": "Robots"}, {"category": "No category to show", "description": "\nTelephoto lenses are expensive\u00a0 and if you have\u00a0 one intended for an older SLR camera, you may consider\u00a0 using it with with your DSLR. My experience is that this is doable but there are a few critical issues that you have to deal with.\nContemporary DSLR cameras are rather unfriendly\u00a0 to older lenses for different reasons such as the lens-sensor distance , the mounting mechanism or even the camera software.\nIt is important\u00a0 to mount the old lens on the camera at the precise distance without damaging the internal parts..\nIn this instructable I'll show you how this can be done by a specific example using common tools and materials.\nI picked this used and damaged telephoto from a street market.\u00a0 It was a zoom 80-200mm F/4.5, ~400gr weight, with the\u00a0 JCPenney\u00a0 (an American multistore) brand on it\u00a0 and the sign \"made in Japan\" . Even at its own time it would be inferior compared to those made by Yashica, Nikon or Vivitar with similar specifications.\nIt was practically separated in two and full of dust, but the external lenses did not seem to have any scratches. Initially I intended to remove the lenses for other uses but looking at it more carefully I realized that the mechanical problems could be fixed.\nThe challenge was to repair it and mount it on my Olympus E-420.", "title": "How to Repair a Zoom Telephoto Lens and Mount It on Your DSLR Camera", "url": "https://www.instructables.com/id/How-to-repair-a-zoom-telephoto-lens-and-mount-it-o/", "section": "craft", "steps": [{"step": 1, "steps_text": "\n          Regardless if your lens needs repair or not,\u00a0 this is what you have to do first:Find out the camera-lens distance \n\t\tAttach the camera on a tripod and remove its own lens. Holding the telephoto with both hands in front of your camera with the setting of the telephoto at infinity, try to focus a very distant object. If you have a problem to keep the lens to the correct position use a paper inner tube but do not touch the internal parts of your camera.\n\t\tRotate the focusing ring a few degrees and focus again. In the final construction it is better to set the infinite point a few degrees before the rotation limit. This will allow sharp focusing by leaving some space around the correct point.\n\t\tFocus on close objects. Try to find the minimum focusing distance available. In my case the distance\u00a0 measured\u00a0 was 1.7 meters at 200mm and 1.5 at 80mm.Find/purchase the appropriate adaptor \nA T-ring is the best type of adaptor for this work. It offers two possibilities for mounting a lens, either by using the 42M threading of the internal ring\u00a0 or by removing the ring and fitting the tube on the main connector directly. The one shown here is the Olympus Four-Thirds T-ring for DSLRs which has a bayonette type mounting.", "step_imgs": ["https://cdn.instructables.com/FTY/YS1A/GF7BBKZ4/FTYYS1AGF7BBKZ4.LARGE.jpg"], "step_title": "Step 1: Preliminary Steps"}, {"step": 2, "steps_text": "\n\t\tA zooming system transforms a parallel beam to another parallel beam of different diameter depending on its position (afocal operation).\n\t\u00a0\n\t\tA simple method to visualize this, is to think of the zooming system + the objective lens as a composite \"objective\". The effective focal distance decreases when\u00a0 the components come closer.\n\t\tThus when we approach the zoom to the objective the focal distance decreases (ZOOM OUT) while when we retract the zooming system backwards, it increases (ZOOM IN). In the case of my lens the limits are 80-200mm.\n\t\u00a0\n\t\tContemporary lens systems do not have a sliding tube as this one , they work mostly by turning a ring and move the objective lens away from the zooming system. An independent lens system is used for focusing (see the next design in this page).", "step_imgs": ["https://cdn.instructables.com/FMW/02H9/GFA43C58/FMW02H9GFA43C58.LARGE.jpg", "https://cdn.instructables.com/FMI/93CX/GF5VAOHN/FMI93CXGF5VAOHN.LARGE.jpg"], "step_title": "Step 2: How a Zoom Telephoto  Works"}, {"step": 3, "steps_text": "Reasons for doing this:\n\t\tRepair mechanisms.\n\t\tIt was exposed to dust for long and needs Internal cleaning.\n\t\tYou want to see how it works.\n\t\tIt is fun!\nAll the above were valid in this case. Primarily the objective lens part was separated by the main body. As I found out this happened because the\u00a0 nylon washers connecting the lens to the\u00a0 focusing tube were\u00a0 broken and the tube\u00a0 internally\u00a0 was full of metal dust from bad contact.Caution:\nI do not recommend taking lenses apart in general. There are systems with 25 optical components , better not touch them. In this case the lens had about 5 optical components and the connecting screws where all 1.5mm and could be manipulated with medium difficulty.\u00a0How to do it:\nNo violence and avoid coffee. Just use your hands and appropriate screw drivers. Do not force any other kind of tools (knives, pliers, screwdrivers) on the lens body.\nStart disassembling the most obvious external parts and proceed with care as far as it is needed.\nIn the case described here it was only necessary to separate the three lens systems in order to clean them. However following arguments (3) and (4)\u00a0 I went all the way down.\nDo everything in a tray in order to avoid searching for 1.5mm screws on the floor.\nUse gloves and fine tissue paper to handle the lenses.\nUse toothpicks to align\u00a0 tiny holes on different tubes.\nIf you cannot put it back together don't panic, leave it for another time.", "step_imgs": ["https://cdn.instructables.com/F85/2WI2/GF06MF92/F852WI2GF06MF92.LARGE.jpg", "https://cdn.instructables.com/FOH/KNYS/GF06T5HY/FOHKNYSGF06T5HY.LARGE.jpg", "https://cdn.instructables.com/FCI/FCQT/GF06T5I2/FCIFCQTGF06T5I2.LARGE.jpg"], "step_title": "Step 3: Take It Apart ! (if Necessary)"}, {"step": 4, "steps_text": "Sliding mechanism\r\nI had to make new nylon washers for two delicate screws that serve as guides to the external focusing/zooming tube. These have dimensions 2.5mm external diameter and 1.5mm internal and thickness 1mm. Fortunately an ink pen filling has a similar size and it fitted nicely. The tolerance was ~0.2mm.Sanding\r\nSome parts of the thin metal tubes were rough so they had to be sanded gently on a table with a 200 sand paper.Grease\r\nThe Objective lens system stayed on a threaded part of the main body and a silicon grease was necessary there. This was done at the final stage of assembly after cleaning and mounting the lenses.", "step_imgs": ["https://cdn.instructables.com/F9Q/A6UJ/GF06MFNY/F9QA6UJGF06MFNY.LARGE.jpg", "https://cdn.instructables.com/F6C/XHVB/GF06MF95/F6CXHVBGF06MF95.LARGE.jpg"], "step_title": "Step 4: Repair Work"}, {"step": 5, "steps_text": "If the iris is working then fine. In the case discussed here , the iris was in place and it is operational but it was obviously handled by a ring close to the camera which was missing. Although there was a way to do something similar I selected to immobilize the iris in the open position, by placing a plastic tube through an opening in the focusing lens compartment.", "step_imgs": ["https://cdn.instructables.com/FRC/SIP9/GF069I9W/FRCSIP9GF069I9W.LARGE.jpg"], "step_title": "Step 5: The Iris"}, {"step": 6, "steps_text": "\n\t\tThe\u00a0mounting combines the last component of the lens with the T-ring. These are connected by a brass inner ring using 2M and 3M screws. Since the part of the lens is thick enough (2.5mm) I selected to drill holes on thread them for 3M. The screws are placed from inside.\n\tThe internal diameters of these tubes are not equal , so I used 1mm steel collars to match them.\n\tIf one has access to a lathe this kind of modification can be done in a better way. I think an inner tube is still the best method to connect the two parts but one could eventually use the M42 thread on the T-ring.\n\tThe mounting shown here is rigid enough to support the weight of the telephoto (400gr). In fact I trust it more in terms of robustness\u00a0 than I trust the rest of the lens!", "step_imgs": ["https://cdn.instructables.com/F28/DT23/GFA455I5/F28DT23GFA455I5.LARGE.jpg", "https://cdn.instructables.com/FZ9/WKL1/GF5VAOI3/FZ9WKL1GF5VAOI3.LARGE.jpg", "https://cdn.instructables.com/F3L/W8XB/GF5UXPOZ/F3LW8XBGF5UXPOZ.LARGE.jpg", "https://cdn.instructables.com/FPI/R3WH/GF5VAOHW/FPIR3WHGF5VAOHW.LARGE.jpg"], "step_title": "Step 6: Build a Proper Mounting for Your Camera"}, {"step": 7, "steps_text": "\nBefore the final assembly I mounted the lens to the camera a few times\u00a0 in order to adjust the correct distance for focusing. I had to\u00a0shorten \u00a0the lens part of the connector by precisly 1.3mm in order to get a focusing from 1.7m to infinity for the 200mm focal length. I also needed some space for fine focusing at the 200mm limit.\nBefore mounting, all parts were cleaned with alcohol and cotton. I used a special liquid and tissue paper for the lenses.\nWhen placed on the camera, the measuring ring was adjusted in order to read\u00a0 the\u00a0 correct distance.", "step_imgs": ["https://cdn.instructables.com/FAR/50AP/GFA455IQ/FAR50APGFA455IQ.LARGE.jpg", "https://cdn.instructables.com/F4A/CRKK/GFA455HC/F4ACRKKGFA455HC.LARGE.jpg"], "step_title": "Step 7: Assembly and Focusing Range"}, {"step": 8, "steps_text": "Measure the field size \n\t\tThis can be easily done even indoors. Focus on a surface distant a few meters and shoot. Then measure with a tape the object distance and the length of the surface spanned in the photo. The lens I am describing has a field size of 5o x 3.7o\n\t\tIf you prefer to think of the field size as a distance, in the case of 5o , the length spanned when you are focusing on an object at 1000m is 175m.\n\t\tAnother simple method is to shoot the moon , which extends ~0.5o and then measure on the photo the relative size of the moon. This was done in the photos shown below. The moon was photographed a cloudy night, rain followed. I wanted to catch the seek and hide of the moon behind the clouds.Estimate the magnification\n\t\tThis term is not very precise for cameras. The \"magnification\" of a 200mm lens on a DSLR can be estimated taking into account two facts. (a) 1x magnification in a conventional SLR corresponds roughly to 50mm focal length and (b) the sensor length of the DSLR is about 1/2 the 35mm film. Therefore in this case we have 8x magnification.", "step_imgs": ["https://cdn.instructables.com/FDM/IW9M/GFA43CKT/FDMIW9MGFA43CKT.LARGE.jpg", "https://cdn.instructables.com/FUL/XZ2L/GFA43CL7/FULXZ2LGFA43CL7.LARGE.jpg", "https://cdn.instructables.com/F6H/LK6X/GFDX0J2S/F6HLK6XGFDX0J2S.LARGE.jpg"], "step_title": "Step 8: Measure the Field Size and Estimate the Magnification"}, {"step": 9, "steps_text": "What the resolution limit is \n\t\tThink of a car coming to your direction on the highway with the lights on. When it is far away both lights are merged in one. You need to now what the maximum distance is for the two lights to be separated by an optical instrument (e.g. your eyes). This depends mostly on the size of the objective lens and is usually expressed as an angle.Estimate the resolution limit\n\t\t.My house in Athens is facing mount Ymittos on the top of which there is a group of telecommunication towers (see photo). The tallest one has two red lights\u00a0 0.6m apart (measured with a telescope of known field size) while the distance to the tower is 7000m (measured from Google Earth). It is a perfect calibration target!\n\t\tThe angle of 0.6/7000 radians expressed in arcsec is ~18arcsec. The size of one pixel in a 10Mpxl sensor when this\u00a0 lens is used,\u00a0 corresponds to\u00a0 5 arcsec and this means that the distance between the lights spans 18/5=3.6 pixels, quite a small number.\n\t\tThe theoretical resolution limit for such a lens (44mm diameter) is about 2.5 arcsec much smaller that what was estimated here. I don't think that this can be reached because there are other factors involved (complexity and quality of the lenses, atmospheric conditions) .", "step_imgs": ["https://cdn.instructables.com/F5H/XJPC/GF80DYFM/F5HXJPCGF80DYFM.LARGE.jpg", "https://cdn.instructables.com/FRW/JXPI/GF80DYG5/FRWJXPIGF80DYG5.LARGE.jpg"], "step_title": "Step 9: Estimate the Resolution Limit"}, {"step": 10, "steps_text": "\n\t\tIn terms of magnification using this lens you have a viewing field through the camera as that through a set of\u00a0 8x44 binoculars. Thus it is great for shooting distant objects. The moon is also an interesting target. Try also to shoot Jupiter with its satellites.\n\t\tBesides long distance a telephoto is ideal for medium distances e.g. portraits or nature,\u00a0 because of this nice blurring effect on the background. All the examples\u00a0 shown here\u00a0 were\u00a0 shot at 2-4m.\n\t\tOverall you can add one valuable piece of\u00a0 equipment in your photo bag at a minimal cost.", "step_imgs": ["https://cdn.instructables.com/FO1/IZYV/GF80DYGS/FO1IZYVGF80DYGS.LARGE.jpg", "https://cdn.instructables.com/FUO/EPGG/GF80DYGE/FUOEPGGGF80DYGE.LARGE.jpg", "https://cdn.instructables.com/F9O/8HB5/GF80DYHK/F9O8HB5GF80DYHK.LARGE.jpg", "https://cdn.instructables.com/FDB/JH67/GF80DYGO/FDBJH67GF80DYGO.LARGE.jpg"], "step_title": "Step 10: What You Can Do With It"}], "channel": "No channel to show"}, {"category": "No category to show", "description": "One of the best ways to preserve old photos is to copy the  negatives with a digital camera and then use  image processing software to \"develop\" the photo.   I built a setup for digitiziation with a  DSLR to process my old negatives some of which have a  sentimental value.  Since I do not have a macro lens, I combined an SLR  lens with a  couple of cheap adaptors. The rest was improvised from pieces of wood,  cardboard ,  PVC and even meccano parts.NOTE: Check out  a recent update of this instructable!", "title": "How to Digitize 35mm Negatives", "url": "https://www.instructables.com/id/How-to-digitize-35mm-negatives/", "section": "craft", "steps": [{"step": 1, "steps_text": "Image formation   Film photography is based on the sensitivity of\u00a0 silver halides (AgBr, AgI etc) to light. The upper layer of the film is a coating of gelatin containing crystal grains of silver halides.    When the film is exposed to light, some Ag+ ions are excited to higher energy states and a few combine with electrons to form Ag which will act as nucleation centres in the development stage. At this point the latent image is formed .   When the film is developed with chemicals,\u00a0 an oxidation - reduction reaction takes place. The silver ions in the exposed regions are reduced to neutral silver atoms which coagulate to form metal grains. This is a negative image since the film becomes non transparent in the exposed regions.    Colour photography is based on a variation of this process with the addition of organic coloured dyes coupled to the silver halides. The film coating\u00a0 has three layers for the three basic colours (see photo). Deterioration of negatives   Black and white negative images consist of silver grains which are stable over time. The supporting gelatin is sensitive to humidity and temperature but if stored properly B/W film can last for hundreds of years.    On the other hand the colour negatives are more sensitive to environmental factors because of the organic dyes they contain. The cyan dyes fade away faster and the negative becomes reddish. Exposure to light causes the magenta dyes to fade also, due to\u00a0 ultraviolet\u00a0 light. ", "step_imgs": ["https://cdn.instructables.com/FSL/WWUT/GGBZI7K2/FSLWWUTGGBZI7K2.LARGE.jpg"], "step_title": "Step 1: About Film Negatives"}, {"step": 2, "steps_text": "   The resolution of the image recorded on the negative depends both on the quality of the film and the camera used. Suppose you have been using several cameras of different qualities as I did. We need an estimation of how much detail has been recorded\u00a0 in each case.    The figure of merit here is the resolving power of the camera lens which depends upon the size of the lens and the wavelength of the light source. The resolving power R of a lens of diameter D\u00a0 is given by the following simplified formula which is based on wave optics:  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 R (measured in arcsec)=120/D (measured in mm) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 A specific example   A 58/2 lens\u00a0 has a focal distance of 58mm and a diameter of 58/2=29mm.\u00a0 The resolving power is R=120/29=4arcsec. The viewing angle through the camera is about 30 degrees which covers the 36mm\u00a0 length of the negative. The minimum\u00a0 sizeof a dot(or line width)\u00a0 that can be\u00a0 recorded on the negative is 36mm x 4 arcsec / (30 x 60 x 60 arcsec) =1.3micrometers.    Such a camera fully exploits the potential of a\u00a0 good quality film with a recording capability of about 350 line/spaces per mm.  \u00a0   If you repeat this calculation in the case of a low end cheap camera the minimum feature size may become 10 times larger. Such a camera cannot take full advantage\u00a0 of even a mediocre negative.  \u00a0", "step_imgs": ["https://cdn.instructables.com/FML/OGPY/GGPF45SW/FMLOGPYGGPF45SW.LARGE.jpg"], "step_title": "Step 2: How Much Detail Is Recorded on Your Negative?"}, {"step": 3, "steps_text": " Since the resolving capability of even a normal film usually exceeds your commercial digital camera or scanner the direct answer is :\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 As much as you can get. Here is a brief justification of the above statement:   Standard consumer\u00a0 films are capable of\u00a0 recording dense line/space patterns in the range of \u00a0 50- 150 lines/ mm\u00a0 ( for example see the\u00a0 data sheet of\u00a0 Agfapan 100). Let us workout the lower value.    A pattern of 50 lines/mm corresponds to\u00a0 100 pxls / mm . If you intend to use\u00a0 a scanner to copy them , you need at least 100 dots *25.2 / inch=2520 dpi.    If you intend to use a digital camera , the 36mm x 24mm negative format requires 36*24*100 *100pxls=8.64Mpxls. A 10Mp camera is sufficient.    If you repeat the calculations for the upper 150/mm limit the corresponding numbers are 3x2520=7560 dpi and 3x3x8.64=77.8Mpxls !    This simply demonstrates the potential\u00a0 of the film as a\u00a0 recording medium. It is not a surprise that films are still used for specific applications such as aerophotography. ", "step_imgs": ["https://cdn.instructables.com/FKV/QQ0E/GGBZOZMN/FKVQQ0EGGBZOZMN.LARGE.jpg"], "step_title": "Step 3: How Much Resolution Do You Really Need ?"}, {"step": 4, "steps_text": "Now, after this lengthy\u00a0 introduction - which I hope was useful to some people - it's time to get practical. These are the parts of the setup: 1. Your DSLR. 2. A macro lens capable to frame exactly\u00a0 the 36x24mm negative. This can be substituted with a common SLR lens and adaptor rings . 3. A film holder that you can make yourself. 4. An opaque plastic screen 5, A light source. I have used two different slide projectors for this as well natural light by aiming on a white wall outside the house. Everything works including a tungsten filament lamp . Since I needed to have good control of the distance between the film holder and the lens in order to fit the frame exactly, I made a useful x-stage out of meccano parts . You can substitute this with something simpler, but\u00a0 the stage proved to be useful..", "step_imgs": ["https://cdn.instructables.com/FWG/WJW5/GPVEVKZN/FWGWJW5GPVEVKZN.LARGE.jpg"], "step_title": "Step 4: Design of a DSLR Setup"}, {"step": 5, "steps_text": "If you do have one, lucky you, go on and use it. \u00a0 I used a 2/58 SLR lens. To mount this on the camera I used an adaptor for M42 (42mm metric threading) for my specific camera and and two M42 extension rings. I already had these for other applications. I use them to mount other lenses on the\u00a0 camera as well as to mount the camera on telescopes. The M42 extension rings come in sets of three sizes and I saw them on e-bay for less than 10$. I have a pair of such sets that I got from a flee market a long time ago. Never regretted that buy. Please do not use any other method to mount a lens on your camera (PVC , cardboard ). Remember that damaging the interior will cost you much more than a set of adaptors.", "step_imgs": ["https://cdn.instructables.com/FOA/J5T6/GPVEVKYK/FOAJ5T6GPVEVKYK.LARGE.jpg", "https://cdn.instructables.com/FLV/O73W/GPVEND84/FLVO73WGPVEND84.LARGE.jpg"], "step_title": "Step 5: I Suppose You Don't Have a Macro..."}, {"step": 6, "steps_text": "I used a 30cm board for the basis of the whole construction and I mounted the camera on a higher platform. This setup is easy to work with and can be useful\u00a0 for other similar projects involving the camera.", "step_imgs": ["https://cdn.instructables.com/F79/CJQR/GPVF27UZ/F79CJQRGPVF27UZ.LARGE.jpg", "https://cdn.instructables.com/F2P/L3UV/GPVEND87/F2PL3UVGPVEND87.LARGE.jpg"], "step_title": "Step 6: The Optical Bench"}, {"step": 7, "steps_text": "The purpose of the x-stage is to control exactly the distance between the lens and the negative in order to cover the whole camera sensor width with the image.No pixels should be wasted! Of course you can do this by a sliding stage made out of wood, plastic or any other material. However I needed an excuse to use the meccano of my childhood. The platform slides between two vertical guides and it is controlled by a 4M screw of 6cm length.", "step_imgs": ["https://cdn.instructables.com/FPE/4XM3/GPLJ1XO4/FPE4XM3GPLJ1XO4.LARGE.jpg", "https://cdn.instructables.com/FO4/S8AW/GPLJ1XOD/FO4S8AWGPLJ1XOD.LARGE.jpg", "https://cdn.instructables.com/F8Q/QX1O/GPBD5AHR/F8QQX1OGPBD5AHR.LARGE.jpg", "https://cdn.instructables.com/FEY/QJ2L/GPBDI0JA/FEYQJ2LGPBDI0JA.LARGE.jpg", "https://cdn.instructables.com/FQR/TFSG/GP7IGSM9/FQRTFSGGP7IGSM9.LARGE.jpg", "https://cdn.instructables.com/FU7/Y5PJ/GPLJ1XP7/FU7Y5PJGPLJ1XP7.LARGE.jpg"], "step_title": "Step 7: The Meccano X-stage"}, {"step": 8, "steps_text": "After fooling around with many designs involving springs, plastic, metal etc, , I selected the simplest solution: cardboard . The film holder is made out of cardboard and it is supported by a thin plywood piece. A plastic slide part from a slide is the ideal window which must be aligned to the camera lens .", "step_imgs": ["https://cdn.instructables.com/F8V/MYPS/GPVEND8F/F8VMYPSGPVEND8F.LARGE.jpg", "https://cdn.instructables.com/FYQ/DC66/GPVEND8C/FYQDC66GPVEND8C.LARGE.jpg", "https://cdn.instructables.com/FOV/OYQO/GPVF27VR/FOVOYQOGPVF27VR.LARGE.jpg", "https://cdn.instructables.com/FFQ/417V/GPVEVKYN/FFQ417VGPVEVKYN.LARGE.jpg", "https://cdn.instructables.com/FO9/6KIK/GPVEND8B/FO96KIKGPVEND8B.LARGE.jpg", "https://cdn.instructables.com/FYG/WITJ/GPVEVKYP/FYGWITJGPVEVKYP.LARGE.jpg"], "step_title": "Step 8: The Film Holder"}, {"step": 9, "steps_text": "A cardboard tube completes the setup. Everything can be disassembled and stored in a box, when not used.", "step_imgs": ["https://cdn.instructables.com/FIH/5A7E/GPVENNW2/FIH5A7EGPVENNW2.LARGE.jpg", "https://cdn.instructables.com/FOI/DV42/GPVF27WZ/FOIDV42GPVF27WZ.LARGE.jpg", "https://cdn.instructables.com/FZY/APRO/GP7IHQRE/FZYAPROGP7IHQRE.LARGE.jpg"], "step_title": "Step 9: The Finished Setup"}, {"step": 10, "steps_text": "There are two basic methods for illumination1. Natural sunlight. You may work outside , set the camera for sun illumination and aim the device towards a white wall. It works very well for colour negatives.2. A lamp source Use a filament lamp combined with an opaque screen, Set the camera for lamp illumination. I use two different slide projectors I have.", "step_imgs": ["https://cdn.instructables.com/FPJ/LPK5/GPVEND8W/FPJLPK5GPVEND8W.LARGE.jpg", "https://cdn.instructables.com/FVT/BUKJ/GPVEVKYZ/FVTBUKJGPVEVKYZ.LARGE.jpg"], "step_title": "Step 10: Try Different Light Sources"}, {"step": 11, "steps_text": "A few tips for the camera:1. Exposure time selection. I prefer to overexpose by a couple of stops. The range of exposure times is from 1/100s to 1/250s2. Focusing A DSLR has the very useful feature of magnifying the image x10 times and focusing on a detail. When doing this I prefer to focus on a regular pattern if there is such on the photo. Otherwise select a region with an edge with a clear separation\u00a0 line from light to dark.", "step_imgs": ["https://cdn.instructables.com/FAS/1BJ3/GPVF282A/FAS1BJ3GPVF282A.LARGE.jpg", "https://cdn.instructables.com/FOM/XMC0/GPVEVL0V/FOMXMC0GPVEVL0V.LARGE.jpg"], "step_title": "Step 11: Now Shoot!"}, {"step": 12, "steps_text": "Black and white is magic.  We have a 3D coloured perception of the world. B/W reduces what we see into pure form and tonal quality . In photography as well as in painting it is important to balance these elements. This is what you have to do in the digital darkroom.Camera settings The negative was photographed\u00a0 using\u00a0 a slide projector as a light source (200W lamp) at 1/250 sec exposure speed. The projector was 60cm away from the opaque screen. The camera lens was set at F/8 for less distortion and more depth of focus.Select a clear pattern for fine focusing. In this case I selected the chair pattern which was focused by setting the camera in \"live view\" and\u00a0 used the feature of magnification x10 times on a detail for focusing. This is a very useful feature of most DSLRs.Digital develpoment I used Photoshop 6.0 . The terminology is similar for any other software. 1. The initial shot needs cropping ,\u00a0 rotating and colour inverting . 2. Then the colour scheme is turned to grayscale This results in\u00a0 a faint image which needs further balancing of tones. 3. The challenge here is to preserve the\u00a0 details as well as the gray scale\u00a0  (e.g.\u00a0 in the model's hair)\u00a0 when you try to increase the darks. I strongly prefer to adjust the tone levels instead of using the common brightness/contrast tool. 4. If it is necessary to smooth the tones add some limited blurring (Gaussian Blurr with a range smaller than 3 pixels). 4. Finally you may have to frame the theme by cropping the picture.About this photo: I took this shot with a humble SMENA camera back in 1979 using a FP4 Ilford B/W negative which I developed myself. I like the gradation of tones\u00a0 and the relation of the three people involved here: the photographer/viewer, the painter and the model. One\u00a0 of my favourite photos over the years.", "step_imgs": ["https://cdn.instructables.com/F79/C7T6/GP7IHB76/F79C7T6GP7IHB76.LARGE.jpg", "https://cdn.instructables.com/FTL/HGEQ/GPLJ2KEL/FTLHGEQGPLJ2KEL.LARGE.jpg", "https://cdn.instructables.com/FR3/7CKX/GP7IHB6X/FR37CKXGP7IHB6X.LARGE.jpg", "https://cdn.instructables.com/F5O/M69L/GPBDIH0P/F5OM69LGPBDIH0P.LARGE.jpg"], "step_title": "Step 12: In the Digital Darkroom: Black and White"}, {"step": 13, "steps_text": "This specific negative is 15 years old. The colours have been preserved.Camera settings Essentially the procedure is the same as for B/W. The negative was photographed\u00a0 using\u00a0 a slide projector\u00a0 at\u00a0 a speed of 1/200 sec. \u00a0The camera was set for\u00a0 tungsten illumination.Development 1. The initial shot needed cropping and rotating . 2. Then the colour scheme was inverted. 3. The challenge here is\u00a0 to balance the colours and tones. I prefer to work by adjusting the tone levels for each colour separately and then make overall adjustments of the whole colour scheme. I avoid using the\u00a0 brightness/contrast tool. 4. The next step is to control the colour hue/saturation in order to obtain a natural colour scheme. As a rule, the blue colour will need desaturation.", "step_imgs": ["https://cdn.instructables.com/F0J/37LA/GPBDIFRF/F0J37LAGPBDIFRF.LARGE.jpg", "https://cdn.instructables.com/F5Z/60W5/GP7IHAOE/F5Z60W5GP7IHAOE.LARGE.jpg", "https://cdn.instructables.com/FVM/ZRQN/GPBDIFRA/FVMZRQNGPBDIFRA.LARGE.jpg", "https://cdn.instructables.com/FS5/6CNX/GPBDIFQY/FS56CNXGPBDIFQY.LARGE.jpg"], "step_title": "Step 13: Colour Negatives"}, {"step": 14, "steps_text": "As discussed\u00a0 in step 1, when the colour negative gets older, the blue dyes tend to fade away. Therefore the negative becomes reddish  and when the colours are inverted,\u00a0 blue and green tones dominate. It may prove difficult to restore colour balance. In such cases I work with each colour separately adjusting the range of tones, hue and saturation. I repeat this procedure 1-2 more times. The photo shown here is from a 30 year old negative. The best I could do after playing around with colours and levels was to trust the \"variations \" option of Photoshop 6.0. This resulted in a much better balance than that I could obtain manually. Still it does not look natural. Compare the two photos.", "step_imgs": ["https://cdn.instructables.com/FHG/F37S/GPVEVCLZ/FHGF37SGPVEVCLZ.LARGE.jpg", "https://cdn.instructables.com/FGV/3NVT/GPBDI0MH/FGV3NVTGPBDI0MH.LARGE.jpg"], "step_title": "Step 14: Old Colour Negatives Can Be Tough"}, {"step": 15, "steps_text": "1. The setup was worth making, it proved to be stable , versatile \u00a0 and effective . Lighting and focusing are\u00a0 controlled very well. 2. There was no problem with B/W processing, I processed 34 years old negatives. The contrast was excellent. 3. If a coloured negative is less than 20 years old probably there should be no problem. However treating colours one by one is not trivial. 4. Older negatives may appear as \"overpainted \" when processed. Probably one could overcome this by treating colours and contrasts in different layers. If it fails you can always turn to B/W. 5. You cannot save everything.\u00a0 You may have to let go\u00a0 overexposed,\u00a0 underexposed or unfocused negatives. 6. This method is faster than\u00a0 a scanner and it offers much more control  of the illumination used and the contrast. It offers the additional possibility to use sunlight (by pointing to a wall outside). \u00a0 Overall,\u00a0 judging from the\u00a0 results obtained so far (more than 200 photos)\u00a0 I intend to continue using it for the rest of my negatives, as well as for those\u00a0 supplied by friends!", "step_imgs": ["https://cdn.instructables.com/F03/ELD9/GP7IHBGX/F03ELD9GP7IHBGX.LARGE.jpg"], "step_title": "Step 15: Conclusions"}], "channel": "No channel to show"}, {"category": "No category to show", "description": "I like to keep juggling balls on me wherever I go, just in case I have a chance to use them. But balls take up too much space, and bean bags feel too light. So I decided to make my own bags that I could size and weight as I wanted.\nHere are the steps to make your own customized juggling bags.\nThe monetary cost of these bags depends entirely on what materials you use, and how many of them you can salvage or have to pay for. My monetary cost out of pocket was probably about a buck, since the thread and the BBs were the only things I actually paid for.\nThe time cost on this project for me was about an hour a bag.", "title": "Custom 'Octohedral' Juggling Bags (or Hacky Sacks)", "url": "https://www.instructables.com/id/Custom-Octohedral-Juggling-Bags-or-hacky-sacks/", "section": "craft", "steps": [{"step": 1, "steps_text": "\u00a0Required Materials:\n\u00a0\u00a0- Fabric: I used two types of material to make the two-toned balls. I used heavy duty cotton canvas for the lighter panels, and leather harvested from an old purse for the darker panels. You could do this project with up to eight different colors, but I would recommend one or two.\n\u00a0\u00a0- Filling:To achieve the density I wanted, I opted for Copperhead BBs. These make the bags nice and heavy, while allowing them a lot of 'squish'. The down side is that they tend to 'clink'' while I'm juggling them. Other options include rice (not recommended), styrofoam\u00a0pellets, sand, ground walnut shell (which is Klutz puts in their juggling bags) etc. Make sure that whatever you use won't leak through the weave of the fabric or the seams (this may mean making smaller stitches which takes longer).\n\u00a0- Thread: This should be pretty self explanatory. Choose something that matches fairly well with the material, as it may show through a little bit at the seams. I just went with basic black.\n\u00a0\u00a0- Paper: The easiest way to make a template is just to print one out on a printer. that said, you could make one with a compass if you have the patience. Either way, you'll probably want to make the template out of paper or perhaps cardboard.\nRequired Tools:\n\u00a0\u00a0- Scissors: Needed for cutting out the template, cutting the fabric, and cutting the thread, as well as any additional trimming you want to do.\n\u00a0\u00a0- A sewing needle: This should be pretty self explanatory.\n\u00a0\u00a0- A Measuring device: I used the lid from my kids' play kitchen toys, as it seemed about right. The obvious thing to use would be a measuring cup, however if you are looking for a specific weight, a scale might make more sense.\n\u00a0\u00a0- A Pen: For tracing the template onto the cloth.\nRecommended tools:\n\u00a0\u00a0- Pliers: If you are using heavy cloth or leather, you'll probably want something to help pull the needle through the fabric. Otherwise your fingers get pretty sore pretty quickly.\n\u00a0\u00a0- Safety pins: These can be useful for holding the panels in place as you are stitching.\n\u00a0\u00a0- A Thimble: I completed this project without one. If \u00a0I had had one, I would have used it. Especially for pushing the needle through the leather. As it was, I got to develop some new callouses for the project.\n\u00a0\u00a0- A Computer and \u00a0Printer: This is, as mentioned above, the easiest way to transfer your template from the ethereal to the concrete.\n\u00a0\u00a0- Scotch Tape (Cello Tape I believe it's called across the pond): This is useful for making a paper funnel for pouring the filling into the balls.\nOptional tools:\n\u00a0\u00a0- \u00a0Sewing machine: I hand sewed this entire project because I was using the leather and our sewing machine wouldn't have been up to the challenge. If you want do most of the job by machine, you will save a ton of time, but you will still need to do some hand sewing to close up the balls. (Unless you have a really cool sewing machine!)\n\u00a0\u00a0- A Whiteout Pen: If you are doing this project with dark fabric, a whiteout pen makes the lines much easier to see and follow. I recommend tracing the template using this.", "step_imgs": ["https://cdn.instructables.com/FNX/925U/G4UH8PFZ/FNX925UG4UH8PFZ.LARGE.jpg"], "step_title": "Step 1: Materials and Tools"}, {"step": 2, "steps_text": "Basically you need an equilateral triangle. If you don't want pokey corners, you need to round the corners on the triangles.\nI created my template in Google Sketchup and \u00a0I have uploaded it here\u00a0in svg format , so if that works you can just download that and scale it to the size you want. Or you can create your own template using normal triangles, circles, whatever odd shape you want. As long as each panel will connect to three other panels with relative ease.\nPrint the template out and cut out at least one of the shapes. I cut out eight of them just so I wouldn't have to worry about destroying one two, or seven of them.", "step_imgs": [], "step_title": "Step 2: Create the Template"}, {"step": 3, "steps_text": "Trace the template onto the fabric.\nThen cut the panels out leaving 'enough room' to sew them together. I left about a quarter inch around the lines. Depending on your material and how much it frays, you can leave more or less than this. I could probably have left an eighth inch around the leather ones, but decided to go for more uniformity.\nNote that the leather panels are traced in whiteout, which makes the lines much easier to see.", "step_imgs": ["https://cdn.instructables.com/FN2/7FDD/G4PBSVVS/FN27FDDG4PBSVVS.LARGE.jpg"], "step_title": "Step 3: Trace and Cut Out the Panels"}, {"step": 4, "steps_text": "Start by sewing two panels together along a single edge. [Figure 1]\nAfter that, sew a third panel to the edge of one of the first two panels.\u00a0Then, sew a fourth panel to the edge of the third panel, and so on and so forth, making sure to keep the panels connected in a zigzag pattern, until you have six panels sewn together in a line [Figure 2].\nFinally, sew the outside edge of panel 6 to the outside edge of panel 1, so that you have a rough cylinder, with a three-sided hole on top, and a three-sided hole on bottom [Figure 3].Recommendations:\n\u00a0- If you cut off enough thread, you can stitch this whole cylinder with one piece, which means you can just tie the two loose ends together when the meet around the cylinder [Figure 4].\n\u00a0- When sewing by hand, I always cut off about twice as much thread as I think I'll need. It's easier to throw away an extra two feet of thread than to tie off and start again in the middle.\n\u00a0- By 'twice as much thread', I mean approximately four times the length of the seam, since you will be feeding the thread through the needle, and then doubling it up so both ends are at the tail and the needle is half way along the thread. If that doesn't make sense, try it and it should.\n\u00a0- If you are worried about the panels moving around while you are sewing them, you can stick safety pins anywhere along the length of the seam to help hold them in place [Figure 5].", "step_imgs": ["https://cdn.instructables.com/F4F/PQS3/G4PBSVWB/F4FPQS3G4PBSVWB.LARGE.jpg", "https://cdn.instructables.com/FMR/GZNI/G4PBOWLM/FMRGZNIG4PBOWLM.LARGE.jpg", "https://cdn.instructables.com/FO1/C5XS/G4UH8PGM/FO1C5XSG4UH8PGM.LARGE.jpg", "https://cdn.instructables.com/FXU/7NSY/G4PBX2ES/FXU7NSYG4PBX2ES.LARGE.jpg", "https://cdn.instructables.com/FBV/TOJV/G4PBX2E6/FBVTOJVG4PBX2E6.LARGE.jpg"], "step_title": "Step 4: Sew a Cylinder"}, {"step": 5, "steps_text": "\u00a0Once you've got your cylinder sewn, take a fifth panel and sew it on to one of the ends of the cylinder. Again, if you use a long enough piece of thread (and it doesn't break part way through) you can just sew all the way around the triangle and tie the ends off together.", "step_imgs": ["https://cdn.instructables.com/FY1/YBL0/G4PBSVWQ/FY1YBL0G4PBSVWQ.LARGE.jpg"], "step_title": "Step 5: Close One End"}, {"step": 6, "steps_text": "\u00a0Now, take your last panel and sew it most of the way on to the other end of the cylinder. Remember that you are sewing this inside out, and you're going to have to pop it out before closing it up.\nHow much of an opening you leave depends partly on your dexterity, and partly on your fabric. Since I was using heavy fabric/leather, I had to leave about half to three fourths of an edge unsewn to be able to pop it through.\nAgain, using a single piece of thread here will help in the end. Make sure you leave a good two to three inches of tail where you start stitching, so that you can tie off easily once the bag is closed.", "step_imgs": ["https://cdn.instructables.com/FCD/9S2C/G4UH8PGY/FCD9S2CG4UH8PGY.LARGE.jpg"], "step_title": "Step 6: Mostly Close the Other End"}, {"step": 7, "steps_text": "\u00a0This is the most difficult part of the project, at least if you are using heavy material.\nIt may help to have a pencil or something else to poke the material out with, or else use the pliers to reach in and grab a corner to pull with.\nIt may also help to trim off as much of the extra fabric as is practical. Make sure to leave enough that it won't fray and fall apart. But the less excess you have, the less fabric you have to cram through your pull-hole at any one time.\nAlso, in this step hand-stitching may save you some work. If you hand stitched the seams, you can loosen the stitches to allow a little bit of extra room.\nAfter you have turned the bag inside out, pull the loose ends of the threads from the last panel from the inside to the outside. You'll get to use these to tie off at the end.", "step_imgs": ["https://cdn.instructables.com/FCD/9S2C/G4UH8PGY/FCD9S2CG4UH8PGY.LARGE.jpg", "https://cdn.instructables.com/FWO/Z9HC/G4PBOWM3/FWOZ9HCG4PBOWM3.LARGE.jpg"], "step_title": "Step 7: Turn It Right-side Out"}, {"step": 8, "steps_text": "\u00a0Now that your bag is right-side out, add the filling material.\nAssuming you are making more than one bag (you could just make one to use as a hacky sack), you'll probably want to measure your filler out so that you have uniformity of weight. This is where your measuring device comes in handy [No picture].\nI found that using a piece of scrap paper and some tape to make a funnel was immensely helpful. Insert the funnel into the bag [Figure 1] and pour.", "step_imgs": ["https://cdn.instructables.com/FW1/RB4G/G4PBSVWY/FW1RB4GG4PBSVWY.LARGE.jpg", "https://cdn.instructables.com/FE4/ZRJH/G4UH8PHV/FE4ZRJHG4UH8PHV.LARGE.jpg", "https://cdn.instructables.com/FXD/STJF/G4PBX2FM/FXDSTJFG4PBX2FM.LARGE.jpg"], "step_title": "Step 8: Add Filler"}, {"step": 9, "steps_text": "\u00a0Now comes the slightly complicated part. You want to set some stitches to close up the bag, and you want to be able to tighten them up so that when you are done the seam is still nice and neat and hidden.\nIf you hand stitched the bags up to this point, then probably you got some stretched stitches when you turned the bag right-side out. This is good, as it gives you an indication of how to finish up the stitches.\nWith your thread sticking out of the bag from the inside, you want to take your needle and feed it \u00a0through one panel from the inside out [Figure 1].\u00a0Then, come across the seam and go through the second panel, outside to inside [Figure 2]. You have now completed a single stitch.\nNow, repeat the process reversed. Needle through the second panel, inside to outside [Figure 3]. Then needle through the first panel, outside to inside [Figure 4].\nLeave your stitches loose as long as you can, because they're easy to tighten later, and you want to have room to sew.", "step_imgs": ["https://cdn.instructables.com/FKP/NPAX/G4UH8PI8/FKPNPAXG4UH8PI8.LARGE.jpg", "https://cdn.instructables.com/F8R/YNCK/G4UH8PIE/F8RYNCKG4UH8PIE.LARGE.jpg", "https://cdn.instructables.com/FXW/7EKF/G4PBSVYH/FXW7EKFG4PBSVYH.LARGE.jpg", "https://cdn.instructables.com/FCN/NXYB/G4PBX2FX/FCNNXYBG4PBX2FX.LARGE.jpg"], "step_title": "Step 9: Stitch Up the Bag"}, {"step": 10, "steps_text": "\u00a0Make sure you've still got the tail end of your threads sticking out to tie off to. Then, start tightening up your stitches. If you hand sewed them as instructed in the previous step, they will alternate sides for which thread to pull on to tighten the previous stitch.\nAs you tighten the stitches, tuck the extra material inside the bag so the seam is nice and tight and neat.\nOnce all of the stitches are tightened, tuck the last bit of extra fabric in and pull the needle end and the tail end of the thread tight. Then, tie the two ends together. I just used a couple of square knots and cinched them nice and tight.\nFinally, thread the extra thread through your needle and poke it into the seam and back out the middle of one of your panels. Pull the thread extra tight (so the panel puckers) and then snip it off. Then, un-pucker the panel, and the threads will be buried inside the bag where they won't be visible.\nYou now have one juggling bag. Repeat as many times as desired.", "step_imgs": ["https://cdn.instructables.com/F8O/UL2T/G4PBSVXM/F8OUL2TG4PBSVXM.LARGE.jpg"], "step_title": "Step 10: Close Up the Bag"}], "channel": "No channel to show"}, {"category": "No category to show", "description": "While getting ready to work with some Shapecrete for our Cheng Concrete Build Night , I dug a plastic 1 gallon jug out of the recycle bin and started rinsing it out, the usual 3 fill and dumps to rinse thoroughly. While on the 2nd fill, it occurred to me that I'd need some additional measuring and mixing resources, too. As there's no better time than before you begin a project to collect all the resources you'll need to do it, and because, as we all know, one project almost always leads to another - I ended up making up a nice Craft Mixing & Measuring Kit that I think will come in handy for many things, and save my kitchen measuring and mixing tools from further demise.", "title": "DIY Craft Measuring & Mixing Kit", "url": "https://www.instructables.com/id/DIY-Craft-Measuring-Mixing-Kit/", "section": "craft", "steps": [{"step": 1, "steps_text": "You'll need:At least a 1 gallon plastic jugA couple or three plastic drinking cups (they come in handy for many things! See also InstaCool Cup and DIY Nightshade)Measuring CupsScissorsSharpie", "step_imgs": ["https://cdn.instructables.com/FNP/04L3/IDU2NPFV/FNP04L3IDU2NPFV.LARGE.jpg"], "step_title": "Step 1: Materials Needed"}, {"step": 2, "steps_text": "Fill and empty three times - at least that's the old rule of thumb I learned working at a photo lab right out of high school. It's stuck with me ever since and does seem to to do the trick.", "step_imgs": ["https://cdn.instructables.com/FTM/9CPK/IDU2NOXO/FTM9CPKIDU2NOXO.LARGE.jpg"], "step_title": "Step 2: Rinse Jug"}, {"step": 3, "steps_text": "Cut the jug up as high as possible near the handle.", "step_imgs": ["https://cdn.instructables.com/FOB/P8K5/IDU2NOQJ/FOBP8K5IDU2NOQJ.LARGE.jpg"], "step_title": "Step 3: Remove Top"}, {"step": 4, "steps_text": "Remove the label on the jug, keep the cap on the top and now you also have a scoop - or a urine collection device, whichever you need.  Hopefully you'll stick to a scoop for your craft needs.", "step_imgs": ["https://cdn.instructables.com/FDR/SOPD/IDU2NOQS/FDRSOPDIDU2NOQS.LARGE.jpg", "https://cdn.instructables.com/FSU/VRTR/IDU2NOR5/FSUVRTRIDU2NOR5.LARGE.jpg"], "step_title": "Step 4: Two Tools in One!"}, {"step": 5, "steps_text": "Now you can measure off your plastic tub, so you'll be able to properly mix whatever it is you're mixing - from sand to clay to concrete mix or paints and washes.Start by filling up your jug with water and then pour that into a big measuring cup to learn the actual volume of your container.  This one filled up to a bit over 8 cups.  So I poured out that extra bit, and poured exactly 8 cups into my container and marked the fill line with a Sharpie.", "step_imgs": ["https://cdn.instructables.com/FG3/MSQO/IDU2NOSD/FG3MSQOIDU2NOSD.LARGE.jpg", "https://cdn.instructables.com/FT8/VDU9/IDU2NOSE/FT8VDU9IDU2NOSE.LARGE.jpg"], "step_title": "Step 5: Find Volume of Container"}, {"step": 6, "steps_text": "I wanted my container marked in two cup measures, so I poured off two cups of water, and then marked accordingly.  You could also mark off by single cup measures, and increments of that, if so inclined. Use the flashlight if it's hard to see where the water level is.", "step_imgs": ["https://cdn.instructables.com/FKA/YULU/IDU2NOTL/FKAYULUIDU2NOTL.LARGE.jpg", "https://cdn.instructables.com/FUU/ORFM/IDU2NOUW/FUUORFMIDU2NOUW.LARGE.jpg", "https://cdn.instructables.com/FP6/L898/IDU2NOYU/FP6L898IDU2NOYU.LARGE.jpg"], "step_title": "Step 6: Measure Off As Desired"}, {"step": 7, "steps_text": "To make a smaller wet measuring cup, do the same thing with the small drinking cups: Fill, then empty by a half or quarter cup as desired, and mark accordingly.", "step_imgs": ["https://cdn.instructables.com/FIJ/6V4O/IDU2NPFM/FIJ6V4OIDU2NPFM.LARGE.jpg"], "step_title": "Step 7: Smaller Measuring Cups"}, {"step": 8, "steps_text": "Dry and wet measures are slightly different, and while sometimes it won't make any difference to your craft project, sometimes it may.  So I made a dry measuring cup by filling a standard kitchen measuring cup with sugar, dumping it into another cup and marking the fill line. Then I removed a half cup of sugar, and marked that line.", "step_imgs": ["https://cdn.instructables.com/FSC/ARQ4/IDU2NOYV/FSCARQ4IDU2NOYV.LARGE.jpg", "https://cdn.instructables.com/FLB/HNXR/IDU2NP02/FLBHNXRIDU2NP02.LARGE.jpg", "https://cdn.instructables.com/FLF/G1R0/IDU2NPFC/FLFG1R0IDU2NPFC.LARGE.jpg"], "step_title": "Step 8: Dry Measuring Cup"}, {"step": 9, "steps_text": "There you have it! A nice DIY Craft Measuring and Mixing Kit that you don't have to worry about ruining (because you can make a new one anytime!) and that's easy to use and clean.  I also cut down another plastic drinking cup for a small mixing container, for things like glue or paint.", "step_imgs": ["https://cdn.instructables.com/FQD/KXA5/IDU2NPH6/FQDKXA5IDU2NPH6.LARGE.jpg", "https://cdn.instructables.com/FTL/IL7Y/IDU2NPHC/FTLIL7YIDU2NPHC.LARGE.jpg"], "step_title": "Step 9: Craft Measuring Kit Collection"}, {"step": 10, "steps_text": "It's also all stores together nicely.  Add some wooden chopsticks for stirring sticks, stack it all up for easy storage or easy transport.  Even with the chopsticks, it all fits inside the container, too, with the scoop inverted over the top, easy peasy!Now go mix something up and make something cool!", "step_imgs": ["https://cdn.instructables.com/F1N/B5L2/IDU2NPHF/F1NB5L2IDU2NPHF.LARGE.jpg"], "step_title": "Step 10: Store and Go!"}], "channel": "No channel to show"}, {"category": "workshop", "description": "\u6211\u8a2d\u8a08\u4e86\u500b\u5716\u6a94\uff0c\u4f7f\u7528\u96f7\u5207\u4f86\u6a21\u64ec\u50f9\u96fb\u5b50\u548c\u9375\u7d50\uff0c\u76ee\u7684\u662f\u5e6b\u570b\u9ad8\u4e2d\u751f\u4ee5\u624b\u4f5c\u597d\u73a9\u65b9\u5f0f\u5165\u9580\u9031\u671f\u8868\uff0c\u4f7f\u7528\u5834\u5408\u662f2\u7bc0\u8ab2\uff0c\u52d5\u624b\u904e\u7a0b\u8acb\u53c3\u8003\u6240\u9644\u768450\u9918\u9801\u7c21\u5831\uff0c\u96f7\u5207\u6a94\u8acb\u53c3\u8003shape.ai\uff0c\u677f\u6750\u4f7f\u75285mm\uff0c\u6b61\u8fce\u4e0b\u8f09\u5229\u7528\u548c\u56de\u5831\u7f3a\u5931^^", "title": "Periodical Table With Laser Cut", "url": "https://www.instructables.com/id/Periodical-Table-With-Laser-Cut/", "section": "workshop", "steps": [{"step": 1, "steps_text": "\u7c21\u5831\u670950\u4f86\u9801\uff0c\u9019\u88cf\u662f\u5e7e\u5f35\u7bc4\u4f8b\uff0c\u795d\u597d\u904b\uff01", "step_imgs": ["https://cdn.instructables.com/F9F/8PLR/JAYJ5Z5N/F9F8PLRJAYJ5Z5N.LARGE.jpg", "https://cdn.instructables.com/F7A/BCI7/JAYJ5Z5P/F7ABCI7JAYJ5Z5P.LARGE.jpg"], "step_title": "Step 1: Samples"}], "channel": "Laser Cutting"}, {"category": "workshop", "description": " In this Instructable, you will learn how to calibrate a steel, retractable tape measure.  This may sound unnecessary or even silly.  However, damage from dropping the tape measure or long use will make measurements inaccurate.  Successful calibration will return the tape measure to accuracy.If the tape measure is still accurate, only the initial tests (Step 2 and Step 3) will be needed.  If the tape passes the test, you can skip to the end knowing your tape measure is accurate.  Proceed with your fun projects with confidence in accurate measurements. The hook on the end of the tape measure is made with a small amount of travel at the attaching rivets.  As they say, this is not a problem, it is a feature.  The travel is to compensate for the thickness of the hook when measurements are made with the hook pushed against inside surfaces or when hooked on the edge for outside measurements.  When the hook travel is the same as the hook thickness, the inside and outside measurements will both be accurate. Without proper calibration, a tape measure used for inside measurement and then used to measure and mark material for cutting will result in shorter or longer material than expected.  ", "title": "Steel Measuring Tape Calibration", "url": "https://www.instructables.com/id/Steel-Measuring-Tape-Calibration/", "section": "workshop", "steps": [{"step": 1, "steps_text": "The retractable steel tape measure you want to calibrate.  This may be a new tape measure you want to check for accuracy or an old, well used tape measure you suspect is not accurate.A straight measuring ruler.  This should be a trusted ruler with fine, engraved lines for markings.  A framing square or tri-square would be good. Increments of 1/16 inch or better is needed.  A printed, promotional yard stick is not a good choice,  since it will have wide marking lines.Two pair of pliers.  These can be basic slip joint pliers, needle nose pliers or locking type pliers.  They do not need to be identical types.", "step_imgs": [], "step_title": "Step 1: Tools Needed:"}, {"step": 2, "steps_text": "A moderate amount of patience.", "step_imgs": [], "step_title": "Step 2: Supplies Needed:"}, {"step": 3, "steps_text": "Carefully examine the hook end of the tape measure.  Do you need to clean dirt and gunk?  Is the tape cracked at the rivets attaching the hook? If the tape is damaged, calibration may not improve accuracy and the useful life of the tape may be over.", "step_imgs": ["https://cdn.instructables.com/F7T/ZFEE/J6MGAQUO/F7TZFEEJ6MGAQUO.LARGE.jpg"], "step_title": "Step 3: Examine for Damage"}, {"step": 4, "steps_text": "Check the tape accuracy with inside measurement.  Press the outside against a surface while the ruler is also pushed against the same surface.  Observe the difference between the 1 inch mark for the tape measure and the ruler.  If the 1 inch marks are aligned, the tape is accurate for inside measurements.If the 1 inch marks are not perfectly aligned, write down the TAPE measurement at the 1 inch mark of the ruler.  Mark this measurement with INSIDE.", "step_imgs": ["https://cdn.instructables.com/FOA/1IOS/J6WG9CAA/FOA1IOSJ6WG9CAA.LARGE.jpg"], "step_title": "Step 4: Check Inside Measurement Accuracy"}, {"step": 5, "steps_text": "Next place the hook of the tape measure over the end of the ruler.  Carefully position the hook so the end of the tape hook is extended the maximum distance from the tape.  Observe the difference between the 1 inch mark of the tape measure and the 1 inch mark of the ruler.If the marks are perfectly aligned, the tape measure is accurate for outside measurements.  If there is a difference, write down the TAPE measurement at the 1 inch mark of the ruler.  Mark this measurement with OUTSIDE.If both inside and outside accuracy checks are aligned with the ruler, then the tape measure hook does not need adjustment.  Your tape measure is accurate and can be used with confidence!  Skip down to Step 13 for Bonus Tips.", "step_imgs": ["https://cdn.instructables.com/F3I/YE26/J6MGAR0O/F3IYE26J6MGAR0O.LARGE.jpg"], "step_title": "Step 5: Check Outside Measurement Accuracy"}, {"step": 6, "steps_text": "Gather your notes from your initial checks for inside and outside accuracy.  Remember these measurements were read on the TAPE at the 1 inch mark of the ruler.  INSIDE CHECK  If the tape measurement is GREATER THAN the ruler on inside check, then the tape hook is too long and must be bent toward the tape.  If the tape measurement is LESS THAN the ruler on inside check, the tape hook is too short and the hook must be bent out from the tape.  The amount of the measurement difference from 1 inch is the amount the hook need to bend. OUTSIDE CHECK  If the tape measurement is GREATER THAN the ruler on outside check, the tape hook is too short and needs to be bent toward the tape.  If the tape measurement is LESS THAN the ruler on the outside check, the tape hook is too short and must be bent out from the tape. The measurement difference form 1 inch on the ruler is the amount the hook tab needs to be bent.    If the inside check and outside checks indicate opposite tab adjustments, you will not be able to calibrate the tape measure.  If you have any doubts about your initial inside and outside checks, repeat the process.", "step_imgs": [], "step_title": "Step 6: Determine How to Adjust the Hook"}, {"step": 7, "steps_text": "Grip the tape hook at the rivet area with one of the pliers.  The locking pliers worked well here if you have them.  Grip the hook tab with the second pliers.  Be careful to hold the rivet end stationary and only bend the hook tab.  Do not damage the end of the flexible tape.  Make very small adjustments and then retest for accuracy as noted in the steps below.  If you fear you may damage the marks on the tape, wrap a couple turns of electrical tape around the tape measure to protect the marks. ", "step_imgs": ["https://cdn.instructables.com/FI4/IVAL/J6MGAQZD/FI4IVALJ6MGAQZD.LARGE.jpg"], "step_title": "Step 7: Adjusting the Hook"}, {"step": 8, "steps_text": "Repeat Step 4 to confirm you have adjusted the hook tab as needed for inside measurements.", "step_imgs": [], "step_title": "Step 8: Repeat Inside Accuracy Check"}, {"step": 9, "steps_text": "Repeat Step 5 to confirm you have adjusted the hook tab as needed for outside measurement accuracy.", "step_imgs": [], "step_title": "Step 9: Repeat Outside Accuracy Check"}, {"step": 10, "steps_text": "If you have not adjusted the hook correctly to pass the latest accuracy check, repeat Step 7 again.  Try to make very small adjustments to the hook tab.", "step_imgs": [], "step_title": "Step 10: Adjust the Hook Again If Needed"}, {"step": 11, "steps_text": "Repeat Step 4 to confirm you have adjusted the hook tab as needed for accuracy.", "step_imgs": [], "step_title": "Step 11: Check Inside Accuracy Again"}, {"step": 12, "steps_text": "Repeat Step 5 again to confirm you have adjusted the hook tab as needed.If the inside and outside tests are both correct, you have completed the calibration process!  You can now make measurements with assurance you will have accuracy on both inside and outside measurements.If repeated adjustments cannot make the tape accurate for both inside and outside measurement, the tape may be beyond calibration.  You may decide you want to keep it have projects with 'good enough' measurements. If you decide this, mark the tape with a permanent marker.Consider buying a new tape for the high quality work you do.Industry Note: If you worked in a factory with a Quality Assurance group. they would require this test and calibration periodically as part of the plant quality program.  The idea is that quality work is only done with accurate tools.", "step_imgs": [], "step_title": "Step 12: Recheck Outside Accuracy"}, {"step": 13, "steps_text": "You can use a retractable tape measure to measure inside closed spaces like a closet shelf.  Most tape measures have the case length marked ( may be 2 to 3 1/2 inches).  Place the hook end at one side of the inside space to be measured and push the case against the other side of the opening.  Read the distance on the tape at the opening of the case.  Then ADD the case length to the first measurement.  Be careful to add the fractions correctly.  ", "step_imgs": ["https://cdn.instructables.com/FVH/FLY5/J6MGAR41/FVHFLY5J6MGAR41.LARGE.jpg"], "step_title": "Step 13: Bonus Tip 1 - Measure Inside Spaces"}, {"step": 14, "steps_text": "Clean the tape measure with water, mild soap and a cloth.  Do not submerge the tape in water - it may rust on the inside.  Wet the cloth with soapy water and rub the cloth on the tape for cleaning.  A clean tape is easier to read, has less friction and will last longer.", "step_imgs": [], "step_title": "Step 14: Bonus Tip 2 - Clean Your Tape"}, {"step": 15, "steps_text": "Avoid letting the hook end retract into the case too quickly.  the impact of the hook on the case can loosen the rivets or break off the hook.  Better tapes have a cushion on the hook stop to reduce this damage.", "step_imgs": [], "step_title": "Step 15: Bonus Tip 3 - Don't Let the Hook Slam Into the Case"}, {"step": 16, "steps_text": "Some tapes have special markings every 16 inches.  These marks can be used when laying out carpentry framing for wall stud spacing.  Standard wood frame wall studs are spaced every 16 inches.Disclaimer:  These are my suggestions only.  I am not responsible for any injury, material or property damage or other undesirable results. ", "step_imgs": ["https://cdn.instructables.com/F66/8DHK/J6MGAQY1/F668DHKJ6MGAQY1.LARGE.jpg"], "step_title": "Step 16: Bonus Tip 4 - Using the Stud Markings"}], "channel": "Tools"}, {"category": "workshop", "description": "Using a Large Piece of Thick (Industrial Like) Card, by cutting measured slits and holes to slot into. Please see instructions for further explaination.", "title": "Simple to Make, Fold-Up Tray Table", "url": "https://www.instructables.com/id/Simple-to-make,-Fold-Up-Tray-Table/", "section": "workshop", "steps": [{"step": 1, "steps_text": "For the card, I used some thick plastic type industrial printing card, foam board would work simularly but make sure you dont cut all the way through for the folds, it maybe more difficult with this foam type material.\rGet your piece of card and work out how big you want the top part of your table, the bigger the piece of card, the bigger you can have your top surface without having tiny sides (legs).\rOnce you have worked out how big you want your top surface, measure your card's total length and minus the top surface length. Divide the left over amount by four, (this is for your sides/legs).\rWith this amount, depending on your measurements, make the first cut (inside leg) slightly longer than the outside (2nd) leg, approximately between 1-2cm's depending on what your measurements are. \rFor example: I had card which was 125cm long, I wanted a top surface of 30cm, which meant my sides were 24.5cm-inside, 1st cut, and 23cm-outside, 2nd leg.\rThen measure this out for each end and mark it on your card with the pencil. ", "step_imgs": ["https://cdn.instructables.com/FMJ/KD6W/F3ER7W65/FMJKD6WF3ER7W65.LARGE.jpg"], "step_title": "Step 1: Materials and First Step"}, {"step": 2, "steps_text": "Make the fold cuts on your pencil lines (using a metal ruler and stanley knife) but DONT cut all the way through the card board. Ideally your material will be thick enough to have two outside layers and some substance inbetween the two, if this is the case, just cut through the external layer not both.\rYou want to make the fold cuts first and check your measurements line up before making the last of the cuts to make the holder section. \rAfter you do so, make some measurements on the ends of each side of your card to put the table together. I recommend three is probably enough but more will add more stability. My card was approximatley 35cm wide and I made 3 tabs measuring 5cm's each spaced apart. You want to cut these about 1cm in, but again this will depend on the thickness of your card.\rOnce you have made your tabs, measure out your inserts on the top level piece of card in the middle. Appromixatley 0.5cm wide (again dependant on your card). You dont want to make this too big, if anything make it slightly smaller. I also folded my card up to check my measurements before cutting them. \rYou want to make sure also that the outside tabs are at least 1cm away from the outside edges as if this splits it will make it very wobbly!\rAfter all your cuts are mad, simply fold it up and your away. Pretty handy for if your in bed or on the couch with your laptop for example. Hope you enjoy my simple idea!", "step_imgs": ["https://cdn.instructables.com/F29/PYNN/F3ER7W6N/F29PYNNF3ER7W6N.LARGE.jpg", "https://cdn.instructables.com/F18/9E7L/F3ER7W6I/F189E7LF3ER7W6I.LARGE.jpg", "https://cdn.instructables.com/F9S/2CUI/F3ER7W6Q/F9S2CUIF3ER7W6Q.LARGE.jpg", "https://cdn.instructables.com/F2Z/6LHM/F3ER7W6R/F2Z6LHMF3ER7W6R.LARGE.jpg"], "step_title": "Step 2: Make Your Fold Cuts and Fold It Up!"}], "channel": "Furniture"}, {"category": "workshop", "description": "Many of us DIYers we see something on a blog, a post, or a commercial site that we would like to try or make our own version of it, but there are no plans, measurements, or size given on the site. This Instructable is intended to give you some ideas of how to recreate the sizes and measurements from the images you find to create projects you find online and hope it will help you recreate them and improve them in your own way.  ", "title": "Recreating Size and Measurements From Images", "url": "https://www.instructables.com/id/Recreating-Size-and-Measurments-From-Images/", "section": "workshop", "steps": [{"step": 1, "steps_text": "You find yourself browsing the internet and looking at all the cool things other people have made, things for sale but you want to make improvements in, or you just want to try you hand at building it yourself.  You go to their website and look closely at their images and find lots of descriptions about what it is and how they use it but nothing about how it was made, and no patterns.  So you start thinking, \"I want to make one like that but I would really like a plan or some measurements to start from.\"  There are some amazingly smart people who can take a look at something and will just build it hit or miss on the sizes and everything just works out.  But if you are like me and don't have the instantaneous knack of mentally reproducing unseen measurements in your head, or don't have the resources to be able to build hit or miss this will help get a basic guide on how to reproduce some of the measurements and get a basic plan together.  I found a portable wooden Viking house on this SCA site and this ancient Chinese crossbow action I wanted to reproduce for my own projects.  So I will show you some examples of how to use a few techniques to get measurements from an image.  ", "step_imgs": ["https://cdn.instructables.com/FIR/CT47/I9FGRMDZ/FIRCT47I9FGRMDZ.LARGE.jpg", "https://cdn.instructables.com/FGS/JF9I/I9FGRMF0/FGSJF9II9FGRMF0.LARGE.jpg"], "step_title": "Step 1: Find Something You Want to Recreate"}, {"step": 2, "steps_text": "When I found the viking style tent/cabin on the SCA site I was looking at what I could see about how it was constructed.  First, I was thinking it was made of 2\" x 4\"s which are really only about 1 1/2\" x 3 1/2\".  2\" x 4\"s are common, easy to get, so it made sense initially.   They are also a known size which we can use to figure out the design.  I counted how many boards there were on the visible side, luckily they alternate long and short so I don't have to try and find each board gap in the photo and hope I don't miss one or double count. There were 40 boards on a side.  I then calculated using the actual size of 2\" x 4\"s (1.5\" x 3.5\").  So 40 boards at 3 1/2\" wide would make one side about 11.67 feet long.  ((40 * 3.5\")/12) = 11.66667 feetThis seemed much longer than what is seemed in the photo.  Now due to the angle of the photo it could have foreshortened the length of the side and it could be that long, but something just wasn't fitting to my eye.  I then took the average weight of a 2\" x 4\" at 1.28 lbs. per linear foot, and calculated what the one visible side would weigh.  (40 * (8' * 1.28 lbs)) = 409.6 poundsSo the total weight of just one side of this portable cabin tent is about 409.6 lbs.   The real weight would be a bit less than that since half the boards are cut down about 1 foot.  And that is without any connecting boards or screws added in.  Trying to wrangle just one side is quite the task for a portable structure.  I then ran the numbers for using 2\" x 3\"s (1.5\" x 2.5\").  ((40 * 2.5\")/12) = 8.3334 feet  (40 * (8' * .94 lbs)) = 300.8 pounds  The length seems to match the size of the side better to my eye, but the weight is still a bit much for a portable structure.  So start looking closer at the photo.  I noticed the end of one of the connecting boards is visible on the underside of the far wall.  The thickness of this board seems much thinner than what I would think of for either a 2\" x 4 or 2\" x 3\", but the 3\" dimensional lumber size works out better in the calculation for the length.  So I revisit the 3\" size and work out the measurements using 1\" x 3\" boards.  ((40 * 2.5\")/12) = 8.3334 feet -- same as the 2\" x 3\" length which looks right.  (40 * (8' * .47 lbs)) = 150.4 pounds This gets us down to a workable approximate weight, but we can figure this out to a closer weight.  Since half the boards look like they are cut down to about 7' and the construction uses 2 boards to connect a side we change our calculation to (22 * (8' * .47 lbs)) + (20 *(7 * .47 lbs)) = 148.52 lbs.  This seems very reasonable for what I am seeing and what it is reported to be used for.  Now that we have an idea of what type of board was used we can start designing.  ", "step_imgs": ["https://cdn.instructables.com/FYB/L0Y4/I9FGRMF3/FYBL0Y4I9FGRMF3.LARGE.jpg"], "step_title": "Step 2: Using What You Know"}, {"step": 3, "steps_text": "We have the basic building board size to work with and some idea of how it looks like it is put together lets make a rough design and see if this all pans out in the design.  You can use simple pencil and ruler, even a program as basic as PowerPoint or Word can give you a rough idea of what it might look like, but you will have to work in scale.  Scale - For those who don't know scale is a calculated size change that allows you to draw and design on regular sized paper and draw large things like a house.  A typical size scale for drawing houses would be .25\" = 1'.  Which means for every quarter inch on the paper will equal 1 foot in real life.  Design software lets you draw the object on the screen with the real sizes you want showing as you draw it.  The scale is taken care of when it is printed based on the size of the paper and size of design.  Inside the computer it doesn't matter much since you can zoom in and out, but moving it to real life needs a set scale to keep everything the same when comparing them on paper.  If you are lucky enough to have design software that will give you a vectored pattern at size then even the better because it takes care of the scale for you.  3D design is even better because you can build the entire thing in virtual then rotate it move it around and see if it looks like the sizes in the picture.   Turn the angle so the design matches the angles in the photo and see if what you made matches what you seen in the photo.  The roof design is very easy.  I can see there are alternating long and short boards connected together with two boards running perpendicular to the rest.  So 42 rectangles with a width of 2.5 inches and lengths from 7 feet to 8 feet, alternating lengths, aligned on the bottom and two of those perpendicular to the others holding them all together.  Make two, rotate to face each other and the tops should weave together.  All you need now is something to hold the bottoms from sliding apart and it all falls down on you.  So we need some ends to help stabilize the two sides.  The ends are a bit more difficult.  I can't see the entire end piece where the door goes, and the edges of the boards are not easily seen, due to the angle, the wood grain, the image quality and size.  So my first guess is going to be: What is the full width of the end?  The end appears to be at the very least an isosceles triangle, having two side the same length due to how they are constructed.  It is even more likely an equilateral triangle to keep things strong and the measurements the same.  I design an end with a 7 foot bottom board and two 8 foot boards crossed at 7 foot and just touching the ends of the bottom board to so the relationship of construction.  I then start putting in the other boards to fill these end triangle pieces to see what is the best way to fill the space and to see how to add the door which I guessed to be about 20\" wide by 40\" tall.  I found that when I use a center seam pattern I end up not having to rip cut two boards to fit the door way.  If I use a center board pattern the door the boards need to be rip cut to fit the size.  The nearest board in the photo near the door looks to be full width as does the nearest board in the door.  So it doesn't appear any rip cuts were used in the original.  It is hard to see in the original photo if this is true at the center of the end wall due to the lack of detail in the photo and it being obscured by the roof line.  The build is much easier by not using the center gap than the center board layout on the end.  Fewer boards are used so the cost and work is reduced.  The rear end uses the same pattern, same board cuts, and no door cuts.  The edge boards cannot be seen in the photo, so their placement and use are part of my experience of how to build it to hold it all together solidly.  They appear on the outside in my design only to see where they go to recreate the cabin seen in the original photo.  What I would change from the original photo:  Use 3 boards on the roof pieces rather than the 2 seen.  I would use one at the top of each just under the ends of the 7 foot boards (and likely on the outside), one across the bottoms (on the inside), then one across the center (inside).  I have my basic plan based on what I knew about board size and applied that to reconstructing the original design, which I then thought of some ways I would build it better for me.  I'm not saying my way is right but how I would build it for me.  ", "step_imgs": ["https://cdn.instructables.com/F1Y/OOQL/I96WDZUU/F1YOOQLI96WDZUU.LARGE.jpg", "https://cdn.instructables.com/FN5/TGQF/I99R7LQC/FN5TGQFI99R7LQC.LARGE.jpg", "https://cdn.instructables.com/FGB/R5RZ/I99R7Q77/FGBR5RZI99R7Q77.LARGE.jpg", "https://cdn.instructables.com/FXJ/JWVF/I99R7Q8V/FXJJWVFI99R7Q8V.LARGE.jpg", "https://cdn.instructables.com/F7F/EYAG/I99R7QYB/F7FEYAGI99R7QYB.LARGE.jpg"], "step_title": "Step 3: Rough Out Your Design"}, {"step": 4, "steps_text": "Many of you would be willing to just start building with the design I have put together so far.  I myself would be willing to start the build and try it out at this point.  But maybe you are building for someone else or trying to sell your design and they may need a little more.  So lets give them something more to look at.  This is a small design and I am uses to working at scale and some experience in making 3D designs.  I used a small free online 3D design page called TinkerCAD.  Tinker works well for small items for 3D printing, so I need to work at scale for this project to get a feel that the ideas I came up with in the prior step works out.  First build your pieces:  - boards with a 1\" x 3\" profile, a real profile of .75\" x 2.5\" in lengths of 8 foot and 7 foot.  Start moving the pieces in place with a 7 foot base board, and start placing alternating 8 foot and 7 foot boards angled at 60 degrees on opposing sides adding more as you move back inline as the side would go.  The 8 foot boards should cross at the top at the 7 foot line, and the 7 foot boards butting up to the 8 foot boards crossing over them.  Add the end boards using the center seam pattern moving out from the center until the end is filled in.  Each board will need to be trimmed down to match the inside angle of the roof boards.  Once the end is filled use a hole shape to cut the door from the end.  Build the door group the board elements so they move as one object and place the door in the opening.  The size and pattern looked enough like the original that I believe the board size is correct.  In this example I used known sizes of what could be seen in the photo to recreate the design. Next, I will show you how to calculate dimensions from a photo.  ", "step_imgs": ["https://cdn.instructables.com/FYB/0YJZ/I99R801F/FYB0YJZI99R801F.LARGE.jpg", "https://cdn.instructables.com/FNV/88MF/I99R801E/FNV88MFI99R801E.LARGE.jpg", "https://cdn.instructables.com/FE4/HSSO/I99R801C/FE4HSSOI99R801C.LARGE.jpg", "https://cdn.instructables.com/FMF/8PBQ/I99R8017/FMF8PBQI99R8017.LARGE.jpg", "https://cdn.instructables.com/F7R/7TH9/I99R8019/F7R7TH9I99R8019.LARGE.jpg", "https://cdn.instructables.com/FK5/H0KZ/I99R81FD/FK5H0KZI99R81FD.LARGE.jpg"], "step_title": "Step 4: Try the Design"}, {"step": 5, "steps_text": "In this example I will be showing how to calculate sizes from a photo with unknown dimensions from an ancient Chinese crossbow trigger system discussed on a blog.  Calculating measurements from an unknown takes a little work and some basic mathematics.   First print or display the image you want to work with, and get out your ruler.  Clear plastic rulers are very useful since you can see what is under it.  Printed images are sometimes easier to work with as you can write on them, and set up dimension lines and angles from points to measure from.  If you are displaying it electronically you need to make sure you do not change the size or zoom of the image until your are done.  Changing the display size will change the scaling factor used.  Smaller items that can be printed bigger than what you think they are, will have better accuracy as you scale them down than large items that are being measured with a small ruler and scaled up.  This means that a scaled up image measured to the 1/16\" and that measurement is multiplied by 0.5 to get the real size which will give a measurement to the 1/32\".  Images that are scaled down that are measured to the 1/32\" but needs to be scaled up to a foot or more will have a large variance of where that measurement actually falls.  An error of 1/32\" when measured can result in the real world object being off by a foot or more.  If nothing on the image or in the description of the image gives a measurement or scale of any part of what is pictured you need to make your best estimate of what you think some part might be.  Pick some feature of the image and estimate what the real size would be.  I am picking the rear pin through the trigger to determine the scale factor.  I displayed the image so the head of this pin is 0.75\" displayed, and estimate the head to be 0.375\" in real life, and the pin to be 0.25\".  Using these sizes the ratio to figure out the rest of the dimensions will be 0.5.  So each measurement will be scaled by 0.5 for the real world size.  I set up a spread sheet to keep track of the measurements and automatically do the calculations to real world sizes. Each measurement added to the spreadsheet will be scaled by multiplying the measurement by 0.5.   Start measuring the different parts of each part and their relation to each other.  In this image there are two pins that hold all the parts in a mount so the measure between those two points helps place the parts in relation to each other.  The only problem with this image is there are no images of the top of the trigger system.  Make good descriptions of what is being measured and what that measurement is.  Use the scaling ratio to convert them to real world sizes.  Now that you have the measurements in a spread sheet it becomes easier to recalculate the scale ratio if you find a note that gives a size of the real item all the scaled sizes can be changed quickly either up or down.  If you are using metric it is even easier to convert the sizes.  ", "step_imgs": ["https://cdn.instructables.com/FE4/4VGJ/I99R853A/FE44VGJI99R853A.LARGE.jpg", "https://cdn.instructables.com/FFG/LB4X/I99R88IG/FFGLB4XI99R88IG.LARGE.jpg", "https://cdn.instructables.com/FM0/FFPR/I99R88KK/FM0FFPRI99R88KK.LARGE.jpg", "https://cdn.instructables.com/FDQ/TNBY/I99R88KP/FDQTNBYI99R88KP.LARGE.jpg", "https://cdn.instructables.com/FQ5/CIYR/I99R88KX/FQ5CIYRI99R88KX.LARGE.jpg", "https://cdn.instructables.com/FMT/03JJ/I99R88EQ/FMT03JJI99R88EQ.LARGE.jpg"], "step_title": "Step 5: Calculate Dimensions From Unknown Size"}, {"step": 6, "steps_text": "Again using TinkerCAD I build the trigger system as best as I can from what is seen in the image and my measurements.  The interior is another place I had to estimate the sizes, but from my measurements the basic pattern can be made fairly quickly from the side.  When it came to working on the interior I started with estimating what the width of the bolt or arrow to be used.  Estimating a bolt shaft size of between 0.25\" dia. and 0.375\" dia. and using 0.25\" for the two sides of the string catch I estimated the string block to be 0.875\" wide, thus needing the small pin to be at least that long.  I decide to put 0.25\" of material on either side of the string block since it is likely the widest moving piece used in this trigger system.  From this I can estimate the trigger pin and falling block pin would need to be at least 1.375\" long shaft and having a larger head.  The falling block and trigger would be about the same width as the space estimated for the bolt (arrow), between 0.25\" dia. and 0.375\" dia.  Now I have a roughed out basic idea of the shapes and sizes of this ancient Chinese crossbow trigger.  I can now work with the layout and final shaping of the parts and see that they all work together.  ", "step_imgs": ["https://cdn.instructables.com/FMD/TFYW/I9B6FP0U/FMDTFYWI9B6FP0U.LARGE.jpg", "https://cdn.instructables.com/FYI/S6RD/I9B6FP0V/FYIS6RDI9B6FP0V.LARGE.jpg", "https://cdn.instructables.com/F8S/9MVQ/I9B6FP0Y/F8S9MVQI9B6FP0Y.LARGE.jpg", "https://cdn.instructables.com/FG7/O3VJ/I9B6FP0Z/FG7O3VJI9B6FP0Z.LARGE.jpg"], "step_title": "Step 6: Use the Measurements"}, {"step": 7, "steps_text": "Now I have two layouts and plans for some interesting and fun projects to make myself.  The first coming from applying known sizes of objects in the image, such as dimensional lumber, to figure out the overall size and build of the project shown.  After figuring out which lumber was most likely used to create it and a little evaluation of my initial thoughts to get to the final idea and making a pattern.  The second from choosing a size to assign a part in the image and converting all the measurements taken from the image by the ratio between the assign size and the measurement taken of that same part.  After that it is just measuring and converting those measurements to what may be the real life sizes.  All of this gets very easy with some design programs that allow you in import the images and trace the shapes as separate objects, discard the rest, and resize it all until it gets to the size you want.  You can even check that everything works together well through the movement of the pieces together.  This works very well with smaller objects since less detail is lost in images.  All that from a couple images found online that had no measurements associated with them, no size references in their descriptions, and no plans to build from.  I hope this ible helps those who are just learning and those who have work with their hands for years and are looking for any good tips to help make their builds easier.  Thanks. ", "step_imgs": [], "step_title": "Step 7: Final Thoughts"}], "channel": "Tools"}, {"category": "workshop", "description": "What Is A Dial Caliper?A dial caliper is a tool that is used to measure different aspects of an object. The tool is very common for measuring the objects precision and accuracy. The 4 aspects of measurement include:1. Outside Diameter or Object Thickness2. Inside Diameter or Space Width3. Step Distance4. Hole Depth", "title": "How to Use a Dial Caliper?", "url": "https://www.instructables.com/id/How-to-Use-a-Dial-Caliper/", "section": "workshop", "steps": [{"step": 1, "steps_text": "There are many parts that need to known about before the user will be able to use the dial caliper. The parts are:External Measurement Claws: These claws are on the bottom of the dial caliper and are the longest of the claws. They measure external lengths and diameters. Internal Measurement Claws: These claws are on the top of the dial caliper and are the shortest pair of claws between the 2 pairs of claws. They measure internal lengths and diameters.  Dial: The shows the measurement of the object being measured in the current position. It has a needle or pointer that shows the measurement. Dial Lock: The dial lock is a nut that tightens and loosens the precision reading on the dial. Scale (Blade): This shows the different measurements that are used to show the length of the object being measured. Slider: The part that looks like it used to be on a watch is the slider. It slides and adjusts the separation between the blades and changes the precision readings on the dial. Beam: This stabilizes the depth rod and scale. Depth Rod: It's used to show the depth measurements of the object. Lock Screw: The screw above the dial tightens and loosens the mobility of the slider.  Reference Edge: This indicates the measurement value of the current object. Clamp Screw: The screw beside the dial lock is used to help improve the grip of the tool.", "step_imgs": ["https://cdn.instructables.com/FJM/EJLV/JS5C6IB4/FJMEJLVJS5C6IB4.LARGE.jpg"], "step_title": "Step 1: Dial Caliper Parts"}, {"step": 2, "steps_text": "Before you begin measuring, it is important to zero your dial caliper. To do this, you need to:Loosen the dial lock  Rotate the dial so the pointer points to 0  Tighten the dial lockAfter doing this, you are ready to begin measuring.", "step_imgs": ["https://cdn.instructables.com/FMC/617U/JS5C6M3C/FMC617UJS5C6M3C.LARGE.jpg"], "step_title": "Step 2: Zeroing the Caliper"}, {"step": 3, "steps_text": "Next, make sure the slider is free to move. To do this, you need to loosen the lock screw and move the slider freely.", "step_imgs": ["https://cdn.instructables.com/FB2/PUWA/JS5C6MCP/FB2PUWAJS5C6MCP.LARGE.jpg"], "step_title": "Step 3: Loosen the Dial Caliper"}, {"step": 4, "steps_text": "To do this, the external measurement claws will be used. To do this, you have to:Slide the slider until the external measurement claws are aligned with the object being measured (as seen in picture above) Read the measurement (see Step_ for how to do so) Record the Measurement", "step_imgs": ["https://cdn.instructables.com/FT0/VEUV/JS5C6MX4/FT0VEUVJS5C6MX4.LARGE.jpg"], "step_title": "Step 4: Measuring Outside Lengths"}, {"step": 5, "steps_text": "To do this, you will need to use the internal measurement claws. You will need to:Slide the slider until the internal measurement claws are aligned with the object being measured (as seen in picture above) Read the measurement (see Step_ for how to do so) Record the Measurement", "step_imgs": ["https://cdn.instructables.com/FPJ/QS0W/JS5C6N2M/FPJQS0WJS5C6N2M.LARGE.jpg"], "step_title": "Step 5: Measuring Inside Lengths"}, {"step": 6, "steps_text": "To do this, you will need use the stepped length faces, which is shown in the above picture. You will need to:Align the faces to the stepped object so the face closest to the dial is on top and the other face is on the bottom surface or to the endpoint of measurement.Read the measurement that is shown (See Step_ for how to do so)Record the measurement", "step_imgs": ["https://cdn.instructables.com/FVH/HLJE/JS5C6NWQ/FVHHLJEJS5C6NWQ.LARGE.jpg"], "step_title": "Step 6: Measuring Stepped Lengths"}, {"step": 7, "steps_text": "To measure the depth of a hole or empty space, the depth faces will be used, which is shown in the picture above. You will need to:Place the blade face on the surface that is next to the hole. Expand the precision reading by moving the slider. Do this until the depth rod touches the bottom of the hole. Read the measurement (See steps_ for how to do this)Record the measurement", "step_imgs": ["https://cdn.instructables.com/F96/LEGF/JS5C6OFG/F96LEGFJS5C6OFG.LARGE.jpg"], "step_title": "Step 7: Measuring Hole Depth"}, {"step": 8, "steps_text": "The measurements that will be featured will appear on the scale and the dial for a precision reading. When reading the dial caliper for measurements, the reference edge will be lined up with or be in between numbers. The pointer will be at a fixed position aligned with or between lines that indicate numbers (like on a ruler). From the measurements, the addition of each part will give you an ideal precision reading.", "step_imgs": ["https://cdn.instructables.com/F59/Z051/JS5C6PE1/F59Z051JS5C6PE1.LARGE.jpg"], "step_title": "Step 8: Comprehending the Measurements "}, {"step": 9, "steps_text": "Along the scale, there are numbers that will indicate the measurement. The larger numbers on the scale are meant to be in the ones place (1). The smaller numbers between the large numbers are meant to be in the tenths place (0.1). Depending on where the reference edge is on the scale, you will record the numbers that are indicated by the reference edge.", "step_imgs": ["https://cdn.instructables.com/F8Q/L57U/JS5C6QST/F8QL57UJS5C6QST.LARGE.jpg"], "step_title": "Step 9: Reading the Reference Edge"}, {"step": 10, "steps_text": "The numbers on the dial will be placed in the hundredths place (0.01) and on from there (thousandths, ten-thousandths, etc.). Where the pointer is along the dial is where the user should record the precision reading. ", "step_imgs": ["https://cdn.instructables.com/FVZ/P0GF/JS5C6QT7/FVZP0GFJS5C6QT7.LARGE.jpg"], "step_title": "Step 10: Reading the Dial "}, {"step": 11, "steps_text": "After recording all the parts of the full measurement, add them together for the ideal end measurement.", "step_imgs": [], "step_title": "Step 11: Adding It All Together"}, {"step": 12, "steps_text": "Not Zeroing the Dial: People commonly forget to zero the dial before measuring the object that is to be measured. Not zeroing the dial causes the data to be incorrect.Adding the Number Incorrectly: By doing this, the data collected will be incorrect.Using the Wrong Units: Many dial calipers have a standard unit (usually inches) and a metric unit (usually millimeters). It can be easy to mix up the units when measuring an object. This corrupts the data.Not Locking the Slider: By doing this, the measurement can be easily altered, therefore corrupting the measurements.", "step_imgs": [], "step_title": "Step 12: Common Mistakes"}, {"step": 13, "steps_text": "In conclusion, the dial caliper is a very useful tool for measuring accuracy and precision. Once you learn how to use the tool, it is pretty simple to use. Engineers use this tool very often for many different projects and building opportunities. The outside, inside, stepped, and hold distances will be easily accessible through the use of this tool. Even though it may look like a weapon at first, the object is a very useful tool.", "step_imgs": [], "step_title": "Step 13: Conclusion"}], "channel": "Tools"}, {"category": "workshop", "description": "The idea behind this instructable is to safely store micrometers and access them from a single box. Space saving is crucial for my workshop and even a box less makes a big difference.They used to lay around in the workshop in plastic containers banging one another, so a wooden box was a necessity.I own two Moore & Wright micrometers and a tiny unbranded one, so the box will be made to fit the two big ones. One is a metric and the other imperial. They are both high accuracy/precision tools and they deserve all the attention and care they  can get.This box can be modified to suit ones needs, to fit one, three, or even more micrometers and other tools. For the construction, i used a length of flooring plywood which had a nice grain finish. All the pieces of this box were cut from a single piece.I chose to use just wood, without any lining because i have no moisture issues in my workshop. All the tools are periodically lubricated with the appropriate oil and all preserved in a well heated, worm, moisture free environment.Sometimes, a lining can be a blessing or a curse. Lining can have the moisture off and on the tool, if you get my point.", "title": "MICROMETER TOOL BOX", "url": "https://www.instructables.com/id/MICROMETER-TOOL-BOX/", "section": "workshop", "steps": [{"step": 1, "steps_text": "You just need basic tools. A miter saw can be very helpful, but a band saw or even a hand saw would do. Other than that, wood glue, two hinges and some small wood screws are the only things you will need. ", "step_imgs": [], "step_title": "Step 1: "}, {"step": 2, "steps_text": "First place the two micrometers with their accessories on a piece to define the final size and position.The size for me was 22cm x 18cm.", "step_imgs": ["https://cdn.instructables.com/FVT/OJOZ/IKY6HGCZ/FVTOJOZIKY6HGCZ.LARGE.jpg", "https://cdn.instructables.com/FGG/33UO/IKY6HGXO/FGG33UOIKY6HGXO.LARGE.jpg", "https://cdn.instructables.com/FTM/MBYY/IKY6FRKG/FTMMBYYIKY6FRKG.LARGE.jpg"], "step_title": "Step 2: "}, {"step": 3, "steps_text": "Cut templates. They will help you cutting the correct size of the female part which will hold the micrometers in place.", "step_imgs": ["https://cdn.instructables.com/F60/1BJN/IKY6HGDZ/F601BJNIKY6HGDZ.LARGE.jpg", "https://cdn.instructables.com/FCZ/MYRY/IKY6FRK9/FCZMYRYIKY6FRK9.LARGE.jpg"], "step_title": "Step 3: "}, {"step": 4, "steps_text": "Cut two pieces of plywood for the two micrometers. The wood should be big enough to hold the micrometer but also small enough so as the tool to be easily removed.Extra Tip: When cutting the female parts, make sure the wood grains have the same flow with the box base.", "step_imgs": ["https://cdn.instructables.com/FX5/FHUZ/IKY6HGGL/FX5FHUZIKY6HGGL.LARGE.jpg", "https://cdn.instructables.com/F9R/606I/IKY6HGK5/F9R606IIKY6HGK5.LARGE.jpg", "https://cdn.instructables.com/F64/KPYD/IKY6FRKH/F64KPYDIKY6FRKH.LARGE.jpg"], "step_title": "Step 4: "}, {"step": 5, "steps_text": "Miter cut four pieces 2cm high to form the box. Glue or under screw. I made both. Remove any excess glue. Make sure the grains are inside. It will give aesthetically better finish look.", "step_imgs": ["https://cdn.instructables.com/F5G/YGML/IKY6FRKM/F5GYGMLIKY6FRKM.LARGE.jpg"], "step_title": "Step 5: "}, {"step": 6, "steps_text": "Cut another piece, identical to the bottom to form the lid.", "step_imgs": ["https://cdn.instructables.com/FS9/EM94/IKY6FRKQ/FS9EM94IKY6FRKQ.LARGE.jpg"], "step_title": "Step 6: "}, {"step": 7, "steps_text": "Cut two smaller lengths to form two compartments. These will store the micrometer spanners and gauges. Use glue and saw dust to form filling for the plywood gaps. Allow for the glue to dry and remove any excess. First sand and then use some varnish to cover the filled area.", "step_imgs": ["https://cdn.instructables.com/F6L/RDSQ/IKY6HGNR/F6LRDSQIKY6HGNR.LARGE.jpg", "https://cdn.instructables.com/FYE/6N7N/IKY6HGTN/FYE6N7NIKY6HGTN.LARGE.jpg", "https://cdn.instructables.com/F05/02BH/IKY6FRL0/F0502BHIKY6FRL0.LARGE.jpg"], "step_title": "Step 7: "}, {"step": 8, "steps_text": "Place the micrometers in place and secure them with the female parts. These parts can be either glued to the bottom of the box or screwed/nailed from underneath.Screw the lid in place. ", "step_imgs": ["https://cdn.instructables.com/FII/G72M/IKY6FRL1/FIIG72MIKY6FRL1.LARGE.jpg", "https://cdn.instructables.com/FTF/3R7P/IKY6HG54/FTF3R7PIKY6HG54.LARGE.jpg"], "step_title": "Step 8: "}, {"step": 9, "steps_text": "Use any kind of varnish on the outside and you are done. I used no lock for easier access.Good luck building your own box.", "step_imgs": ["https://cdn.instructables.com/FV6/NX93/IKZQ5HRR/FV6NX93IKZQ5HRR.LARGE.jpg", "https://cdn.instructables.com/FJZ/UGM3/IKZQ5S5P/FJZUGM3IKZQ5S5P.LARGE.jpg"], "step_title": "Step 9: "}], "channel": "Tools"}, {"category": "workshop", "description": "When you acquire an older micrometer, like an early 20th century Brown and Sharpe, you may find that it does not properly zero. After cleaning the measuring faces, twice, it still won't zero. It is pretty close, but not quite. The spindle turns freely and has no significant play, but it won't quite zero.Why?Are the faces worn or does one have a burr on it? Nope.Is the frame bent? No indication it has been dropped or hit.The spindle lines up with the anvil, and there is no light visible between the faces when closed. Probably not.I guess it just needs a small adjustment. A well cared for micrometer can go decades without needing an adjustment, but due to slight mishandling, otherwise insignificant wear, and fumble-thumbed efforts to '\"fix\" a micrometer that just needs to be cleaned, many used units need to be zeroed.Modern micrometers, nearly all except some digital types, specialty types, and the very cheapest standard types, adjust by rotating the barrel with a micrometer wrench. Many older mechanical micrometers, and a few modern ones, are adjusted differently. Here, we look at how to adjust older Brown and Sharpe units and older Tubular Micrometer Company (later Tumico, then Scherr-Tumico, and now ST) units. This guide applies to outside micrometer calipers, but also applies to some other types.We see that the Brown and Sharpe #8 above is not properly zeroed. It misses by about 3/10000\". Lets take a look at how this micrometer is adjusted, and then at a Scherr-Tumico 1-2\" micrometer.", "title": "How to Adjust an Older Micrometer", "url": "https://www.instructables.com/id/How-to-Adjust-an-Older-Micrometer/", "section": "workshop", "steps": [{"step": 1, "steps_text": "To understand the adjustment procedure, we'll look at how the unit is constructed. It isn't usually necessary to fully disassemble the micrometer to adjust it, but sometimes it is needed, as the parts may be stuck together by crud or rust.First, make sure the spindle is backed a few turns away from the anvil.The unit shown has a ratchet speeder for force control. Other common options are a friction thimble and no force control. These have a plain end cap. The end cap has a small hole in it for the pin on the micrometer wrench to grab. The wrench is used to loosen the cap. Little force should be needed. Too much force will either break the pin from the wrench or damage the hole in the cap. You should be able to hold the knurled section of the thimble in one hand, and loosen the cap. If it is stuck, Don't Panic! Don't force it. A little penetrating oil in the gap between the cap and the knurling, maybe a little heat- a little heat, like a few seconds from a low power heat gun, NOT the oxy-acetylene torch that you have always wanted to use- and a little time will usually do it. A light rap on the end of the wrench in the loosening direction may help.Once the cap is loose, we can remove it to see that there is a machined button end on the spindle and a machined annular surface inside the cap. On an older unit, these may be covered with crud or rust. They need to be CLEAN. Clean, with no burrs or roughness.Before we continue: DO NOT try to grab the thimble with a vise. You will distort it and ruin the tool. It is a pair of thin metal shells that need to be able to move relative to each other. Any distortion prevents this.At this point, the outer portion of the thimble should be able to slide toward the frame. If it does, Bob's your uncle. If not, then we go for the penetrating oil and time, with maybe a little heat mixed in. It may take a few days for the penetrant to work in. It should take almost no force at all to slip the outer part, but if it has been bound up, a little hand force may be needed. If it won't move after a week or so with penetrant, then decision time comes in: let it be, or up the ante a little. To up the ante, the spindle is fully removed from the frame. DO NOT turn the lock ring or lock lever when the spindle is out. The parts often rely on the spindle for support and may be distorted into uselessness if operated without the support of the spindle.The spindle needs to be held by the smooth portion in a soft, firm holder, such as a piece of soft wood with a hole slightly smaller than the spindle that is then split through the hole. The cap is replaced and threaded down until it touches the button, then BACKED OFF about one turn. Then comes the neanderthal action: A light, sharp tap on the cap with a soft, light mallet, such as a plastic or wooden mallet. You are trying to shock the part loose. The outside will move down the spindle. If not, try again. If it won't move after a few tries, more time and penetrating oil are needed, so give it a day or two.After the first movement, back the cap another turn and see if it moves by hand. If not, another rap. Keep going until it loosens up enough to slip off or you have backed up 3 turns or so on the cap. At this point, remove the cap, since there aren't enough threads engaged to rap safely again. Time and hand work pretty much get it free.", "step_imgs": ["https://cdn.instructables.com/FM8/Q0H9/ISCB810C/FM8Q0H9ISCB810C.LARGE.jpg", "https://cdn.instructables.com/FIG/EG8P/ISCB810T/FIGEG8PISCB810T.LARGE.jpg", "https://cdn.instructables.com/FOY/XNDR/ISCB810F/FOYXNDRISCB810F.LARGE.jpg", "https://cdn.instructables.com/F6U/9SU5/ISCB810I/F6U9SU5ISCB810I.LARGE.jpg"], "step_title": "Step 1: Disassembly and Parts"}, {"step": 2, "steps_text": "If we look inside the outer section of the thimble, we see that there is a lip at the end with the marks. This is what the cap works against. The large cylindrical part of the spindle is squeezed between the lip and the cap. This is also what allows us to adjust the micrometer.The inside of the thimble and the outside of the cylinder in the spindle need to be clean and smooth, and ANY crud inside the thimble needs to be removed. Bamboo skewers, cotton swabs, and mineral spirits are good for this. No abrasives. No corrosive chemicals.Once the parts are clean and rust free, light machine oil, like watch oil, sewing machine oil, or, believe it or not, micrometer oil, should be used to wipe the inside of the thimble and the out side of the spindle cylinder. This will allow for easy reassembly, easy adjustment, and help keep crud and moisture out so it can be adjusted again in fifty years. DO NOT use WD40 or any other substance that will get tacky or dry out. ONLY light machine oil.If the spindle threads or the frame bore need cleaning, now is the time. Take care of the wear adjustment ring. It shouldn't be adjusted unless the spindle threads have been started a few turns, and then only snug enough to take the play out. The spindle should turn freely. Just no looseness or slop.Slip the thimble back over the spindle and put the cap on loosely. Be sure the contact surface inside the cap has been wiped with oil and that the threads on the thimble have as well.  A small drop of oil on the spindle and run it in until it is a few turn from contacting the anvil, adjusting the wear ring if needed. The spindle may not go through the spindle lock without wiggling the lock assembly a bit. There is very, very little clearance. Do not force it. Watch through the anvil end of the bore and finagle it until the spindle slips through. ", "step_imgs": ["https://cdn.instructables.com/FMD/TWXF/ISCB810N/FMDTWXFISCB810N.LARGE.jpg"], "step_title": "Step 2: Clean the Parts and Reassemble"}, {"step": 3, "steps_text": "Be sure the measuring faces are clean. Carefully run the spindle into contact with the anvil. The Brown and Sharpe manual specifies this be done by grasping the spindle, not the thimble.Now, while holding the spindle in place, loosen the cap slightly, rotate the thimble until the zero mark aligns with the index line on the barrel, and LIGHTLY snug the cap to hold position.Back out the spindle a few turns by grasping it with your fingers, WITHOUT touching the thimble. You do not want to disturb the setting. Now, hold the thimble and snug the cap with your other hand. Do not use the wrench yet.Bring the spindle back to the anvil using the thimble. Use the force control device (friction collar or ratchet) if present. If it is not right on zero, loosen the cap, readjust, back the spindle out, and snug the cap again. It may take a few iterations too get it dead on.Once it is dead on with the cap snug, back the spindle out and snug a bit tighter with the wrench.Congratulations. You are done.Obviously, if everything is clean and free to begin with, it doesn't need to all come apart. Just loosen the cap a half turn, adjust, and snug it back up.Now, to the Scherr-Tumico...", "step_imgs": ["https://cdn.instructables.com/FG3/AVRQ/ISCB810P/FG3AVRQISCB810P.LARGE.jpg", "https://cdn.instructables.com/F0Y/I9EJ/ISCB810R/F0YI9EJISCB810R.LARGE.jpg"], "step_title": "Step 3: Now, We Zero"}, {"step": 4, "steps_text": "The Tubular Micrometer Company design is quite different than any other manufacturers. It has several benefits, as well as a few frustrating drawbacks.Similar to many other makes, the thimble can be separated from the spindle by removing the screw or speeder from the end. Unusual is that the thimble screws onto the spindle thread, and the end screw is only for locking it in place. In addition, the fine adjustment is done by rotating the graduated end of the thimble relative to the rest. This combination has the advantage that the alignment of the edge of the thimble with the barrel graduations can be adjusted, allowing the user to set it to fully expose the graduations or split them, at her preference, by running the thimble further up or down the spindle thread. The position is locked by the screw or speeder in the end.In this example, the spindle is run to its zero position on a 1\" gauge block, and the thimble is positioned for the desire reveal of the graduation lines. This does not put the zero of the thimble over the index. Then, the speeder is replaced and snugged up to lock the position.", "step_imgs": ["https://cdn.instructables.com/F9W/9UYB/ISCBFCYJ/F9W9UYBISCBFCYJ.LARGE.jpg", "https://cdn.instructables.com/FC0/MVH4/ISCBFD1M/FC0MVH4ISCBFD1M.LARGE.jpg", "https://cdn.instructables.com/F2Q/NYBR/ISCBFD4O/F2QNYBRISCBFD4O.LARGE.jpg", "https://cdn.instructables.com/FSL/BEWN/ISCBFUM0/FSLBEWNISCBFUM0.LARGE.jpg", "https://cdn.instructables.com/F6U/RC5V/ISCBFUUB/F6URC5VISCBFUUB.LARGE.jpg"], "step_title": "Step 4: Scherr-Tumico Construction"}, {"step": 5, "steps_text": "Now the drawback to the design. Final adjustment is done by rotating the graduated end of the thimble relative to the rest, and there is significant friction, even compared to the modern movable barrel adjustment most manufacturers use now. Additionally, the joint in exposed and gums up with rust, oil, and hand goo. Yes, your hand produces goo like everyone else's. It gets sticky and may be corrosive. It gets in the joint and makes adjustment a challenge.The joint is next to the hole for the wrench, which is also a size that is difficult to find. In the absence of a wrench, a properly sized steel pin can be inserted in the hole, and a piece of wood with a properly sized hole can be cut in half to hold the pin. It works, but is a bit awkward. In the example (made for a smaller tool), I just used the end of the drill bit.If the adjustment does not want to move, we are back to the penetrating oil and mineral spirits. The thimble should be removed from the spindle, cleaned, and penetrating oil applied. The adjustment should turn holding the knurled portion in one hand and the wrench in the other hand. It should be stiff, but should not need excessive force. If the thimble is clamped up for this, it is quite likely to be distorted and bind up forever. Once the adjustment if free, reinstall the thimble.With the micrometer measuring faces touching (in this case, on the gauge block), hold the knurled section of hte thimble and rotate the graduated section until zero is lined up.You are done.  You now have a functional, properly adjusted micrometer, ready for calibration and use.Calibration? That is where any errors are quantified. For many users, a zero check is all that is done. For critical users, periodic calibration is done to insure that the tool not only zeros properly, but that it is correct over the entire range, and to determine the uncertainty and errors at points throughout the range. But that is a different lesson.", "step_imgs": ["https://cdn.instructables.com/FAM/R9ZG/ISCBFV08/FAMR9ZGISCBFV08.LARGE.jpg", "https://cdn.instructables.com/FYV/4LYI/ISCBFWTN/FYV4LYIISCBFWTN.LARGE.jpg", "https://cdn.instructables.com/F06/T6S8/ISCBFV09/F06T6S8ISCBFV09.LARGE.jpg"], "step_title": "Step 5: Scherr-Tumico Adjustment"}], "channel": "Metalworking"}, {"category": "workshop", "description": "\u00a0Yes, you're thinking: \"doesn't he mean a protractor\" I do a lot of welding and often I need to check if my cutoff machine has cut the angle I needed,\u00a0usually\u00a090 or 45 but sometimes random angles like 38 or whatever.The standard\u00a0protractor you get in mathematical instrument sets doesn't cut it for me, it's designed to measure angles on paper, not a 3D object. So to the drawing board I went and an hour later I had a lovely design (I ALWAYS make a technical drawing of my projects before I start building them) that required only five parts.SoOoOoO, the briefing is out of the way, let's start:Materials:1) two sheets of alumin-i-um (not the American spelling). Mine are 3mm and 4mm thick.2) a bolt with matching nut to hold it all together. Mine is brass because it looks cool.3) a spring washer to keep all moving parts happy. A normal washer would also work.Tools:The most precise tools you've got, all I had at hand was:1) angle grinder with 1mm cutting disk and thick grinding disk.2) bench grinder.3) sanding machine with belt and disk.3) wood\u00a0chisels\u00a0to make notches every 5 degrees.4) hammer.5) drill press and assortment of drills.6) spade drill-bits to make\u00a0recesses\u00a0for the washer.7) steel ruler.8) vernier calliper.9) bench vice.10) standard size steel file for shaping.11) set of mini files for precision shaping.12) scroll saw.13) a couple of G-clamps.14) a normal protractor.I think that's about it . . . CONTINUE\u00a0", "title": "Making a Tool to Measure Angles", "url": "https://www.instructables.com/id/Making-a-tool-to-measure-angles/", "section": "workshop", "steps": [{"step": 1, "steps_text": "First cut your aluminium plates to the approximate shape, leave a little excess material on the bottom straight edge of the protractor-plate and do the same on the edge of the guide-plate which has the \"bubble\". This was all done with the angle grinder and scroll saw.Now shape the round side of the protractor-plate and the \"bubble\" of the guide-plate. Also remove the excess you left on the measuring edges BUT MAKE SURE THEY'RE 100% STRAIGHT, use a steel ruler and vernier caliper for this. All shaping was done with the sanding machine and standard file.Please note that the edges on both sides of the \"bubble\" must line up with each other as closely as you can manage, the\u00a0center\u00a0of the hole for the bolt must also be on this line.Also mark the protractor in whatever sized increments you wish to use, I opted for 5 degrees and used the wood chisels (naughty naughty) and hammer. Obviously you need to use a normal protractor to get these exact.Also drill the holes for your bolt, This will naturally go through both plates and must be just larger in diameter than the bolt you're using. In my case: bolt = 4.8mm and hole in guide plate = a teeny bit smaller than 5mm. The hole in my protractor-plate is 4.5mm.", "step_imgs": ["https://cdn.instructables.com/FDB/DE2N/G0SD2YCP/FDBDE2NG0SD2YCP.LARGE.jpg"], "step_title": "Step 1: Step 1"}, {"step": 2, "steps_text": "\u00a0ok, now you should have two plates which resemble the ones in the image below.Next is making the recesses in them to allow for the washer. I used wood spade drill bits (naughty again) because aluminium is soft enough that it does little damage to these cheap bits. The reason I used spade bits is because they have a tapered point which conveniently centers the bit, and also because they have a flat cutting face as opposed to normal drill bits.Remove the head of your bolt and shape that end so that you can press-fit it into the hole on the protractor-plate. Then cut a groove in the same end of the bolt almost as if you're making dumdum bullets. This will help you to keep the bolt secured in the hole later on.", "step_imgs": ["https://cdn.instructables.com/FN8/2VC4/G0SD2YCM/FN82VC4G0SD2YCM.LARGE.jpg", "https://cdn.instructables.com/FVB/6RHH/G0SD2YCL/FVB6RHHG0SD2YCL.LARGE.jpg"], "step_title": "Step 2: Step 2"}, {"step": 3, "steps_text": "OK, next you need to atatch the bolt to the protractor-plate, I just filed mine away until he was a very tight press fit, I then used my bench vice to force the bolt in and it's very solid. Once I had forced it in far enough I used a flat screw driver and hammer to pry the bolt apart where I had cut the groove into it.Also cut a deep groove in the bottom of your protractor-plate so that when you pry the bolt open it has something to grip onto. I used the angle grinder for this.", "step_imgs": ["https://cdn.instructables.com/FI6/L1UA/G0SD2YCJ/FI6L1UAG0SD2YCJ.LARGE.jpg"], "step_title": "Step 3: Step 3"}, {"step": 4, "steps_text": "\u00a0ok, now assemble and check it out!!!Pretty neat huh?compare it to a normal protractor, if it's not precise enough I apologise. You'll have to start over.Fortunately mine is only about half a degree out so I'm not complaining.Side note: I used my sanding machine's belt sander to give the faces of both plates a nice brushed look, sort of visible in the picture.", "step_imgs": ["https://cdn.instructables.com/FE7/AD85/G0SD2YCI/FE7AD85G0SD2YCI.LARGE.jpg"], "step_title": "Step 4: FINISHED - WOOT!"}], "channel": "Tools"}, {"category": "workshop", "description": "Cuando cort\u00e9 las duelas para mi primer bol con su tapa, hecho con mi m\u00e9todo, tuve errores de medici\u00f3n debido a la dificultad de medir con cierta aproximaci\u00f3n los \u00e1ngulos involucrados. La cosa se solucion\u00f3 eliminando una duela en el caso del cuerpo, y agregando media duela en el caso de la tapa. Hay que tener en cuenta que el error en la inclinaci\u00f3n de la hoja de corte se multiplica por el doble de la cantidad de duelas. Lo mismo sucede con la inclinaci\u00f3n del trineo que arrastra la madera. Entonces, si la pieza a construir tiene por ejemplo 18 duelas, un peque\u00f1o error de 1/3 grado (20 minutos de arco) se convierte en un error de 10.8\u00b0, que es muy dif\u00edcil de disimular. Quise comprar un transportador industrial, pero me asust\u00f3 el precio. Mi amigo de Instructables Bill Wells me envi\u00f3 la foto de dos que \u00e9l costruy\u00f3, y eso me decidi\u00f3 a hacer el m\u00edo. Comprar un buen transportador. En cualquier librer\u00eda escolar se puede conseguir un transportador barato y relativamente exacto. Yo consegu\u00ed uno de 1 U$S, y luego dos de 0,25 U$S. Respecto de su exactitud, no tengo muchas posibilidades de verificarla, solo debo confiar en que los fabricantes hayan sido medianamente responsables. Buscar una hoja de sierra usada. Ya he dicho hasta el cansancio que yo no tiro nada a la basura. Particularmente, las hojas de sierra usadas son sumamente \u00fatiles para hacer peque\u00f1as trinchetas, para usarlas ocasionalmente como regla, para reemplazar un resorte, etc. As\u00ed que siempre las tengo a mano. Los dientes se pueden eliminar f\u00e1cilmente con la amoladora de mesa, a efectos de que tenga dos lados rectos y paralelos. Buscar un trocito de chapa de bronce. Cuando una ficha de tomacorriente pasa a mejor vida, las peque\u00f1as piezas de bronce que la formaban sirven para usarlas como contactos o para cosas \"raras\" como esta. Si no conseguimos una chapita que tenga una pesta\u00f1a con agujero como esta, habr\u00e1 que hacerla. Buscar un peque\u00f1o tornillo con tuerca. Si podemos conseguir uno lo suficientemente peque\u00f1o como para que pase por el agujerito de la chapita de bronce, fen\u00f3meno. Si no, se agranda el agujerito y listo. Pero no se lo puede agrandar demasiado, as\u00ed que evaluar si no es m\u00e1s negocio ir a comprar el tornillito con su tuerca. Extender la tuerca. Este paso es m\u00e1s una comodidad futura que una necesidad. Si la tuerca es muy chica, manejarla va a ser un poco m\u00e1s dif\u00edcil. Por lo tanto, es conveniente hacerla calzar dentro de un peque\u00f1o tubo, preferiblemente met\u00e1lico. En mi caso, us\u00e9 un pequeno tubo c\u00f3nico de aluminio, no me pregunten de d\u00f3nde lo saqu\u00e9. Posiblemente haya sido la punta de un bol\u00edgrafo. Hacer una muesca en la hoja de sierra. La chapita de bronce ir\u00e1 soldada de manera que el centro del agujerito por donde pasa el tornillo quede alineado con el borde de la hoja de sierra. Para eso hay que hacerle a esta una muesca con la amoladora. Soldar la chapita de bronce. Limpiar bien con papel de lija la hoja de sierra en las inmediaciones de la muesca, aplicar decapante para soldadura de esta\u00f1o, calentarla ligeramente sobre una llama de gas y apoyar el alambre de esta\u00f1o hasta que se derrita. Desparramarlo sobre la superficie donde ir\u00e1 soldada la chapita de bronce. Esta\u00f1ar tambi\u00e9n esta de la misma manera, y una vez hecho esto, poner en contacto ambas superficies esta\u00f1adas, mantenerlas as\u00ed apretadas con dos pinzas, poner todo unos segundos sobre la llama de gas para que se funda el esta\u00f1o y ambas partes queden soldadas. Agujerear el pl\u00e1stico. La mayor\u00eda de los transportadores pl\u00e1sticos vienen con un peque\u00f1o agujerito en el punto central del \u00e1ngulo a medir. Seguramente ser\u00e1 demasiado chico para que pase el tornillo, as\u00ed que habr\u00e1 que agrandarlo un poco. Armar todo. Pasar el tornillito por el agujero de la chapa de bronce, luego atravesar el pl\u00e1stico y atornillar la tuerca (no muy fuerte). C\u00f3mo se usa: Apoyar el borde inferior del transportador pl\u00e1stico sobre una de las caras del \u00e1ngulo a medir, y luego desplazar la hoja met\u00e1lica hasta que apoye correctamente sobre la otra cara. El extremo opuesto indicar\u00e1 el \u00e1ngulo en la escala del transportador. --------------------------------------When I cut the staves to my first bowl with lid, made with my method, I had measurement errors due to the difficulty of measuring with certain approach the angles involved. The thing was solved by removing a board into the case body, and adding half stave in the case of the lid. Keep in mind that the error in the inclination of the cutting blade is multiplied by twice the number of staves. The same goes with tilting of wood sled. Then, if the part to build is for example 18 staves, a small error of third degree (20 arc minutes) becomes an error of 10.8\u00b0, which is very difficult to conceal. I wanted to buy an industrial protractor, but the price scared me. My Instructables friend Bill Wells sent me the photo of two protractors he made, and I decided to make my own. Buy a good school protractor. In any school library can get a cheap and relatively accurate protractor. I got one for 1 U$S, then two 0.25 U$S. Regarding accuracy, I have not much chance to verify it, I just have to trust that the manufacturers have been fairly responsible. Search for a used saw blade. I have said time and again that I do not throw anything away. Particularly, used saw blades are extremely useful for small cutters, for occasional use as a rule, to replace a spring, etc. So I have always them at hand. The teeth can be easily removed with a table grinder, for the purpose of having two straight and parallel sides. Find a piece of brass plate/sheet. When a piece of outlet passes to better life, small bronze pieces that were used to contact serve to use them as \"weird\" things like this. If not get a piece having a tab with hole like this, we must do it. Find a small screw and nut. If we can get one small enough to fit through the hole of the brass piece, OK. If not, we enlarge the hole and go. But you can not enlarge too much, so evaluate whether business is not going to buy the little screw with nut.Extend the nut. This step is more a future convenience than a necessity. If the nut is too small, handle it will be a little more difficult. Therefore, it is expedient to fit inside a small tube, preferably metal. In my case, I used a small aluminum conical tube, do not ask me where I got it. It may have been the tip of a pen. Make a notch in the blade. The bronze piece should be soldered so that the center of the hole through which the screw is flush with the edge of the saw blade. For that we must make this a notch with the grinder. Weld the brass piece. Clean up with sandpaper the saw blade in the vicinity of the notch, apply flux for soldering tin, heat slightly over a gas flame and support the tin wire until melted. Spread it on the surface where it will be welded bronze piece. Tin it also the same way, and once done, contacting both tinned surfaces, keeping them tight with two clamps, make some few seconds over the gas flame to melt tin and both parts are welded. Drill the plastic. Most plastic protractors come with a small hole in the center point of the angle to be measured. Probably it is too small to pass the screw, so we have to enlarge it a bit. Assemble all. Pierce the little screw through the hole in the brass plate, then through the plastic and screw \u2013not much\u2013 the nut. How to use: rest the bottom edge of the plastic protractor on one side of the angle to be measured, and then move the metal sheet until it rests correctly on the other side. The opposite end shows the angle on the scale of the protractor.", "title": "Herramienta \u00datil (useful Tool)", "url": "https://www.instructables.com/id/Herramienta-%C3%BAtil-useful-tool/", "section": "workshop", "steps": [], "channel": "Tools"}, {"category": "workshop", "description": "This easy to build height gauge for a router or a table saw is much easier to read than conventional ones and the precision is + - 0,1 mm. It increases the display by a factor of 10 or more.You can build it in an afternoon and the cost are under $ 2To see all step at once, please watch the videoMaterial:2 thin stripes of wood1 little piece of plywood1 little block of hardwooda plate of MDF  a short piece of a 2x4a piece of papera needle6 small nailsTools:table sawdrillhammerSpray adhesiveSuper glue", "title": "Simple and Precise Height Gauge", "url": "https://www.instructables.com/id/Simple-and-Precise-Height-Gauge/", "section": "workshop", "steps": [{"step": 1, "steps_text": "Cut two thin strips on the table saw. The length is in my case about 12 cm. But you can make it longer How long does not matter.Lay a thin strip on the other and drill a hole at one endInsert a nail through both and drill a second hole on the opposite end.The third hole is near an end. The ratio of the long and short side should be about 1 to 10. However, this need not be very accurate.", "step_imgs": ["https://cdn.instructables.com/FU1/HVYI/J0CP0ZQR/FU1HVYIJ0CP0ZQR.LARGE.jpg", "https://cdn.instructables.com/FGB/6VSQ/J0CP0ZSC/FGB6VSQJ0CP0ZSC.LARGE.jpg", "https://cdn.instructables.com/FUR/AQCX/J0CP0ZSE/FURAQCXJ0CP0ZSE.LARGE.jpg", "https://cdn.instructables.com/FKF/HE87/J0CP0ZZD/FKFHE87J0CP0ZZD.LARGE.jpg"], "step_title": "Step 1: Preparing the Long Arms of the Lever"}, {"step": 2, "steps_text": "In my first try I used hardwood but this was not a good idea. Plywood is much better here. So take a little piece of plywood and drill two holes on the ends.The dimensions doesn't matter! The holes should be a tiny little bit smaller than the nails you have.Use this part as a template for the holes on the back board and the second short arm, the thick one.", "step_imgs": ["https://cdn.instructables.com/FA3/AFLT/J0CP10AQ/FA3AFLTJ0CP10AQ.LARGE.jpg", "https://cdn.instructables.com/FF6/I7A1/J0CP10BO/FF6I7A1J0CP10BO.LARGE.jpg", "https://cdn.instructables.com/FLD/58ZO/J0CP105T/FLD58ZOJ0CP105T.LARGE.jpg", "https://cdn.instructables.com/FUE/EGLR/J0CP108C/FUEEGLRJ0CP108C.LARGE.jpg"], "step_title": "Step 2: Preparing the Short Arms of the Lever"}, {"step": 3, "steps_text": "The short, small arm got a needle as a pointer. I glued it on with super glue.", "step_imgs": ["https://cdn.instructables.com/FWF/G1XT/J0CP10DK/FWFG1XTJ0CP10DK.LARGE.jpg"], "step_title": "Step 3: Glue a Needle On"}, {"step": 4, "steps_text": "The back board is a piece of MDF screwed on a piece of 2x4 and covered with a piece of paper. The dimensions doesn't matter but it should be bigger than the lever.Drill two holes near one edge (ca 5 mm) for the lever. Use the short, tiny arm of the lever as a template.The thick, short arm must have his highest position and the arms have to be parallel. ", "step_imgs": ["https://cdn.instructables.com/FBD/HKP0/J0CP10FW/FBDHKP0J0CP10FW.LARGE.jpg", "https://cdn.instructables.com/F5V/WFG5/J0CP10GT/F5VWFG5J0CP10GT.LARGE.jpg", "https://cdn.instructables.com/FVG/PHPT/J0CP10IH/FVGPHPTJ0CP10IH.LARGE.jpg"], "step_title": "Step 4: The Back Board "}, {"step": 5, "steps_text": "I put small washers between the moving part and hit nails in. Where they were too long, I cut them off with a pair of pliers and sand them off.", "step_imgs": ["https://cdn.instructables.com/F6O/0EV2/J0CP10IT/F6O0EV2J0CP10IT.LARGE.jpg", "https://cdn.instructables.com/FQ7/WA7O/J0CP10KR/FQ7WA7OJ0CP10KR.LARGE.jpg", "https://cdn.instructables.com/FY0/KPDA/J0CP10LL/FY0KPDAJ0CP10LL.LARGE.jpg", "https://cdn.instructables.com/FGU/V65G/J0CP10OB/FGUV65GJ0CP10OB.LARGE.jpg", "https://cdn.instructables.com/FET/6IVR/J0CP10RC/FET6IVRJ0CP10RC.LARGE.jpg"], "step_title": "Step 5: Assembling"}, {"step": 6, "steps_text": "My fat, short arm was too light. That's why I glued a little weight on it. If you make this part longer then you do not need this weight.", "step_imgs": ["https://cdn.instructables.com/FN2/ZI8I/J0CP10RQ/FN2ZI8IJ0CP10RQ.LARGE.jpg", "https://cdn.instructables.com/FV3/MVZ1/J0CP10UM/FV3MVZ1J0CP10UM.LARGE.jpg"], "step_title": "Step 6: Add a Extra Weight"}, {"step": 7, "steps_text": "The setting of the scale is very simple. I put my drill under the right fat, small arm and made a line on the paper on the left. A 1 mm error on the left side is only a 0.1 mm error on the right side. This is exactly enough for woodworking.", "step_imgs": ["https://cdn.instructables.com/FQE/R2P6/J0CP10V0/FQER2P6J0CP10V0.LARGE.jpg", "https://cdn.instructables.com/FRV/TQH8/J0CP10VC/FRVTQH8J0CP10VC.LARGE.jpg", "https://cdn.instructables.com/F3V/VJPH/J0CP10VE/F3VVJPHJ0CP10VE.LARGE.jpg", "https://cdn.instructables.com/F7I/7T2E/J0CP10W8/F7I7T2EJ0CP10W8.LARGE.jpg"], "step_title": "Step 7: The Scale"}, {"step": 8, "steps_text": "In order to enlarge the area of the measuring instrument, I sawed three pieces of scrap wood with a thickness of 1 cm, 2 cm and 4 cm. To avoid errors caused by wood shrinkage, I sawed it like a end grain cutting board.(I hope this sentence make sense, if not please let me know in the comment section below)", "step_imgs": ["https://cdn.instructables.com/FD4/OV3M/J0CP10WR/FD4OV3MJ0CP10WR.LARGE.jpg", "https://cdn.instructables.com/FEL/QMTF/J0CP10XZ/FELQMTFJ0CP10XZ.LARGE.jpg"], "step_title": "Step 8: Increase the Range of the Gauge"}, {"step": 9, "steps_text": "For heights between 0 and 1 cm use it without blocksFor heights between 1 and 2 cm use the 1 cm blockFor heights between 2 and 3 cm use the 2 cm blockFor heights between 3 and 4 cm use the 1 cm block + the 2 cm blockFor heights between 4 and 5 cm use the 4 cm block (this is my highest height)But you can even go furtherFor heights between 5 and 6 cm use the 1 cm block + 4 cm blockFor heights between 7 and 8 cm use the 1 cm block + the 2 cm block + 4 cm blockTo store the blocks, place them on the back.If you like this, I am glad if you vote for it in the Build a Tool Contest 2017You can find more ideas like this on my YouTube channel.", "step_imgs": ["https://cdn.instructables.com/FJZ/HDOL/J0CP10YS/FJZHDOLJ0CP10YS.LARGE.jpg", "https://cdn.instructables.com/FY3/L5W8/J0CP10ZK/FY3L5W8J0CP10ZK.LARGE.jpg", "https://cdn.instructables.com/FT2/7FMK/J0CP1123/FT27FMKJ0CP1123.LARGE.jpg", "https://cdn.instructables.com/FP1/8YBB/J0CP113Q/FP18YBBJ0CP113Q.LARGE.jpg", "https://cdn.instructables.com/FAO/TPXI/J0CP114P/FAOTPXIJ0CP114P.LARGE.jpg"], "step_title": "Step 9: How to Use It"}], "channel": "Tools"}, {"category": "workshop", "description": "Today at the Pittsburgh Tech Shop, I took a class in laser cutting and etching. A laser cutter is a machine that uses a focused laser to burn or melt away an image onto a sheet of raw material. Laser cutters can be used to etch or cut a variety of different materials from certain kinds of plastics to leather. It takes a vector file as input and in a few minutes will reproduce it on your chosen material.\u00a0 In this tutorial, I will be using a Trotec laser cutter and Corel Draw to etch a vector image I made onto a small sheet of acrylic. I will briefly discuss the material and vector that I chose before I go into more depth about the printer and printing software itself. Note that this is an overview for this particular kind of laser cutter; there are many kinds of laser cutters and software available. This should give you a general idea of what the process is like. Chances are if there's a laser cutter available to you you'll have to do a bit of research before you can use it.WARNING:\u00a0this is a basic intro to laser cutting as a concept. Laser cutters can be damaged and can be dangerous if not used correctly.\u00a0It is highly recommended that you receive formalized training before using one. More information about the Pittsburgh TechShop can be found at http://techshop.ws/ I made it at TechShop!", "title": "Trying My Hand At: Laser Cutting and Etching [Pittsburgh Tech Shop]", "url": "https://www.instructables.com/id/The-laser-cutter-control-panel/", "section": "workshop", "steps": [{"step": 1, "steps_text": "As there are plenty of variations to laser cutting, I will focus on one particular kind in this Instructable. As previously mentioned, I will be using a Trotec laser cutter, Corel Draw, Job Control, and a sheet of acrylic as my material.Time: from 15 minutes to 3 hours [Note: time varies greatly based on factors such as familiarity with the machine, raw material, complexity of input file, and experimentation with laser settings]Tools: -Laser cutter (Trotec for this tutorial) -Vector software (e.g. Corel Draw, Adobe Illustrator) -Laser cutter driver software (Job Control)Materials: -Vector file of your design -Sheet of raw material (acrylic) [As a rule of thumb, you should bring more material than you plan to use in your final product. It is common to get the settings or placement wrong when working with an unfamiliar material] After assembling your materials, the first thing you should do is decide what you'd like to etch. Trotec laser cutters can take both raster and vector data. Raster images are composed of a series of pixels. If you choose a raster formatted image, like a .png, .jpg, or .gif, the laser will make deeper marks on darker pixels and lighter marks on lighter pixels. Vector images are composed of equations of lines, curves, and other relavent data. You can make them with programs such as Adobe Illustrator or Corel Draw. If you choose a vector image, the laser will follow the lines described by your inputed file. The strength of the laser will depend on how dark your lines are on a white to black scale. For this Instructable, I took inspiration from a character my friend made for a game and I made a quick vector design in Illustrator for the character's Business Crab Enterprises.", "step_imgs": ["https://cdn.instructables.com/FOD/E7LT/HI3TYI71/FODE7LTHI3TYI71.LARGE.jpg"], "step_title": "Step 1: Choose Your Image"}, {"step": 2, "steps_text": "\n          At the Tech Shop, they have a list of materials that have been approved for the laser cutter. They also have a ring of example materials that the laser cutter will accept.\u00a0Always check to make sure that that you want to cut can be processed by the laser cutter; there are some materials that just won't cut, but others will melt, produce gas that can ruin the laser's lens, or produce toxic gas if cut. Below are the materials approved for the Trotec. Again, not all laser cutters are the same. Please check that your material is okay for your particular cutter before cutting anything. Here are some materials that CANNOT\u00a0be cut by a laser cutter and why:    Vinyl, PVC, Foam Core, Polymer Clay: produces Hydrogen Chloride gas     ABS: produces Hydrogen Cyanide gas     Styrofoam: can start a fire     Metal, mirror: can reflect laser back into internals of machine     Polycarbonate, PETG: Does not cut     Fiberglass: this one varies; check with the machine\u00a0manufacturers\u00a0or owners ", "step_imgs": ["https://cdn.instructables.com/FNG/EN3V/HI3TYI1H/FNGEN3VHI3TYI1H.LARGE.jpg", "https://cdn.instructables.com/FYX/MPPV/HI3TYI1I/FYXMPPVHI3TYI1I.LARGE.jpg"], "step_title": "Step 2: Materials to Choose From"}, {"step": 3, "steps_text": "I chose a sheet of scrap acrylic for this piece. It can be both cut and etched by a laser cutter.\u00a0 Please note that if you are unfamiliar with laser cutting, have not worked with your chosen material before, or are using a particularly expensive or difficult to acquire material you should test your laser settings on a scrap piece of that material before you start your final project. It is very easy to choose the wrong settings and ruin a piece of raw material.", "step_imgs": ["https://cdn.instructables.com/F09/IVU4/HI3TYI1B/F09IVU4HI3TYI1B.LARGE.jpg"], "step_title": "Step 3: Choose Your Material"}, {"step": 4, "steps_text": "The laser cutter is a large machine with a few important parts to be aware of. This is just a brief overview of the machine; we will go through all of the steps to operate the laser cutter that has already been set up.Top lid:\u00a0You open the door on top of the laser cutter to place your piece. You can look through the lid to watch the progress of the cut.\u00a0Power switch:\u00a0On the Trotec, the power switch is on the back of the machine. Make sure it is turned on before attempting to use the machine.Control panel:\u00a0This is where you set the laser position, receive error warnings, and pause the cut. We will go into this in more detail soon.Ventilation:\u00a0The cutting process produces gas, particulate, and usually a small amount of fire from the heat of the laser. The ventilation system is there to sweep away any gas produced and to keep the fire low. (Note: the fire produced by the laser should always be less than a centimeter in size. If your piece catches fire, stop the job IMMEDIATELY by lifting the lid)Head:\u00a0This contains the lens that focuses and reflects the laser onto your surface. It moves in a two dimensional plane according to the file you give the printer to cut the image into your material.Support grid:\u00a0This is the platform onto which you place your material. This honeycomb aluminum grid will hold up your material while allowing for proper ventilation.Side Rulers: The bed of the laser cutter has rulers along the edges. You will be using these to compare the dimensions of your piece with your input file.Front door:\u00a0This door allows you to access the area under the support grid. It should be kept clean and should never be used as a storage space.", "step_imgs": ["https://cdn.instructables.com/F3V/FN1P/HI3TYI1D/F3VFN1PHI3TYI1D.LARGE.jpg"], "step_title": "Step 4: Laser Cutter: Basic Information"}, {"step": 5, "steps_text": "The control panel has a few buttons; in this tutorial, we will be using the arrows. The red arrows control the position of the laser head--when the laser cutter is not running, you can use them to manually position the head. You can press on them for as long as you like and they will not damage the laser head; they'll stop before they reach the edges. You should still be careful that when you begin cutting that the head is not positioned over the rulers on the edges of the machine. The black arrows are for moving the support bed up and down.\u00a0Be careful when using these buttons--moving the bed too far up can make it collide with the laser head and can damage the machine.", "step_imgs": ["https://cdn.instructables.com/FBM/MPSI/HIGFJWZG/FBMMPSIHIGFJWZG.LARGE.jpg"], "step_title": "Step 5: The Laser Cutter Control Panel"}, {"step": 6, "steps_text": "Place your material on the grid in the upper left corner. Make sure the edges of the material are flush against the rulers. If your piece is irregularly shaped like the one in the picture below, make sure that it is as close as possible. If the laser head is too close to the bed for you to slide your piece underneath, use the up/down arrows to move the tray down first.", "step_imgs": ["https://cdn.instructables.com/FG9/TQTZ/HI3TYI1U/FG9TQTZHI3TYI1U.LARGE.jpg"], "step_title": "Step 6: Placing Your Piece"}, {"step": 7, "steps_text": "The laser cutter has an autofocus mechanism. The focusing mechanism shines out of a small port near the upper left hand corner and measures how tall your material is when laid flat. If your material is thinner that the rulers on the edges of the support bed, however, it will focus on the height of the rulers rather than on your material.\u00a0If this is the case, you will have to manually focus the laser. The laser cutter should come with a small metal tool (pictured below). It two feet on the bottom and a small square on the back. Identify this piece or ask for the equivalent for the laser cutter that you are using.", "step_imgs": ["https://cdn.instructables.com/FPN/RMMO/HI3TYI1S/FPNRMMOHI3TYI1S.LARGE.jpg"], "step_title": "Step 7: Adjusting the Laser's Focus (Part 1)"}, {"step": 8, "steps_text": "There is a ridge on the side of the laser head. With the feet of the focusing tool pointed down, carefully balance the metal square on that ledge. Make sure the laser is far enough from the support bed that the feet of the focusing tool are not touching the material. Also be sure that the laser is positioned above your material, not the rulers. Use the control pad to move the laser head if necessary.", "step_imgs": ["https://cdn.instructables.com/FU8/D3IV/HI3TYI1Y/FU8D3IVHI3TYI1Y.LARGE.jpg"], "step_title": "Step 8: Adjusting the Laser's Focus (Part 2)"}, {"step": 9, "steps_text": "Now that your focusing tool is in position, carefully raise the support bed in small increments. Hold the button down for larger increments and tap for smaller increments. When the feet of the focusing tool start to get very close to the material, make your increments as small as possible. Stop when the measuring tool is nudged gently by the material or falls off of the laser. The laser head is now in the focused position.", "step_imgs": ["https://cdn.instructables.com/FA1/GSQ5/HI3TYI1Z/FA1GSQ5HI3TYI1Z.LARGE.jpg"], "step_title": "Step 9: Adjusting the Laser's Focus (Part 3)"}, {"step": 10, "steps_text": "Now that your material and laser head are in position, close the top lid. The laser cutter will not operate unless the lid is closed.", "step_imgs": ["https://cdn.instructables.com/F61/S5E0/HI3TYI24/F61S5E0HI3TYI24.LARGE.jpg"], "step_title": "Step 10: Close the Lid"}, {"step": 11, "steps_text": "Now that you've prepared the laser cutter itself, it is time to switch our focus to the software.\u00a0 At the Tech Shop, there is a dedicated computer wired to each laser cutter. It has all of the proper software to operate the laser cutter installed: Corel Draw, Adobe Illustrator, and Job Control. I will not be going into detail as to how to set up a station like this; if you are in a position where you need to install software or connect to the cutter for the first time, I would advise you to do some research or ask someone who is qualified on the subject.", "step_imgs": ["https://cdn.instructables.com/FMU/3MZ9/HI3TYI1C/FMU3MZ9HI3TYI1C.LARGE.jpg"], "step_title": "Step 11: Connecting to the Laser Cutter"}, {"step": 12, "steps_text": "A few important notes about your file: your color mode should be RGB, not CYMK. The Trotec laser cutter uses RGB colors to determine which lines to cut and which to etch; CYMK colors will not work. If you are creating a new file in Corel Draw, be sure that the color mode drop down menu points to \"RGB\". Open Corel Draw. If your file was made in Corel Draw, open it. If it was made in Illustrator, first create a new RGB file and import it. Both options can be found under the \"File\" menu.", "step_imgs": ["https://cdn.instructables.com/F0E/XS9J/HI3TYI5N/F0EXS9JHI3TYI5N.LARGE.jpg"], "step_title": "Step 12: Software Setup: Using Corel Draw (Or Adobe Illustrator)"}, {"step": 13, "steps_text": "Use the rulers on the edges of the window to line up your piece. It should be completely within the canvas area; anything outside of the canvas area might not print. You should also use the rulers to determine the size of your piece; the selection arrow in the upper left hand corner can be used to both move and resize your design. [If you are unfamiliar with CorelDraw software, I would recommend viewing a basic tutorial]", "step_imgs": ["https://cdn.instructables.com/FR2/RQGE/HI3TYI5O/FR2RQGEHI3TYI5O.LARGE.jpg"], "step_title": "Step 13: Software Setup: Lining Up Your Piece"}, {"step": 14, "steps_text": "The Trotec printer is configured to etch anything in black or grey and to cut anything in RGB red. It will only cut lines that are set to \"hairline\" weight.\u00a0 To change the color and weight of your lines, begin by selecting a line that you would like to change. In my example, I want the outer rectangle to be cut out of the material but I want the rest of the design to be etched. I therefore select the outer rectangle. In the lower right hand corner of the window there should be a set of buttons (highlighted in the picture below). If you click on the lower of the two boxes, a menu like the one shown below should pop up. Click on the color box and select \"RGB Red\". Click on the width dropdown and select \"hairline\". Click the \"Ok\" button when you are done. Repeat this for any item you wish to cut out or change the width of.", "step_imgs": ["https://cdn.instructables.com/F66/A37S/HI3TYI5Q/F66A37SHI3TYI5Q.LARGE.jpg"], "step_title": "Step 14: Software Setup: Line Weight and Colors"}, {"step": 15, "steps_text": "When you are ready to cut out your piece, go to the File->Print menu option. In the printer dropdown, select \"Trotec Engraver\". Next click the \"Preferences\" button next to the Printer selection dropdown.", "step_imgs": ["https://cdn.instructables.com/FMS/8IRD/HI3TYI5S/FMS8IRDHI3TYI5S.LARGE.jpg"], "step_title": "Step 15: Software Setup: Sending Your File to Job Control (Part 1)"}, {"step": 16, "steps_text": "The Preferences menu will let us view the settings that are specific to the laser cutter.\u00a0 In the \"Size Settings\" section of the menu, specify the width and height of your material.\u00a0 In the \"Material Settings\" section, select the material type and subtype from the dropdown. I chose \"Plastic\" and \"Acrylic\". When you are finished, click on the button marked \"JC\". This will send the file, placement, and materials preferences to the laser cutter program called Job Control. Close out of this menu, press \"Apply\" and \"Print\" in the Print Menu, and switch over to the Job Control program. (If Job Control isn't open, open it manually.)", "step_imgs": ["https://cdn.instructables.com/FLE/1Z85/HI3TYI5T/FLE1Z85HI3TYI5T.LARGE.jpg"], "step_title": "Step 16: Software Setup: Sending Your File to Job Control (Part 2)"}, {"step": 17, "steps_text": "In Job Control, your image should show up as a grey rectangle on the screen. (If you would like to see your entire image, click on the eye icon highlighted below). If you do not see your job in the middle of the screen, select it from the Job menu to the right of the main window. If you still do not see it, try going back to Corel Draw and reapplying your preferences in the print menu.", "step_imgs": ["https://cdn.instructables.com/F3Y/7R2O/HI3TYI5U/F3Y7R2OHI3TYI5U.LARGE.jpg"], "step_title": "Step 17: Job Control: Placing Your Image"}, {"step": 18, "steps_text": "Using the four arrow keys on the control panel indicated earlier, move the laser head into position. You should see its position indicated by the crosshairs in Job Control. They should update their position as you move the laser head with the arrow keys. When you have the head in place, click and drag the rectangle to position it near the center of the crosshairs. It should snap to the center when you release the click. The rulers in this window correspond with the rulers on the edges of the laser cutting bed. In order to save space and to not waste material, use these rulers as guides to get your material and file lined up. My material is an irregular shape; I therefore positioned my file so that it wouldn't run off the edge of the material. When you are ready to print, click the \"Play\" button in the lower right hand corner.", "step_imgs": ["https://cdn.instructables.com/F0Q/ZR76/HI3TYI5V/F0QZR76HI3TYI5V.LARGE.jpg"], "step_title": "Step 18: Job Control: Printing Your Image"}, {"step": 19, "steps_text": "The laser cutter will now begin to trace your pattern on the raw material. While the laser is on, DO NOT LEAVE THE MACHINE UNATTENDED. It is not uncommon for the material to catch fire or for the material to behave in a way that you don't want it to. Remember, if something goes wrong, lift the top lid immediately to stop the cutting process. Be aware that after you do this, you cannot resume your cut and must start from scratch. Keep an eye on the cutting process. That being said, do not look straight at the laser beam. It can damage your vision. The cutting process can take anywhere from less than a minute to an hour or more. Often, you will need to do more than one pass on the laser cutter for the cut to go all the way through the material. If the design is intricate or the material demands a slower cut, be sure to allocate enough time for the cut to finish. Again, it is highly recommended that you test the laser settings on a piece of scrap material before you start a bigger project. The laser cutter should beep when it is done cutting. Lift the lid and pull out your material. Pop out any extra pieces cut out by the laser. You should also remove any remaining scrap material from the laser bed.", "step_imgs": ["https://cdn.instructables.com/FB3/RGI7/HI3TYI26/FB3RGI7HI3TYI26.LARGE.jpg"], "step_title": "Step 19: The Cutting Process: Waiting, Watching, and Material Removal"}, {"step": 20, "steps_text": "Here's the finished piece! It looks a bit like a futuristic business card.\u00a0 You may not have gotten the effect you wanted--it is common in laser cutting to not turn out the way you expected the first time. If lines are skipped in the cutting sequence or parts of your piece do not turn out quite right, adjust your settings in Corel Draw, Print Settings, or Job Control. It may take a few tries to get it right.\u00a0", "step_imgs": ["https://cdn.instructables.com/FVK/3QI7/HI3TYI2A/FVK3QI7HI3TYI2A.LARGE.jpg"], "step_title": "Step 20: Tada!"}], "channel": "Laser Cutting"}, {"category": "technology", "description": "Long story short: I needed to sample an analog signal with as many bits and samples per second as possible but without breaking the bank. I also needed the sampled data to be stored on my PC.In this instructable I will show you how to do just that for less than $10 per one DAQ unit.If you want to know more WHY I built this, check out my GitHub page about the Meteor Radiometer project.", "title": "Arduino 16-bit 500SPS Dual Channel DAQ", "url": "https://www.instructables.com/id/Arduino-16-bit-500SPS-Dual-Channel-DAQ/", "section": "technology", "steps": [{"step": 1, "steps_text": "These are the parts we'll need. I have provided the links for the cheapest ones I could find (which I bought and they work!).Parts (from ebay):Arduino UNO clone: LINKArduino UNO ProtoShield: LINK (note: if you buy one from another retailer, be sure it looks exactly like the one on the image!)AD7705 analog-to-digital converter board: LINKScrew terminals: LINKA few pieces of wire (I sacrificed one Dupont wire, its nice and thin)Equipment:MultimeterSoldering ironSolderPliers, a small screwdriver", "step_imgs": ["https://cdn.instructables.com/FTA/S0KA/IFR689S8/FTAS0KAIFR689S8.LARGE.jpg"], "step_title": "Step 1: Parts & Equipment"}, {"step": 2, "steps_text": "This ADC board is great because you can sample an analog signal with 16 bits at 500 samples per second! It also has a built-in gain control, filters, etc. But first we need to properly connect it.The ADC board comes with yellow piece of 4 pin headers which needs to be soldered to the ADC board as well as the ProtoShield.Take the ProtoShield and put it's top side up (the side with female pin headers). Place the yellow pin header as indicated on the first image. It is important to position it in the right spot - one row below the top row of ProtoShield pin holes, and such that the columns it is covering are without any markings.The pins on the yellow piece are of 2 different lengths with respect to the yellow plastic. Make sure that the shorter pins are on top.Put the ADC board on the ProtoShield - align holes on the ADC board with pins from the yellow pin header.Solder the pinsTurn the ProtoShield upside down and solder the ADC board to the ProtoShield", "step_imgs": ["https://cdn.instructables.com/F32/0WOS/IFR689TO/F320WOSIFR689TO.LARGE.jpg", "https://cdn.instructables.com/FU7/GA68/IFR689VJ/FU7GA68IFR689VJ.LARGE.jpg", "https://cdn.instructables.com/F4R/0Q08/IFR689W9/F4R0Q08IFR689W9.LARGE.jpg", "https://cdn.instructables.com/FIU/GQVZ/IFR689WA/FIUGQVZIFR689WA.LARGE.jpg", "https://cdn.instructables.com/F2N/N39N/IFR689WZ/F2NN39NIFR689WZ.LARGE.jpg"], "step_title": "Step 2: Soldering the ADC Board to the ProtoShield"}, {"step": 3, "steps_text": "To somehow connect your source of signal to the DAQ board, you need a few screw terminals.Use a marker to draw the path were we will run our signal lines from the board to the screw terminals. Draw the lines as they are shown on the first image. This will help us during soldering. Notice that there are also 2 lines connecting the VCC and GND from the ProtoShield to the ADC board!Turn the ProtoShield to its top side and place the screw terminals as it is shown on the second image. Be sure that the inputs of the terminal (big holes) are facing outward. The third image shows the bottom side of the ProtoShield with screw terminals in place.Solder the terminals.", "step_imgs": ["https://cdn.instructables.com/F0R/47DM/IFR689X2/F0R47DMIFR689X2.LARGE.jpg", "https://cdn.instructables.com/FJ3/6S23/IFR689XS/FJ36S23IFR689XS.LARGE.jpg", "https://cdn.instructables.com/FMI/WRC7/IFR689XT/FMIWRC7IFR689XT.LARGE.jpg", "https://cdn.instructables.com/F4A/Y9EF/IFR689YI/F4AY9EFIFR689YI.LARGE.jpg"], "step_title": "Step 3: Soldering Screw Terminals"}, {"step": 4, "steps_text": "Now the hard... ahem... \"fun\" part. We need to connect the pins of the ADC to the pins of the screw terminals. We can do this using some wires, but I have chosen to do this with solder. So take some solder (in form of a thin wire), solder one end to the ADC pin (hold the solder wire on the little ball of solder until it cools), then align the wire with the black marker line we drew. Cut the solder with the soldering iron and solder the free end to the screw terminal pin.You will notice that you'll have to make a 90 deg angle turn on the second pin. I recommend you first make a small ball of solder on every 90 degree turn point and solder it from one point to the other. Once you finish soldering the second pin, you should have it looking like mine (second image).Testing time! Now to see if we did a proper job soldering. Use your multimeter in the \u2018Continuity\u2019 mode (it should produce a sound when you touch the two probes together). Check if there is a connection between the AIN2+ pin and the left input of the screw terminal unit at the right. Now check if there is a connection between the AIN2- pin and the right input of the screw terminal unit at the right. Finally, make sure there is NO connection between those two pins. If there IS a connection, you must find where the two solders are touching and remove that piece of solder.If you did things right, I recommend you use your marker to write on the screw terminal which input is which (fourth image).", "step_imgs": ["https://cdn.instructables.com/FN3/7ZCJ/IFR689YK/FN37ZCJIFR689YK.LARGE.jpg", "https://cdn.instructables.com/F42/I333/IFR689ZB/F42I333IFR689ZB.LARGE.jpg", "https://cdn.instructables.com/F6D/VPBF/IFR68A00/F6DVPBFIFR68A00.LARGE.jpg", "https://cdn.instructables.com/FU6/ZNNW/IFR68A01/FU6ZNNWIFR68A01.LARGE.jpg"], "step_title": "Step 4: Soldering Signal Lines 1"}, {"step": 5, "steps_text": "Do the same thing for the AIN1 terminal. This one can be a bit tricky as it has more 90 degree turns.Take a look at the first image how I put little drops of solder on the 90 degree turn points. This will help you align the wires.When you are done, test the pins as you did in the previous step. NOTE: Do not be alarmed if the AIN1- and AIN2- are connected, it's fine. They are all connected to the GND.Finally, write the AIN1+ and AIN1- in the screw terminal and you are good to go!", "step_imgs": ["https://cdn.instructables.com/FZM/VZ57/IFR68A0V/FZMVZ57IFR68A0V.LARGE.jpg", "https://cdn.instructables.com/F26/H4XH/IFR68A0W/F26H4XHIFR68A0W.LARGE.jpg", "https://cdn.instructables.com/F1I/5NPH/IFR68A1N/F1I5NPHIFR68A1N.LARGE.jpg"], "step_title": "Step 5: Soldering Signal Lines 2"}, {"step": 6, "steps_text": "Before we set out soldering with real wires, we need to connect the ADC board to power lines. There are two: GND and VCC (i.e. +5V). The good thing about this ProtoShield is that it has them available quite close to our ADC power pins.See the first image and solder the power pins.Finally, test if they are properly connected.", "step_imgs": ["https://cdn.instructables.com/FXR/QTRN/IFR68A1O/FXRQTRNIFR68A1O.LARGE.jpg", "https://cdn.instructables.com/F5C/GOLS/IFR68A3T/F5CGOLSIFR68A3T.LARGE.jpg"], "step_title": "Step 6: Soldering GND and VCC"}, {"step": 7, "steps_text": "ADC needs to talk with Arduino somehow. I won't get into details how they actually talk (you can read about it on Wikipedia), I'll just show you what you need to solder.We'll need to solder 4 ADC pins to 4 ProtoShield pins:Pin 10 to CSPin 11 to DINPin 12 to DOUTPin 13 to SCKThere is a little legend on the ADC board to show you which ADC pin is which. When you turn the board on the other side it's a bit difficult to know. I have attached images to help you with soldering.Notice when I'm soldering CS and DIN: I have first soldered a wire to CS and a wire to Pin 11, and then soldered them to their respective pins. This is useful as it allows you to solder with one side free, instead of soldering between 2 pins.Finally, test that you have correctly soldered everything.", "step_imgs": ["https://cdn.instructables.com/F4V/P98O/IFR68A4K/F4VP98OIFR68A4K.LARGE.jpg", "https://cdn.instructables.com/FHY/VFK6/IFR68A4L/FHYVFK6IFR68A4L.LARGE.jpg", "https://cdn.instructables.com/FPZ/TTXR/IFR68A5B/FPZTTXRIFR68A5B.LARGE.jpg", "https://cdn.instructables.com/F7Y/OSQ3/IFR68A5E/F7YOSQ3IFR68A5E.LARGE.jpg", "https://cdn.instructables.com/FCC/U550/IFR68A67/FCCU550IFR68A67.LARGE.jpg", "https://cdn.instructables.com/F4Y/S4QW/IFR68A6W/F4YS4QWIFR68A6W.LARGE.jpg", "https://cdn.instructables.com/FMA/5NUY/IFR68A71/FMA5NUYIFR68A71.LARGE.jpg", "https://cdn.instructables.com/FWH/K01O/IFR68A8I/FWHK01OIFR68A8I.LARGE.jpg"], "step_title": "Step 7: Soldering ADC Communication Lines"}, {"step": 8, "steps_text": "If you did everything right, you should have your DAQ shield ready for a real test. Connect the shield with the Arduino.", "step_imgs": ["https://cdn.instructables.com/FOU/6SPP/IFR68A8N/FOU6SPPIFR68A8N.LARGE.jpg"], "step_title": "Step 8: Hardware Done!"}, {"step": 9, "steps_text": "To test the DAQ shield, I have decided to use a simple potentiometer.A potentiometer has 3 pins - connect the leftmost to +5V, the rightmost to GND and the middle to the AIN1+ on the DAQ shield.Connect the Arduino to your PC with an USB cable.OPTIONAL: If you still don't have the Arduino drivers installed and can't find them for your Arduino 340P clone (i.e. the one I recommended), see this LINK.Several things can happen when you connect the Arduino to your PC:a) absolutely nothingb) Arduino and/or DAQ shield release a puff of blue smokec) Arduino and/or DAQ shield catches fireIf nothing happens, you may be on the road to success. This would mean the drivers are properly installed and you have soldered everything right. There is an off chance something is not properly connected - but you should have caught that if you did the testing as you were supposed to.Now, regarding b) and c): depending on the severity of your situation, you should probably buy new parts and start from scratch. Or in extreme cases, contact your local fire department.", "step_imgs": ["https://cdn.instructables.com/FZN/FI3V/IFR68AA0/FZNFI3VIFR68AA0.LARGE.jpg", "https://cdn.instructables.com/FOH/ZOWZ/IFR68AA5/FOHZOWZIFR68AA5.LARGE.jpg"], "step_title": "Step 9: Preparing the Test"}, {"step": 10, "steps_text": "I will presume a basic knowledge of using the Arduino platform. If this is the first time you are working with Arduino, you will surely find this instructable very helpful.To use the DAQ shield with my software, you will need to install a few software packages.For using the Arduino:Arduino IDE - most likely you are running Windows, so download the Windows Installer and install itmodified AD770X libraryThanks to Kerry D. Wong, we have a functional library for using the AD7705 ADC board with Arduino. I have slightly modified this library to use 500 samples per second and you have it attached to this post.Download the AD770X.zip and unpack itCopy the unpacked folder to My Documents/Arduino/LibrariesDownload this file: LINKUnpack it and open the file: MeteorRadiometer-master\\Arduino\\MeteorRadiometerArduino\\MeteorRadiometerArduino.inoUpload this Arduino sketch to your Arduino device.Make note on which COM port your Arduino is connected on (e.g. COM4).You are just one step away from sampling the potentiometer signal!Extra:If you take a look at the Arduino sketch you uploaded, you will notice that when it starts sending the data to PC via serial, it also turns the digital pin 8 on. I used this to control a relay. Currently it has no purpose, but maybe you have some idea what to use it for. Pin 8 is turned off when the DAQ stops recording.", "step_imgs": ["https://cdn.instructables.com/FQY/J802/IFSJJ4TI/FQYJ802IFSJJ4TI.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 10: Installing Arduino Software and AD770X Library"}, {"step": 11, "steps_text": "To use the DAQ shield you will need to have Python installed (+ a few Python libraries).Here is the complete list:Python 2.7Python libraries:MatplotlibNumpyScipyPySerialInstalling Python + libraries:To easily install everything you need, download and install Anaconda Python 2.7. That's it, you're done.If you already have Python installed, but not the Anaconda version, I would recommend you google how to install any libraries you may be missing.Extra:I don't like Python's original IDLE. Some people prefer to code in Eclipse, but I find it too cumbersome. So I use Sublime. It's lightweight and has everything I need.", "step_imgs": ["https://cdn.instructables.com/FLR/SQ41/IFSJJ8WA/FLRSQ41IFSJJ8WA.LARGE.jpg"], "step_title": "Step 11: Installing Python and Additional Libraries"}, {"step": 12, "steps_text": "It's time for a final test.Here's what to do:Download the ZIP file in the attachment.Unpack it and open the readArduino.py file for editing.Locate this line of code:ser = serial.Serial('COM4', 115200) Remember the COM port of your Arduino? My COM port is COM4. Modify the previous line accordingly if yours is different.Run the script! (F5 is using Python IDLE of Ctrl+B if you are using Sublime)Start turning the potentiometer randomly.It will run for 10 seconds and at the end it will show you how the input signal changed on a graph!Bravo, you did it, it works!", "step_imgs": ["https://cdn.instructables.com/FEU/5OOB/IFSJJDXZ/FEU5OOBIFSJJDXZ.LARGE.jpg", "https://cdn.instructables.com/FMD/PHTN/IFR68ABO/FMDPHTNIFR68ABO.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 12: Start Sampling!"}, {"step": 13, "steps_text": "OK, let's say you got the DAQ working and you hooked it up to a signal source of your preference.It fun to see the signal you just captured, but what if you want to record for a longer period of time and leave the DAQ unattended?Recording:Take a look at the ZIP file from the previous step. There is a file called radiometerRecord.py. In that file there are several important lines of code to modify:# Record duration in hours \nrecord_duration = 8 #hrs \n\n# Duration of a single time block in seconds \ndata_block_time = 10.24 #s\nWith record_duration you define how many hours you want the DAQ to record. It will store the data to a CSV file, and every data point will be time stamped. With data_block_time you define how many samples will be in one CSV file. E.g. you want one file per minute then you define data_block_time to be 60.Run the script and start recording!Plotting the data:So you got yourself some CSV files that were recorded by the radiometerRecord.py script and you want to see what was actually recorded. This is where the radiometerPlot.py script comes in. It plots the data from the CSV files and stores the results as PNG images.It has several important lines of code that will have to be modified:# Where are the CSV files relative to the scriptcsv_directory = '2015082223 Pula' \n\n# Directory where to output the plots\nplot_dir = 'plots' So after the recording you transferred the CSV files to some folder (e.g. 'test1'). You must tell the plotting script where to look for those CSV files by using the csv_directory variable (e.g. csv_directory = 'test1').In what folder do you want the script to plot the results in? Use the plot_dir variable to tell it, although you can just leave the default value 'plots'.Run the script and you should have your data plotted!", "step_imgs": ["https://cdn.instructables.com/F4F/8FJ8/IFSJJR2T/F4F8FJ8IFSJJR2T.LARGE.jpg"], "step_title": "Step 13: Recording and Plotting"}, {"step": 14, "steps_text": "Maybe you won't need such big sampling rate or your signal is very weak and you need to amplify it. In those cases, you will have to modify the  AD770X library and re-upload that Arduino sketch.Open the AD770x.cpp in My Documents/Arduino/Libraries/AD770X. There is a piece of code at the bottom of the file:void AD770X::init(byte channel) {<br>    init(channel, CLK_DIV_1, BIPOLAR, GAIN_1, UPDATE_RATE_500);\n}To modify the number of samples per second, you have to change the UPDATE_RATE_500 constant. Here's what options are available:UPDATE_RATE_20UPDATE_RATE_25UPDATE_RATE_50UPDATE_RATE_60UPDATE_RATE_100UPDATE_RATE_200UPDATE_RATE_250UPDATE_RATE_500If you need to modify the gain, here are the options:GAIN_1GAIN_2GAIN_4GAIN_8GAIN_16GAIN_32GAIN_64GAIN_128When you are done modifying, save the  AD770x.cpp file and re-upload that Arduino sketch.IMPORTANT:The DAQ is currently only using the AIN1 input. If you want to use the AIN2, you will have to modify both the Arduino sketch and the Python scripts!", "step_imgs": [], "step_title": "Step 14: Modifying Sampling Rate and Gain"}, {"step": 15, "steps_text": "That's it, thank you for reading my instructable! I have been following this site for more than 9 years now (I remember the good ol' Weekend Builder newsletter) and have finally decided to make one instructable.There are perhaps some details I have unintentionally left out, so feel free to ask questions in the comments!", "step_imgs": [], "step_title": "Step 15: Final Thoughts"}], "channel": "Arduino"}, {"category": "technology", "description": "Logic analyzers are used to record and analyze digital communication signals. They work in a similar manner to an Oscilloscope, but the data is processed and displayed with additional data that is calculated by the software to help with this analysis. With the Analog Discovery 2 and Waveforms 2015, you can record and decipher most types of digital communication signals.For this Instructable you will need:-chipKIT microcontroller-Arduino IDE with Digilent core installed- Pmod with serial communication. This could be SPI, UART, or I2C. I will be using the Pmod CLS, a 2X16 LCD display.- USB cable-Analog Discovery 2*-Waveforms 2015 software- a computer with USB port to run the software*You may also use the original Analog Discovery or the Electronics Explorer Board with Waveforms 2015. There are some slight differences in functionality between the AD1, AD2, and EEBoard, but nothing that will prevent you from following along if you have one of the other tools.", "title": "Using the Logic Analyzer With the Analog Discovery 2", "url": "https://www.instructables.com/id/Using-the-Logic-Analyzer-With-the-Analog-Discovery/", "section": "technology", "steps": [{"step": 1, "steps_text": "If you want some help getting your AD2 set up and calibrated, or installing Waveforms 2015, check out this quick start I'ble collection.Once you have your AD2 and Waveforms 2015 all set up, open the Logic Analyzer by clicking on the \"Logic\" button.This will open the Logic Analyzer window.Along the top you'll see the \"File\", \"Control\", \"View\", and \"Window\" options.Under \"File\" you'll see several options.You can add a new instance of the logic analyzer, either by cloning the current analyzer settings or opening an empty instance with default settings. You can also \"Save\" the current logic analyzer settings, or \"Open\" a previously saved project. \"Export\" lets you save the current logic analyzer plot data, either as an image of the window in most common formats, e.g. *.bmp, *.jpg, *.tif, etc., or as a data file with the plot window information in either *.csv, *.txt, or *.tdms formats. \"Close Logic\" will close the logic analyzer window. This will not clear the current settings as long as you don't close Waveforms 2015 completely. Just click on the \"Logic\" button again and the window will pop back open with all of the same settings.Under \"Control\", you have access to the tool's Single, Run, and Stop acquisition commands.\"View\" opens different windows to let you view and analyze the captured data.\"Data\" shows a table with 2048 data samples from the current plot. Changing the plot Base value in the upper right corner will change the amount of time between data samples, but the tool will automatically divide the plot into 2048 samples and record the data in this table.\"Events\" displays a table of all state change events currently view-able in the plot window. Options are available to change between different signals or busses under observation and to filter results based on various conditions.\"Logging\" allows you to export the data as a .csv file. Several options are available for choosing when to save the file, which acquisition is exported, and what data within each acquisition is saved.\"Cursors\" allows you to add cursors to the plot window much like you can for several other Waveforms tools. You can make the cursors independent of each other, or link them together so that changing one cursor changes all of its dependent cursors.\"Window\" lets you switch between the Help window, the Waveforms 2015 welcome window, or any tool windows currently open.Next you'll see the logic analyzer controls.\"Single\" allows you to capture one window worth of data. To capture more data, adjust the time base of the plot window.\"Run\" will start the tool for continuous acquisition. This button becomes \"Stop\" once the tool is running.The \"Mode\" box lets you change how the data is displayed in the plot window, either one full plot at a time, real-time that wraps around once the end is reached, real-time side-scrolling, or you can record data. The example project will utilize the record function, so stay tuned for that.The Logic Analyzer uses the computer memory to store past data acquisitions in a buffer.  keeps a running tally of which buffer you are currently using. Clicking  lets you save the currently shown acquisition data to a new tab. The name of the tab can be edited by double clicking the tab header.You can trigger the Logic Analyzer several different ways by clicking the \"Trigger\" box.\"Auto\" is selected by default. The tool will wait approximately 2 seconds once started. If no trigger is detected, acquisition will start automatically. \"Normal\" will place the tool in \"Armed\" mode once started. The tool will wait indefinitely for the determined trigger condition, at which point acquisition begins. \"None\" will ignore trigger settings and immediately start acquiring data once the tool is started.You can set the source of your trigger by clicking the \"Source\" box.\"Digital\", \"Scope\", \"Wavegen 1\", \"Wavegen 2\", and \"Patterns\" refer to the Static I/O, Oscilloscope, Waveform Generator, and Pattern Generator tools of the AD2, respectively. The \"Manual\" trigger option in the drop-down menu refers to the  button at the bottom left of the Waveforms window. \"External 1\" and \"External 2\" correspond to the trigger pins T1 and T2, respectively, on the AD2's 30-pin header and allow you to connect any other external trigger source you wish.Once you have your trigger source selected, it's time to choose how you want the acquisition triggered.  is already selected and is the default method the tool uses to trigger acquisition. The trigger condition is set in the grid below. How to set specific trigger conditions for each protocol will be covered on the next steps.Clicking  opens the pulse configuration window. Use this method to detect different types or quantities of pulses as triggers.The \"Glitch\" tab is selected by default and triggers the acquisition when a signal pulse shorter than the specified time is registered.\"Timeout\" triggers the acquisition when a signal pulse longer than the specified time is registered.\"Length\" triggers the acquisition when a signal pulse of exact length with the given hysteresis is registered.\"Counter\" looks for a set number of specified edges before starting acquisition.The  button drops down a menu to select a protocol-based trigger. Only the protocols you have previously defined in the grid below will appear. Details for adding specific protocol signals to the grid, as well as how to set protocol specific triggers, are covered in the following steps.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 1: The Logic Analyzer"}, {"step": 2, "steps_text": "The next section is the grid itself.Click  to open a menu where you can select which type of data protocol you would like to analyze. Details on each choice are a bit farther down in this step. For our example, we will be analyzing a UART signal.Click  to delete a selected protocol, or click  to clear the entire grid. You can also press the delete key on your keyboard to delete a selected protocol. opens the properties editor for whichever protocol channel is selected in the grid. This is the same window that opens when you first select a protocol to add to the grid. drops down the basic trigger settings. You have to have  selected and also have a specific DIO channel selected within the protocol being analyzed to use this menu. You can choose \"X\" to ignore this channel, \"L\" to trigger when the signal is low, \"H\" to trigger when the signal is high, \"R\" to trigger when the signal rises from low to high, \"F\" to trigger when the signal falls from high to low, or \"E\" to trigger on any falling or rising edge. These settings can be set accessed in multiple ways, and most protocols have their own specific trigger settings utilizing a trigger wizard, so if you don't see what you want here, keep reading.Use the scroll bar  above the plot window to move the data window left/right once the data has been captured. Click on the arrows to change the position by a base span and double click to set the leftmost or rightmost position. Double click on the scroll area to reset the time to show the entire acquisition.Below the scroll bar and to the left is the acquisition state indicator . It's simply a visual indicator of the tool state, showing information such as whether the trigger is armed and ready or whether the tool is done collecting data. To the right of that you'll see a print out of the number of samples, sample rate, and time of acquisition for the last acquisition captured. The data displayed here will also change to display data specific to each protocol as you move your mouse cursor over the data captured in each channel in the plot window below.To the far right of the screen you have for buttons, three for hot tracking data in the plot window  and one to change plot window settings . Hot track is explained a bit later with the demonstration example. From the plot window settings you can adjust the plot background color between \"light\" (white), \"dark\" (black), or \"default\" (dark gray). You can adjust the size, from 1-4 point, of the data plotted. You can also adjust and reset where the analyzer starts interpreting the captured data. This can also be accomplished by simply right clicking on the plot where you want to begin analyzing and selecting \"Start from here\". All previous data will be ignored and the remaining data will be interpreted accordingly. The following two images illustrate this with a UART signal.Original UART data captured. Notice how the data 8-bit data packets are clearly interpreted and displayed above as both hexadecimal (h1B, h5B, h6A, h1B, h5B) and ASCII characters (\"ESC\", \"[\", \"j\", \"ESC\", \"[\").Now telling the tool to adjust where to start reading the UART data, beginning where it \"sees\" a UART Start bit. Notice how the data displays incorrectly, missing one packet entirely and complaining of framing errors and skipping some bits. But by the fifth packet (second \"[\") the tool had zeroed in on the correct UART sequence of bits and was able to decipher the remaining data correctly.SignalNow let's add protocols to the grid. By clicking  you can add several different protocols to the grid.Be aware that you can assign DIO channels to multiple protocols, i.e. you can use DIO 0 to watch your UART data signal as well as your I2C SCL signal. Notice the * in the colored box in the IO column to indicate that the DIO is doubled up.Whatever data is captured will be displayed wherever that particular DIO is assigned. Luckily you have 16 DIO pins (32 with the EEBoard), so you should have no problem spacing out your protocols across the pins. Try and avoid doubling up if you can help it.The first protocol in the list is Signal. Note that selecting any protocol will first open a small property editor window.Select one or multiple signals using the \"Shift\" and/or \"Ctrl\" keys on your keyboard. Once you have your channels selected, click  to add the selected signals to the grid.You can edit each channel by double clicking it on the grid, or clicking either edit button, in the grid next to the signal name  or above the grid . For Signal, the only thing you can edit is the name of the channel. You can change the trigger condition from the grid by clicking on the symbol in the \"T\" column. \"X\" is set by default, but the same options described above apply here as well.BusThe next protocol option is \"Bus\".Select the channels you want to use for your bus in the left table. Click  to add them to the table on the right. Remove any channel from the right hand side by selecting it and clicking . Clicking  or  with a channel selected allows you to change the order of the channels in the bus. selects an optional enable pin and polarity. selects the optional clock pin and sampling edge. allows you to choose the numerical format for how the interpreted data is displayed. There are a number of formats to choose from. sets how the data is interpreted, either MSB first or LSB first. and  set the values for the first and last indices. The minimum for LSB is -32 and the maximum for MSB is +31. Changing either will change both, maintaining a separation difference equal to the number of channels assigned to the bus. This tool works like bit shifting the interpreted data, adjusting up/down the max/min values interpreted by the bus by a factor of 2 with each increase/decrease of the indices.You can set the trigger for the bus by setting the trigger value for each channel in the \"T\" column.The tool will only trigger when all conditions for each channel have been met.To enable the protocol trigger wizard, click on the blank box at the top of the \"T\" column, next to the protocol name. will appear in the \"T\" column. Click on it to open the trigger wizard.With this wizard you can set the trigger condition to look for a specific set of bits, corresponding to the decimal value entered in the box.SPINext on the list of protocols is Serial Peripheral Interface, or SPI, which is used extensively in embedded applications for synchronous serial communication.Set the  for your SPI.Assign a DIO to  to watch the slave select signal and set the  status as high or low.Set a second DIO to watch the  clock signal and set it to  on either the clock rising or falling edge.Set a third DIO to watch the  signal (either MISO or MOSI) and set whether the  bit in the data packet is the MSB or LSB. lets you set the bit size of your data packet (1-32 bits). allows you to choose the numerical format for how the interpreted data is displayed. There are a number of formats to choose from. lets you set how many leading bits should be skipped when calculating the data value. Similarly,  sets how many trailing bits should be skipped when calculating the data value.Using  you can delay the start of acquisition with respect to the first sample.Once you have your SPI defined, click  to add it to the grid. Once there, you can edit the SPI properties by double-clicking any of the SPI channels, or by clicking either  or .To enable the protocol trigger wizard, click on the blank box at the top of the \"T\" column, next to the protocol name. will appear in the \"T\" column. Click on it to open the trigger wizard.You can set it to  on SPI start, SPI Stop, or when a specific Value appears in the data packet. If you choose Value, define what value to look for in the  box.I2CThe next protocol on the list is Inter-Intergrated Circuit, or I2C. This protocol is also known as Two-Wire Interface, or TWI. Like SPI, I2C is also used extensively in embedded systems communication.As the alternate name Two-Wire Interface implies, I2C only uses two wires, so the protocol is really easy to set up. Define the  of the protocol and set the  and  channels.Once you have your I2C defined, click  to add the protocol to the grid. Once there, you can edit the I2C properties by double-clicking any of the I2C channels, or by clicking either  or .To enable the protocol trigger wizard, click on the blank box at the top of the \"T\" column, next to the protocol name. will appear in the \"T\" column. Click on it to open the trigger wizard.The default  setting is to trigger once the I2C signal starts. But you can choose from several other options as well.\"Start\" and \"Stop\" have no additional settings to define.\"Any ACK/NAK\" will trigger acquisition on an ACKnowledge or Not AcKnowledge signal. You can also set the option to Ignore any ACK/NAK signal.\"Address & Data\" makes use of all options in the trigger wizard. can be set to look for a specific peripheral device address. Valid address values are between h00 and h7F.Set  to trigger when reading or writing data to/from the device at the specified address, or set to ignore.Set  and  to look for specific bytes in the data packet.All three  options look for the ACK or NAK data with the specified option. These can also be set to ignore the ACK/NAK data.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 2: The Grid (part I)"}, {"step": 3, "steps_text": "UARTNext is Universal Asynchronous Receiver/Transmitter, or UART. If you are familiar with microcontrollers in either the chipKIT or Arduino families, the Serial library uses UART to transmit/receive data.Name the UART protocol whatever you want in the  box.Set the AD2 DIO pin with  to monitor the data being sent or received. You can only monitor either the TX or RX line with one instance of UART with the Logic Analyzer. If you need or want to monitor both TX and RX at the same time, simply add another instance of UART to the grid, assigning the second data line to the second instance. allows you to select between standard and inverted signal polarity.Define how many bits are in your data packet with . You have a range of 1-32 bits for the data packet size. is defined as Odd, Even, Mark, or Space depending on the settings of the signal under observation. Select None if no parity bit is used. lets you define how many stop bits are present in the signal. The default baud rate is set at 9600, but set  to \"Manual\" to manually set the  to a different setting.Set a delay in data interpretation using . The interpreter will not begin until that much time has passed with respect to the first sample.Once you have your UART defined, click  to add it to the grid.To edit the UART protocol, double click the Data channel in the grid or click on either  in the grid or  above the grid. Make the appropriate edits, then click  to return to the grid.To enable the protocol trigger wizard, click on the blank box at the top of the \"T\" column, next to the protocol name. will appear in the \"T\" column. Click on it to open the trigger wizard.You can set the tool to trigger on Break, Idle, or a Value. If Value is chosen, enter the value of the data packet in the  box. Click  to return to the grid.CANNext is Controlled Area Network, or CAN, which is used in automotive and robotic applications to communicate with all of the peripheral devices on one main bus.Name the CAN protocol whatever you want in the  box.Set the AD2 DIO pin with  to monitor the data.Set the  to either High or Low.Adjust  to whatever rate you have your signal set at.Set a delay in data interpretation using . The interpreter will not begin until that much time has passed with respect to the first sample.Once you have your CAN defined, click  to add it to the grid.To edit the CAN protocol, double click the Data channel in the grid or click on either  in the grid or  above the grid. Make the appropriate edits, then click  to return to the grid.To enable the protocol trigger wizard, click on the blank box at the top of the \"T\" column, next to the protocol name. will appear in the \"T\" column. Click on it to open the trigger wizard.You can set the  to Error, Break, or Identifier. The remaining fields only apply if Identifier is selected as the trigger.Choose between 11-bit or 29-bit identifier in the  box.Define the identifier value in the  box.In the  select between Data and Remote request types. You can select Ignore if you wish to ignore requests.In the  you can define the data section byte length, or choose to ignore this field.Once the CAN trigger is defined, click  to return to the grid.I2SNext is Inter-IC Sound, or I2S, which was designed to transmit digital audio data. It is not related to the I2C protocol, so be sure not to confuse the two.Set the name of your protocol in the  box. sets the DIO pin to monitor the Word Select line.  determines which channel, left or right, is active when Select is low. sets the DIO pin to monitor the Wlock line. Set  to determine which edge of the clock, rising or falling, is the sample edge. allows you to set whether the data bits are shifted with respect to the clock signal. sets the DIO pin to monitor the Data line. Use  to set whether the first bit in the data packet is MSB or LSB.  lets you set whether the data packet is right or left aligned with respect to the data frame edges.Set the size, in bits, of the data packet in the  box. Values can range from 1 to 32 bits. determines which numerical format to use to display the interpreted data on the plot.Once you have your I2S defined, click  to add it to the grid.To edit the I2S  protocol, double click any I2S  channel in the grid or click on either  in the grid or  above the grid. Make the appropriate edits, then click  to return to the grid.To enable the protocol trigger wizard, click on the blank box at the top of the \"T\" column, next to the protocol name. will appear in the \"T\" column. Click on it to open the trigger wizard.Set the , right or left, to use as the trigger source.Set a specific watch value in the  box. You can also ignore data packets if you wish. The value range corresponds to the number of bits defined in the data packet in the properties window.Use  to specify clock cycles in a frame. This is independent of data packet size and can range from 0-128.Once the I2S trigger is defined, click  to return to the grid.1-WireThe last actual protocol on the list is 1-Wire, which is similar in concept to I2C, but with lower data rates and longer range.Set the name of your protocol in the  box. sets the DIO pin to monitor the Data line. allows you to select between low and high polarity signaling.Once you have your 1-Wire channel defined, click  to add it to the grid.To edit the 1-Wire protocol, double click the data channel in the grid or click on either  in the grid or  above the grid. Make the appropriate edits, then click  to return to the grid.To enable the protocol trigger wizard, click on the blank box at the top of the \"T\" column, next to the protocol name. will appear in the \"T\" column. Click on it to open the trigger wizard.You can set  to \"Reset\" to trigger on a reset command, or \"Value\" to trigger on a specific value. The remaining options are only accessible if \"Value\" is set as the trigger condition.Set  to either standard or overdrive.Define the  to trigger on which to trigger acquisition, or choose to ignore this option.In the  field, define the family value on which to trigger acquisition, or choose to ignore this option.Once the 1-Wire trigger is defined, click  to return to the grid.CustomWhile not technically a protocol, the last option in the list is Custom, which lets you define your own protocol interpreter.Waveforms is coded using JavaScript. Utilizing the SDK that downloads with Waveforms, custom applications can be built and included with your own installed version of the Waveforms application. For more on that, see the SDK PDF that downloads with Waveforms 2015 and the Waveforms reference manual.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 3: The Grid (part II)"}, {"step": 4, "steps_text": "I've talked about showing an example several times now, so let's get to that.The Pmod CLS is a great device to use for this example because you can communicate with it using SPI, UART, or I2C. For this example I'll use UART, and from the reference manual I know that with CLS Revision E (, found on the underside of the PCB), I need to set the communication selection jumpers like so:There are two 6-pin Pmod headers on the CLS, J1 and J2. The silkscreen on the bottom shows the different communication protocol connections.Since I'm using UART, I will need to use the RX pin on J2. I won't be expecting to receive data from the CLS, so the TX pin doesn't need to be connected. Also on J2 are the SCL and SDA pins for I2C communication. Use J1 for SPI communication. Both J1 and J2 have 2 power (V and G) pins for powering the Pmod CLSUsing a 6-pin MTE cable, connect the CLS to the ChipKIT board. The image shows a uC32.Be sure to connect the RX pin on the CLS to the TX pin (1) on the uC32.The CLS has a number of commands in the user guide that can be used for some basic set up. Once that is done, you can start sending text to it. The following code is a very simple example of this.// ASCII values are in HEX, but can be converted to chars by typing a single apostrophe (')\n// before and after the char, e.g. '['. Note that 'ESC' won't work.\nbyte setup_display[] = {0x1B, 0x5B, 0x6A, 0x1B, 0x5B, 0x30, 0x68, 0x1B, 0x5B, 0x32, 0x63};\n                      // ESC,   [,    j,   ESC,   [,   0,     h,   ESC,   [,    2,    c\nbyte clear_display[] = {0x1B, 0x5B, 0x6A};\n                      // ESC,   [,    j\nvoid setup() {\n  Serial.begin(9600);\n  while(!Serial){};\n  Serial.write(setup_display, 11);\n  Serial.write(\"Hello World. How are you today?\");\n  delay(1000);\n  Serial.write(clear_display, 3);\n  Serial.write(\"I'm fine, thank you.\");\n}\nvoid loop() {}\nDownload the code to the uC32 and the messages should display on the LCD.Utilizing a mini grabber test clip, you can piggyback on the uC32 TX signal to analyze it with the Logic Analyzer. Be sure to also connect one of the AD2 GND wires to a GND pin on the uC32.Set up a UART protocol interpreter with the Logic Analyzer tool. The default property settings will work fine here. Click on the \"X\" in the trigger column and select \"Fall.\"The UART data line holds logic high when not in use. The start bit of the data frame is indicated by dropping the line to logic low, so we know that we are about to get a data packet when the line goes low and the tool will trigger on that first falling edge.In the  box, select Normal so that the tool will wait for the trigger and not automatically begin acquiring data.At the top right of the plot window, enter 4.5 ms in the  box. This will center the plot at 4.5 ms, shifting 0 ms to the left to allow us to see more data.Click  and the tool will wait for the trigger condition to be met, indicated by the status indicator . Reset the microcontroller to begin sending serial data on the TX line. The tool will trigger and acquire 9.5 ms of data.We can see that the analyzer correctly interpreted the data packets and the hex value along with the ASCII character is displayed along the top.The only problem is that we know that we sent a lot more bytes of data than the 9 we can see in the plot. Using the record function, we can capture the entire data stream. Let's look at that.Select Record from the  box. The plot will likely resize, but don't worry the data is all still there. Save it, export it, whatever, but we'll get another sample in a minute.Click  to configure the record function. A configuration window will open.Our serial baud rate is set at 9600, which is essentially 9.6 kHz. We want the sample rate to be significantly higher than that in order to capture the data. The default  should be 200 kHz, but any value higher than 10X baud is fine, just don't go to high or you won't have enough samples in the buffer to record enough data for the time required.Set the number of  to determine how long the tool will record. Multiply your rate by the time required for acquisition to get you samples. In this case I already know that the uC32 is finished transmitting data to the CLS after about 2.5 seconds, so with a rate of 200 kHz, that leaves me with 500,000 samples. is set by the tool in this case, so don't worry about it.Use the  box to set the position on the plot of the first sample. 0% is far left, 100% is far right, and 50% is right in the middle. For this example, set it to 5%.Once everything is set, click  to begin acquisition. The tool will buffer a few samples and then wait in  status. Reset the uC32 to begin transmitting to the CLS. The plot should look like this once it finishes.It doesn't look like much, but luckily we recorded it, so we can zoom in to see the data stream.Use the scroll bar above the plot window to move left or right through the recorded data plot.Notice that the data packets have been interpreted by the tool and both the hexadecimal and ASCII values are displayed at the top of the plot window.Click one of the hot track buttons  at the top right of the plot window. Zoom in on the recorded data stream and hover the mouse over it. Measurements and associated labels will appear on the plot, showing information like the data pulse width, period, etc.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 4: An Example."}, {"step": 5, "steps_text": "As you can see, the Logic Analyzer on the Analog Discovery 2 is a powerful tool for helping test and analyze digital communication protocols.As always, thanks for reading. If you have questions, please ask them in the comments below, though PMs are always welcome as well. You just never know when someone else has the same question and that way we can all learn and help each other get better. Have fun building!Also, please check out the Digilent blog where I contribute from time to time.", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 5: That's It!"}], "channel": "Tools"}, {"category": "technology", "description": "It is really easy to get an optical telescope. You can just buy one from a manufacturer of such telescopes. However, the same cannot really be said of radio telescopes. Usually, you have to make them yourself. In this Instructable, I will show how to build a radio telescope.", "title": "Make a Radio Telescope With Raspberry Pi", "url": "https://www.instructables.com/id/Make-a-Radio-Telescope-With-Raspberry-Pi/", "section": "technology", "steps": [{"step": 1, "steps_text": "In order to make this radio telescope, first, you will need to get the parts for it.Satellite Dish with only one LNB mount (can be obtained online, like this, or elsewhere)            Nylon or teflon washers                LNBBreadboardAnalog Satellite FinderDC Barrel Jack and fitting AC-DC adapter (15 volts for this finder)Raspberry Pi with standard peripherals, and an SD card of at least 16GB              Jumper wires16-bit ADS1115 Analog to Digital Converter100 \u00b5H microhenry RF chokeHookup wire (I used 22-Guage)        F-type Coaxial cable of at least 6 feetStandard soldering materialsYou will also need appropriate software in order to use the radio telescope. You need to have downloaded onto the Raspberry Pi Raspbian, which should include Python 3, and the Python library for the ADS1115.For your smartphone, you will want to use a satellite tracking app in order to discern between satellites and stellar objects, and a star tracking app to know where celestial objects are in the sky.", "step_imgs": ["https://cdn.instructables.com/F23/HGJG/J9JFTOPC/F23HGJGJ9JFTOPC.LARGE.jpg", "https://cdn.instructables.com/FB8/4PY8/J9JFTR9L/FB84PY8J9JFTR9L.LARGE.jpg", "https://cdn.instructables.com/FCU/VDV1/JB6UDDML/FCUVDV1JB6UDDML.LARGE.jpg", "https://cdn.instructables.com/FHH/AKLH/JCKUTHU8/FHHAKLHJCKUTHU8.LARGE.jpg"], "step_title": "Step 1: Getting the Parts"}, {"step": 2, "steps_text": "Follow the diagram and pictures shown in making the electronics for the radio telescope.The wires going to the dial of the finder should be disconnected from the dial. The ground connection of the ADS1115 connects to the ground pin that leads to the dial, and the analog input should be connected to the other wire.On the dish itself, a nylon washer should be placed between the nut and the backup support.", "step_imgs": ["https://cdn.instructables.com/FRU/XHIY/JCAUWVI5/FRUXHIYJCAUWVI5.LARGE.jpg", "https://cdn.instructables.com/FG2/M920/JCGK2240/FG2M920JCGK2240.LARGE.jpg", "https://cdn.instructables.com/FE3/QBHF/JCGK224C/FE3QBHFJCGK224C.LARGE.jpg", "https://cdn.instructables.com/FT0/MWV1/JCKUTVTN/FT0MWV1JCKUTVTN.LARGE.jpg", "https://cdn.instructables.com/FEP/86M9/JCKV0EJQ/FEP86M9JCKV0EJQ.LARGE.jpg"], "step_title": "Step 2: Hardware"}, {"step": 3, "steps_text": "In order to read and store the data, the Raspberry Pi and the ADS1115 come into play. Any Raspberry Pi with the latest version of Raspbian can do.  The instructions for the software library are in the PDF on the Adafruit website. Before downloading, you must set Python 3 as the default Python. In order to check, type into terminalpython --versionIf you get a response that reads Python 3.x.x, the default Python version is Python 3, and you do not need to change the default Python version. However, if your default version is version 2, you will have to change it by going into terminal and typing insudo update-alternatives --config pythonThen, press 0 to select Python 3 as the default version. Once you have downloaded the Python library, you can download the code for using the radio telescope. On the Raspberry Pi, create a folder in /home/pi called radio_telescope_files. You should of course have standard peripherals for a Raspberry Pi, such as keyboard, mouse, and monitor. If you have the Raspberry Pi Zero without GPIO pins, you will have to solder them yourself. You will also have to solder the pins on the ADS1115 breakout board.", "step_imgs": ["https://cdn.instructables.com/FHP/5UUL/JACTTHHI/FHP5UULJACTTHHI.LARGE.jpg", "https://cdn.instructables.com/F02/7LUG/JACTVW0X/F027LUGJACTVW0X.LARGE.jpg", "https://cdn.instructables.com/FEC/B40U/JACTVW0W/FECB40UJACTVW0W.LARGE.jpg", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 3: Software"}, {"step": 4, "steps_text": "Once you have the appropriate software on the Pi, and all the pins soldered on, you can connect the breakout board to the Raspberry Pi. In order to do so, put the pins of the board into a breadboard. The VDD pin should be connected to a 3.3-volt or 5-volt pin on the Raspberry Pi, GND to any ground pin on the Pi, SCL to pin 5 on the Pi, which is SCL, and SDA to pin 3, or SDA, on the Pi. Once the ADS1115 is connected to the Pi, you can now connect the green wire of the modified Finder to A0 on the ADS1115, and the black wire to GND on the board. If it suits you better, you can connect the respective wires by attaching an alligator clip wire to the wire, and a jumper wire to the other end, connecting to the respective board connection. Then, connect the LNB to the input on the Finder by coaxial cable. Plug the power cable into the barrel jack to turn the finder on.In order to test the Radio telescope, point the dish at such as the sun, the strongest emitter of radio waves from our perspective on Earth. In order to do so, point the dish towards the sun so that the top of the shadow of the LNB hits where the LNB arm meets the dish. Now, turn your Raspberry Pi on and run toScreen.py, the Python script for reading results from the ADS1115 and printing them on screen. You can run this in either the Python 3 IDLE, or terminal. Either way, you should get a prompt asking for the gain, followed by the sample rate, and how long you want the Pi to read the ADS1115\u2019s output. With your dish pointed at the sun, run the script for about 10 seconds. If very low numbers initially shows up, turn the gain knob on the Finder up, very slowly. The numbers should increase until it reaches about 30700. By then, you can stop turning the knob.", "step_imgs": ["https://cdn.instructables.com/FQ8/L1DZ/JACTVW8Y/FQ8L1DZJACTVW8Y.LARGE.jpg"], "step_title": "Step 4: Short Tests"}, {"step": 5, "steps_text": "toScreen.py is a good way to test the radio telescope, but it does not store data.  writeToFile.py can store the data, and you can run this in the same way in IDLE and terminal. This script stores data in a text file, which should be found in the folder named \u2018Data.\u2019 If you run this, it will ask for the gain, the sample rate, what duration of time you want the Pi to read the ADC, and the name of the file in which you store this data. The radio telescope will pick up the radio signal strength at points throughout the time the radio telescope has been scanning the sky will be stored in the Raspberry Pi.After collecting the data, it can be graphed in a spreadsheet program, by first getting the timestamps of the data, putting them in column A, then getting the data, and putting them in column B. This can be achieved by using the column.py script. To get the timestamps, run the script, then enter time for the message asking which to read, the timestamps or the data values. In reading the graph, it is important to know that the leftmost point on it represents the westernmost point in the sky that was scanned.", "step_imgs": ["https://cdn.instructables.com/F51/3IKA/JACTTPN3/F513IKAJACTTPN3.LARGE.jpg"], "step_title": "Step 5: Saving Results"}, {"step": 6, "steps_text": "The radio telescope can be used for observing not just the sun, but other celestial objects such as stars, using the same method as used for the sun. If you have any questions, comments or concerns, let me know in the comments.", "step_imgs": [], "step_title": "Step 6: Further Use"}], "channel": "Science"}, {"category": "technology", "description": "IntroductionThis instructable will guide you to build a 3D scanner for less than $30, or even $12 if you already have a USB webcam.Seeing the price tag and limitations of commercial scanners I decided to challenge myself to build my own. It had to be cheaper and easy for anybody to build one using a 3D printer.ResultThe \"Sardauscan\" is a laser scanner, comparable to other professional laser scanners but for less than 20-30 times the price, and it has twice the number of lasers.My design principles were:\u00b7         Keep it simple\u00b7         Keep it low cost\u00b7         Make it evolutive\u00b7         Provide a complete solutionThe scanner is completely open source and open hardware:\u00b7         The \"Sardauscan\" software is written in C# - the full source code is available. \u00b7         You can write plugins for your own hardware or for your tasks.The software allows you to scan, smooth, build meshes and export to various formats.How does it work?The principle of a 3D laser scanner is simple. \u00b7         A picture of the object is taken without any lasers firing\u00b7         One laser is switched on and another picture is taken\u00b7         Computing the difference between the two images, a laser trace (profile of the object) is obtained\u00b7         By knowing the positions of the camera and laser you can derive the 3D coordinates of all the points on the profile\u00b7         You do the same for all the lasers, turn the table and repeat the process until the table has made a full revolutionAnd there you go, you have a complete point cloud representing your object.", "title": "Build a 30$ Laser Scanner", "url": "https://www.instructables.com/id/Build-a-30-laser/", "section": "technology", "steps": [{"step": 1, "steps_text": "Here is the list of all the parts you need to build the scanner:\u00b7         A bunch of M3 (16 and 20 mm)\u00b7         A bunch of M4 (12 and 20 mm)\u00b7         1x Arduino nano (Chinese copy, $4)  http://www.befr.ebay.be/itm/NEW-Nano-V3-0-ATmega32...\u00b7         1x Chinese Stepper Motor (28BYJ-48) and controller (ULN2003)  (5$)  http://www.befr.ebay.be/itm/Uln2003-Stepper-Motor...\u00b7         1-4x Line laser 5v ($2.5$ piece)  http://www.befr.ebay.be/itm/251688838898?ssPageNa...\u00b7         1x Hercule HD Twist ($15)  http://www.befr.ebay.be/itm/Hercules-HD-Twist-5-0...\u00b7         20x20 profile (can be printed : there are plenty of STLs on the net)\u00b7         optional 3x 4mm roller ($0.3 piece) (624 bearingsTotal: from $26.5 (1 laser) to $35 (4 lasers)About the 2020 lengths: this is not really important. The only constraint is to have the camera seeing the whole table.For example, here are the lengths I used for my build:\u00b7         2 x 140mm\u00b7         1 x 120mm\u00b7         1 x 250mmWhat to printAll the STL files can be found on Thingiverse:http://www.thingiverse.com/thing:702470\u00b7         1 x arm_left.stl\u00b7         1x box.stl\u00b7         1x box_door.stl\u00b7         1x box_arduino_clamp.stl\u00b7         1x arm_right.stl\u00b7         1x CORNER.stl\u00b7         1x MOTOR_MOUNT.stl\u00b7         1 to 4 x laser_holder.stl\u00b7         1X Camera_HOLDER_LOWER_PART.stl\u00b7         1x Camera_HOLDER_UPPER_PART.stl\u00b7         1x center_axe_MINIMAL.stl OR 1x table_AXLE.stl (OPTIONAL)\u00b7         3x roller_baseV2.stl\u00b7         you can print 12x M4_tslot_nut.stl if you use a 20x20 profile and you don't have anyRemarks:\u00b7         The 2020 profiles are just here for ease of use. You can use whatever you have: wood, metal, \u2026\u00b7         If you want to use another camera, you will need to adapt \u201cCamera_HOLDER_UPPER_PART\u201d to match it\u00b7         The bearing are optional. They are only necessary if you want to scan heavy objects or don't have a perfectly flat table\u00b7         The build is simple, just look at the pictures. You can't do it wrong\u00b7         Put the motor at the center, place the 3 profiles around and screw them. Place the corner, screw, put the arms, screw, \u2026\u00b7         There is a hole for each screw, you can\u2019t get it wrong.\u00b7         For the wiring, please refer to the diagram.", "step_imgs": ["https://cdn.instructables.com/F0D/Y3G8/I800X19M/F0DY3G8I800X19M.LARGE.jpg", "https://cdn.instructables.com/F30/BL3A/I800X1BY/F30BL3AI800X1BY.LARGE.jpg", "https://cdn.instructables.com/FRQ/M0AE/I800X1BZ/FRQM0AEI800X1BZ.LARGE.jpg", "https://cdn.instructables.com/FH6/VP3P/I800X1C1/FH6VP3PI800X1C1.LARGE.jpg", "https://cdn.instructables.com/F99/KDMR/I800X55V/F99KDMRI800X55V.LARGE.jpg", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 1: What Do You Need ?"}, {"step": 2, "steps_text": "At this point all you need to complete the hardware part is to upload the firmware to the Arduino. You will need the Arduino IDE or another sketch editor. The firmware (a regular Arduino sketch) is available at: https://github.com/Sardau/Sardauscan You will also need to install the AccelStepper library in order to compile it: https://github.com/adafruit/AccelStepper\u00b7         Edit configuration.h to match your wiring.\u00b7         Upload it to your ArduinoNow that the hardware is ready, test it!\u00b7         Connect to your Arduino with your IDE\u00b7         Type \u201cSardauscan\u201d \u2013 the Arduino should answer \u201cyes\u201d\u00b7         Try the stepper: type \u201cT R 100\u201d \u2013 your table should turn 100 steps\u00b7         Try the laser: type \u201cL 0 1\u201d for the first (0) laser to fire (1) \u2013 the first laser should light upIf something doesn\u2019t work, check your wiring and configuration.h \u2013 it should match.", "step_imgs": [], "step_title": "Step 2: Firmware"}, {"step": 3, "steps_text": "To install the Sardauscan software, go to github (see link above) and download the latest binary version. Extract it and launch the executable.In the main interface, you will see 3 red icons \u2013 one for the table, one for the lasers and one for the camera. Click on them to connect to the hardware (right click to disconnect).If you use the standard Sardauscan firmware the table and the laser switches are linked.Now that the hardware is ready and the software connects to it, here comes the tricky part: calibration.The calibration takes 3 steps:\u00b7         A manual calibration\u00b7         The build dimension\u00b7         The \"Adjust\" correctionBe careful during the calibration: the result quality directly depends on it.To calibrate:\u00b7         Click the target icon and the \u2018Physical\u2019 button. \u00b7         Move your camera so that the vertical in the preview window crosses the exact center of the table.\u00b7         Click on the center of the table in the preview window. The lines will help you align the calibration object.\u00b7         Place the calibration object (see STL on Thingiverse) on the table, flat area facing the camera \u2013 use the horizontal line for help.\u00b7         Click on the first laser icon on top to light up the first laser. Align the laser line to the vertical line in the preview window.\u00b7         Repeat for all your lasers.Build dimension:\u00b7         Click on the \u201cbuild dimension\u201d button and enter your build dimension.Adjust:\u00b7         As a perfect calibration is difficult to achieve, especially with a higher number of lasers, the correction step will help you correct the previous errors.\u00b7         Place your calibration object on the center of the table and click \u201cquick scan\u201d.\u00b7         When the scan is completed you will see a top view of it. Each color corresponds to a different laser.\u00b7         The goal is to superimpose as best as possible the different laser scans: select a laser in the combo box and rotate (left mouse button), scale (middle mouse button) and pan (right mouse button) the scan.Congratulations , your calibration is done!", "step_imgs": ["https://cdn.instructables.com/FG6/2CKR/I800X7XB/FG62CKRI800X7XB.LARGE.jpg", "https://cdn.instructables.com/F3Y/2PPS/I800X7Y5/F3Y2PPSI800X7Y5.LARGE.jpg", "https://cdn.instructables.com/FJD/X1MA/I800X7YH/FJDX1MAI800X7YH.LARGE.jpg", "https://cdn.instructables.com/F3O/JHGX/I800X7ZI/F3OJHGXI800X7ZI.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 3: Software and Calibration"}, {"step": 4, "steps_text": "To be evolutive the software is designed around tasks and processes.When you open the program you will see to the left a list of available tasks \u2013 you can drag them to the process list on the right then press the \u2018Play\u2019 icon at the bottom.Here is a non-exhaustive list of the available tasks:\u00b7         Scan: scan an object\u00b7         Grab Pictures: take pictures of the object for use in a photogrammetry program\u00b7         Filter IQR: remove noise from the data with an interquartile range filter\u00b7         Filter median: remove noise from the data with a median filter\u00b7         Angle: merge laser scan by angle \u2013 smooth the scan and filter noise\u00b7         Bezier: smooth the data by fitting a Bezier curve\u00b7         Surface: smooth the data with a Laplace surface smooth\u00b7         Save ply: save a PLY file to use with MeshLab or any other point cloud software\u00b7         Save stl: save the STL file", "step_imgs": ["https://cdn.instructables.com/FPR/RI8N/I800WQU7/FPRRI8NI800WQU7.LARGE.jpg", "https://cdn.instructables.com/FYU/DHFV/I800XDWY/FYUDHFVI800XDWY.LARGE.jpg", "https://cdn.instructables.com/FW2/WUF7/I800WQXP/FW2WUF7I800WQXP.LARGE.jpg", "https://cdn.instructables.com/FF7/TW1N/I800WQXM/FF7TW1NI800WQXM.LARGE.jpg", "https://cdn.instructables.com/FMA/ED88/I81950KD/FMAED88I81950KD.LARGE.jpg", "https://cdn.instructables.com/F2G/3V3F/I800XF8F/F2G3V3FI800XF8F.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 4: Dafuq Is This Interface ?"}, {"step": 5, "steps_text": "As mentionned the software is not linked to the Sardauscan build \u2013 it is made to be evolutive.You can do almost whatever you want with plugins.You have a magical algorithm?Do a plugin for it !You have a custom image acquisition hardware ?Do a plugin !You want to use your own hardware firmware for the table or the laser ?Do a plugin !You can look at the github repository, there are some plugins samples. It is really simple to code.To use the plugin, just copy then in the \"plugin\" subdirectory.Happy scanning !", "step_imgs": [], "step_title": "Step 5: Developer Corner : Evolution ? Own Hardware ? Plugins ?"}], "channel": "3D Printing"}, {"category": "technology", "description": "Hey! This is part two of a two part tutorial on how to make a speed controller out of a bottle cap and pen spring! If you haven't yet, check it out! If you like it, please consider voting for me in the Sensors contest! Thanks!Even if you don't plan to make those shaft encoders, this I'ble is still a really good explanation of what a PID does and how it works. It has a gnome!~~~~~Alright! So you've made yourself a shaft encoder and you're probably ready to use it! This tutorial is going to go through all the steps you'll need to make that happen!I don't just want to show you how to use my code though. That'd be lame. So instead, I'm going to take some time and explain the whys and wherefores and then show you how!Let's get started!~~~~~For more Instructables on building cheap robots, please check out the For Cheap Robots collection!For more things that I've done, you can check out my profile page!For more info from Digilent or the Digilent Makerspace, check out the Digilent blog!", "title": "Speed Controllers for Cheap Robots, Part 2: PID Controller", "url": "https://www.instructables.com/id/Speed-Controllers-for-Cheap-Robots-Part-2-PID-Cont/", "section": "technology", "steps": [{"step": 1, "steps_text": "For this project you'll need the following:A microcontroller. I'm using my favorite, the DP32 from Digilent!  A very high resistor. Here I've got a 47k Ohm resistor. (Or 40k? It's hard to tell if that's a purple or black band. Probably 47k. I don't think they make 40k.)  Several wire connectors.If you want, you can use the Motor Controllers for Cheap Robots tutorial to control your motor. However, if your motor is small enough, and you're not going to put much load on it, you can also power your motor directly from your board.", "step_imgs": ["https://cdn.instructables.com/FYX/671P/IO4JHCM7/FYX671PIO4JHCM7.LARGE.jpg", "https://cdn.instructables.com/FO6/P5RY/IO4JHCLT/FO6P5RYIO4JHCLT.LARGE.jpg"], "step_title": "Step 1: What You'll Need"}, {"step": 2, "steps_text": "Before we start actually using our shaft encoder, we need to clean up the signal we get from it a little.Obviously, bottle caps and pen-springs aren't quite the same quality as precision manufactured optical or hall-effect encoders. The noise that we get from these sensors comes in the form of a very bouncy voltage level, which you can see in the first picture in this step.You can see that while our sensor pin is being driven high, the voltage bounces around quite a bit. That's caused by the spring scraping over the rough metal surface of the wheel. It's really difficult to get a crisp signal this way, so it's a good thing we want to measure the length of the low signals anyway!Speaking of which, check out the low signal. See how crisp and clean it is? It also has a very crisp starting and ending, which we can use to very precisely time how long our pin stays low! Remember back when you were cutting the strips of electrical tape for the encoder tutorial? I said that the width of each piece of tape had to be exactly the same, and this is why!", "step_imgs": ["https://cdn.instructables.com/FAJ/JTBF/IO4JHD7S/FAJJTBFIO4JHD7S.LARGE.jpg"], "step_title": "Step 2: Why Signal Processing?"}, {"step": 3, "steps_text": "The previous image was taken using the Digilent Analog Discovery, which is a useful tool for making quick measurements, with little to no fuss. But you don't need an oscilliscope to take a look at the signal you're getting from your encoders, as you'll soon see!The image above is taken from the data logger program that you'll be using later in this tutorial. I got this graph by taking 100 encoder time measurements for each PWM signal I sent to my motor. That's 100 measurements of how long it takes my encoder sensor to go from high, down to low, and then back up to high again. Each of these different PWM signals have been graphed out along the X axis of the graph above, and you can see how fast the motor was spinning by how high each point is.Notice how I've got almost a line of crisp, clean time measurements along the top there? That's our good data. All that mess below it? That's noise. That's what we're aiming to get rid of.", "step_imgs": ["https://cdn.instructables.com/FCA/WR0O/IO4JHDC9/FCAWR0OIO4JHDC9.LARGE.jpg"], "step_title": "Step 3: What Do We Do About It?"}, {"step": 4, "steps_text": "There are two ways you can wire this circuit.The first, uses a FET (as in my Motor Controllers tutorial) to give the motor more power outside of the board.The second, powers the motor directly from the board. This only works for sufficiently small motors, but it can be much faster and simpler than the FET circuit.I should point out here that I've represented the encoder with a push-button switch, because that's pretty much what it is. However, you have to be a little careful when when connecting it than you would with a real button, so check out the next step before you wire anything!", "step_imgs": ["https://cdn.instructables.com/F29/I5NH/IO4JHJO2/F29I5NHIO4JHJO2.LARGE.jpg", "https://cdn.instructables.com/FYI/UTCG/IO4JHJOT/FYIUTCGIO4JHJOT.LARGE.jpg", "https://cdn.instructables.com/FKK/SYMB/IO4JHJPT/FKKSYMBIO4JHJPT.LARGE.jpg", "https://cdn.instructables.com/FRM/56YM/IO4JHJP0/FRM56YMIO4JHJP0.LARGE.jpg"], "step_title": "Step 4: Wiring"}, {"step": 5, "steps_text": "Check out the picture above. Notice how the spring has a very small surface area compared to the wheel and motor casing? Because the motor casing, the metal wheel, and whatever gearbox you have in between them, all have a large surface area, this means they can hold a lot of charge. That means they aren't as good for using as our actual sensor when it comes time to connect this to the board.Instead, we want to connect our sensing pin to the side of the encoder that has the spring, because that will give us a much nicer signal. This is very important.It's a simple requirement, but I spent several months struggling to get a clean signal before I figured this out. Always connect your interrupt pins to the spring.", "step_imgs": ["https://cdn.instructables.com/FVL/UUOC/IO4JHL4S/FVLUUOCIO4JHL4S.LARGE.jpg"], "step_title": "Step 5: Always Connect the Spring to Your Sensor!"}, {"step": 6, "steps_text": "Download the Data_Logger program I've attached to this step.(Note that I've started using Arduino instead of MPIDE. That's because I've installed the chipKIT core into Arduino. To do this, just follow the installation instructions on the chipKIT core wiki page. Alternatively, you can copy and paste this code into MPIDE.)Go to line 20, where the PWMval constant is defined. (This line has been highlighted in the first picture of this step.)This is the PWM value that is going to get sent to your motor. For now, make sure it is set to 255, which is the maximum.When you load the code onto your board, the motor will immediately begin to spin, so make sure it's not going to roll away on you!Now click the serial com button in the upper, right-hand corner of the Arduino IDE. You should see a stream of numbers like the ones in the second picture. It's okay if your numbers are much higher or much lower than these. Each of those numbers is a measurement between interrupt times, and should usually reflect how long it takes our encoder to go from the start of one strip of tape to its end.Wait for two or three minutes so you can get enough values. You want at least 100. Then open the PWM Characterization excel spreadsheet (also attached to this step). In the Raw Encoder Data tab, copy and paste the values from the serial monitor into the column next to where it says \"255\", like in the third picture in this step.Congratulations! You've just taken your first measurement!", "step_imgs": ["https://cdn.instructables.com/FUX/6VU8/IO4JHKMR/FUX6VU8IO4JHKMR.LARGE.jpg", "https://cdn.instructables.com/FM1/P6IS/IO4JHKN2/FM1P6ISIO4JHKN2.LARGE.jpg", "https://cdn.instructables.com/FT0/22JO/IO4JHKMT/FT022JOIO4JHKMT.LARGE.jpg", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 6: Taking Time Measurements"}, {"step": 7, "steps_text": "Next we're going to find the minimum PWM that our motor will run at.Go back to the Data Logger code, and change the PWMval to 5.When you load the code onto your board, your motor probably won't run. Try turning it by hand and seeing if it continues to spin. Again, chances are it won't.Keep increasing PWMval by 5 points and loading it onto your board. Do this until the motor can turn under its own power. Keep in mind that you may have to \"kickstart\" it by turning it manually first.If the board turns on it's own, but then stops, it doesn't count. Keep testing until the motor can keep turning under its own power.Once you find the smallest PWM value that the board can turn with, write that value down as PWMmin. We'll use PWMmin later in this tutorial.", "step_imgs": [], "step_title": "Step 7: Finding Minimum PWM"}, {"step": 8, "steps_text": "Starting from PWMmin, start recording data the same way that you did in step five. This can be a little tedious, but it's necessary for us to understand how our motor responds to the PWM signal it's given. After a little while, you should end up with a graph like the first picture in this step. (Ignore the blue markers. Those come later.)Notice how I'm not bothering to collect data for the entire range of PWM values? That's tedious and not necessary. Really, you just want to get enough points on the low PWM range to get a feel for how your graph curves.Check out the second picture. That's a graph that I made using the complete range of values. That graph took hours and most of it isn't even needed. I'm including it here so you can see the sort of graph that you would end up with if you did this.Again, I'll point out that it's okay if your numbers are much larger or much smaller than the ones I have here. The two graphs above are actually taken from two different motors, one of which runs much faster than the other (and thus has smaller time measurements).", "step_imgs": ["https://cdn.instructables.com/FG3/GBRM/IO4JHMHX/FG3GBRMIO4JHMHX.LARGE.jpg", "https://cdn.instructables.com/FGP/Q105/IO4JHM4O/FGPQ105IO4JHM4O.LARGE.jpg"], "step_title": "Step 8: Take More Data"}, {"step": 9, "steps_text": "Let's look at that complete graph again.Notice how you can tell the good data from the noise, because there's a sort of gap between them? The data forming the line on the top is our good data, and everything under the gap is the noise.Now check out the second graph. See how the blue line slips right between our good data and our noise? That's our sliding cutoff line. It's calculated using a very simple formula. It's this formula that we're going to find in our next step.Now check out the third graph. By removing or ignoring all the data beneath the sliding cutoff, we suddenly have a much cleaner graph. This means our data is nothing but good data, and we can use that good data to control our motor!", "step_imgs": ["https://cdn.instructables.com/FCG/65W8/IO4JHN2T/FCG65W8IO4JHN2T.LARGE.jpg", "https://cdn.instructables.com/FMK/QWUO/IO4JHMZR/FMKQWUOIO4JHMZR.LARGE.jpg", "https://cdn.instructables.com/FDL/T0H3/IO4JHN2W/FDLT0H3IO4JHN2W.LARGE.jpg"], "step_title": "Step 9: How a Sliding Cutoff Works"}, {"step": 10, "steps_text": "The formula for our cutoff is:Max_time = [curvature / (PWMoutput - PWMmin)] + Min_timeCutoff = k_cutoff * Max_timeThe first formula is a model of the max time for each PWMoutput that we send to the motor. In other words, it's a model of the top of that graph.The second formula takes the model of our maximum times and reduces it by some fraction. That fraction is our k_cutoff.", "step_imgs": ["https://cdn.instructables.com/FM1/GTBJ/IOB3QBG7/FM1GTBJIOB3QBG7.LARGE.jpg"], "step_title": "Step 10: The Cutoff Formula"}, {"step": 11, "steps_text": "We'll start by creating that first formula..Max_time = [curvature / (PWMoutput - PWMmin)] + Min_timeWe already know PWMmin, because we recorded that value earlier in this tutorial. PWMmin becomes the vertical asymptote of our model.Now we just need to find Min_time. Move to the Modeling Max(D_t) tab and scroll to the bottom where the maximum 255 PWM time response value is. I've highlighted it in picture 2 of this step. Round that value to the nearest thousand. For example, I rounded mine to 36000. That's your Min_time.The hardest part of this formula to find is the value A. I've made this easier for you by making a formula that solves for our curvature value.curvature = (Max_time - Min_time) * (PWMoutput - PWMmin)Now we just need to pick a point to substitute for Max_time and PWMoutput. The best point for this is the highest on our graph (check out the first picture in this step). You can either find that value by switching to the Raw Encoder Graph tab, and hovering over the highest point with your mouse cursor, or you can find it at the top of the Max(D_t) column of Modeling Max(D_t). In the third picture of this step, I've highlighted my Max_time in blue, but yours may be somewhere slightly different, depending on what your PWMmin was.(Note: Write down the Max_time that you used here, because we'll use it again in a much later step.)Now that you have PWMmin, Min_time, and curvature, enter those values into their respective fields (highlighted in red). You should see the red crosses in the graph to the right jump into a curve, representing your Max_time function.", "step_imgs": ["https://cdn.instructables.com/F5B/Y8R1/IO4JHOX2/F5BY8R1IO4JHOX2.LARGE.jpg", "https://cdn.instructables.com/FWK/DN37/IO4JHQY2/FWKDN37IO4JHQY2.LARGE.jpg", "https://cdn.instructables.com/F5O/0GFL/IO4JHSF5/F5O0GFLIO4JHSF5.LARGE.jpg"], "step_title": "Step 11: Modeling Max_time"}, {"step": 12, "steps_text": "Go to the Finding k_cutoff tab. Change k_cutoff (highlighted in green in the first pic) to 1. Now go to Raw Encoder Graph tab. Remember the blue data points I said would come later? That is the result of the second formula:Cutoff = k_cutoff * Max_timeRight now, you want to make sure each of the blue points is at or above the top of your measured values (as in the first picture).To find a good k_cutoff, go back to the Finding k_cutoff tab, and change k_cutoff to 0.50. Now check the Raw Encoder Graph again. You want to adjust k_cutoff so that all the blue points are above your noise, but below your good data (as in the third picture in this step). For this data 0.50 works just fine, but you may need to adjust your k_cutoff a little more.You want k_cutoff to be as low as possible, but you also don't want to let any of the bad data through, so I usually add a buffer of about 0.02 or 0.03.", "step_imgs": ["https://cdn.instructables.com/FCF/EAVZ/IOB3QFK8/FCFEAVZIOB3QFK8.LARGE.jpg", "https://cdn.instructables.com/F79/VEK1/IOB3QEHZ/F79VEK1IOB3QEHZ.LARGE.jpg", "https://cdn.instructables.com/FOP/IFXT/IOB3QFO9/FOPIFXTIOB3QFO9.LARGE.jpg"], "step_title": "Step 12: Checking Your Model and Finding K_cutoff"}, {"step": 13, "steps_text": "Now that we have k_cutoff, curvature, PWMmin, and Min_time, we can create and test our sliding cutoff formula.Download Data Logger 2, and change the highlighted values to the ones you've just found.Now, repeat the data logging steps, but this time input the data into the Filtered Encoder Data tab.Once that's done, check out the Filtered Encoder Graph tab. You should see a graph similar to the one in picture 3 of this step.It's worth noting that in picture 3, I have a few noise data points left over after my filter. In this case, I just increased k_cutoff by 0.02 or 0.03, and got rid of these.", "step_imgs": ["https://cdn.instructables.com/FQ1/7VMV/IOB3QGYK/FQ17VMVIOB3QGYK.LARGE.jpg", "https://cdn.instructables.com/F45/HO41/IOB3QH8L/F45HO41IOB3QH8L.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 13: Checking Your Sliding Cutoff"}, {"step": 14, "steps_text": "Download the PID Speed Controller code. Before we run it, we've got to adjust some values.In the second picture, PWMmin, Min_time, k_cutoff, and curvature are all the values you've just finished calculating. The only thing outstanding is Max_time.If you recall from the Modeling Max Time step, I asked you to write down the Max_time value you used there. Theoretically, this will be the maximum time that any of your encoder readings will return. That's the value you want to use here.", "step_imgs": ["https://cdn.instructables.com/F89/4UD8/IOB3QIMP/F894UD8IOB3QIMP.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 14: Finally! Setting Up Your Speed Controller!"}, {"step": 15, "steps_text": "Now! With your code properly set up, you can upload it to your board and test it out!By turning the POT onboard the DP32, you should be able to vary the speed of the motor. It's actually surprisingly responsive!Unfortunately, there is some strange behavior that happens towards the low end. Check out the second gif in this step. When I turn the pot too low, the motor can't hit the desired value accurately enough, so it continually speeds up and slows down.", "step_imgs": ["https://cdn.instructables.com/F2T/SZM1/IOB3QNJP/F2TSZM1IOB3QNJP.ANIMATED.LARGE.gif", "https://cdn.instructables.com/FCJ/3IRP/IOB3QNJV/FCJ3IRPIOB3QNJV.ANIMATED.LARGE.gif"], "step_title": "Step 15: The Moment of Truth!"}, {"step": 16, "steps_text": "On a top level, our controller works like this:Measure the current speed.Error = current speed - target speed.Feed the error into our PID.Get a corrected PWM from our PID.Output the corrected PWM to our motor.Repeat from top.The key part of this function is the PID. To best understand how a PID works, I'm going to break it apart into components, namely the Proportional, Integral, and Derivative controllers. I won't go into too much detail on how a PID works, but I'll do my best to explain how it works in the context of the speed controller you just used.", "step_imgs": ["https://cdn.instructables.com/FZ4/4SNN/IOB3QT9V/FZ44SNNIOB3QT9V.LARGE.jpg"], "step_title": "Step 16: The Control Loop"}, {"step": 17, "steps_text": "The simplest way to understand a proportional controller, is to think of it as a sort of spring.Imagine you've got a ball on a spring. If you just let it sit, that is its neutral position. If you push it down a little, you could feel the spring pushing it back with some force. The more you push the ball away from its neutral position, the harder the spring tries to push it back.This force that the spring is applying is called a \"corrective force\". The strength of our spring's corrective force is proportional to how far from it's neutral position we push it.If you look at the speed controller code, you can find the line where we calculate the P value for our PID (highlighted in the second picture above). In that line, we take the difference between our motor's current speed and the speed we want (stored in the PIDmemory array) and multiply it by some constant. This is our \"corrective force\".Of course, springs are problematic. Let's go back to our ball and spring. Imagine what would happen if you pushed the ball out of its neutral position, and then let go. In this case, the ball and spring would bounce back and fourth, and take forever to settle down!If we only use a spring, we would have a very poor system. Similarly, if we only use a P controller, we would have a very poor controller.", "step_imgs": ["https://cdn.instructables.com/F1C/FJET/IOB3QV18/F1CFJETIOB3QV18.LARGE.jpg", "https://cdn.instructables.com/FXS/UT9G/IOB3R2Y0/FXSUT9GIOB3R2Y0.LARGE.jpg", "https://cdn.instructables.com/F7M/TBR2/IOB3QV19/F7MTBR2IOB3QV19.LARGE.jpg"], "step_title": "Step 17: The P Controller"}, {"step": 18, "steps_text": "Just trying to use a spring (or just trying to use a P controller) is no good, so what do we do?Let's go back to our ball and spring example and add a piston to it.Pistons work by forcing air to pass through a small opening. The faster you try to make them compress or expand, the more air you're trying to force through the small opening, and the slower the piston wants to move.Check out the third picture in this step. If we pair the right spring with the right piston, the result is a smooth approach towards the ball's neutral position. That's more like the behavior we're trying to achieve!But how does this apply to our speed controller?Go into the speed controller code and find where we calculate our D value (highlighted in the fourth picture above). Those two lines take the error from the previous update and subtract it from the current! This means that if we're approaching our desired speed too quickly, then D grows more negative, and slows us down!", "step_imgs": ["https://cdn.instructables.com/FWP/ULJ5/IOBR408I/FWPULJ5IOBR408I.LARGE.jpg", "https://cdn.instructables.com/FWT/T0BD/IOBR408M/FWTT0BDIOBR408M.LARGE.jpg", "https://cdn.instructables.com/F49/DUEQ/IOBR4088/F49DUEQIOBR4088.LARGE.jpg", "https://cdn.instructables.com/F2S/FIH3/IOBR408D/F2SFIH3IOBR408D.LARGE.jpg"], "step_title": "Step 18: The D Controller"}, {"step": 19, "steps_text": "So that's pretty much it, right? If a PD controller will get us the behavior that we're trying to achieve, then what's the point of adding an Integral controller as well?Fact of the matter is, most controllers are PD controllers. Even when a full PID is implemented, the effect of I is usually very small, but that effect can also be very important.Unfortunately, integral controllers aren't as easy to explain as they don't always have a physical counterpart. So we'll set aside our ball and spring for the time being. Instead check out the illustration for this step.That's Ivan. Ivan is very impatient, and if you take too long to get where you're going, Ivan will start pushing you and speeding you up. The longer you take, the faster Ivan goes.That's kind of what an integral controller does. It keeps track of past errors, and sums them. Therefore, as the error accumulates, the integral controller pushes harder and harder.Now check out the code for the speed controller. The way we calculate I is a little more complex than P or D. First, we sum all the error values in our memory. Then we take that number and scale it by a constant for our I value.", "step_imgs": ["https://cdn.instructables.com/FZY/S36H/IOBR42QQ/FZYS36HIOBR42QQ.LARGE.jpg", "https://cdn.instructables.com/FGE/ISF9/IOBR43IK/FGEISF9IOBR43IK.LARGE.jpg"], "step_title": "Step 19: The I Controller"}, {"step": 20, "steps_text": "Now that we have our P, I, and D values. We add them together to get our PID output. That gets added to the previous PWM output, to make the new output (in the next line), which then goes to our motor!However, as you may recall from the previous three steps, the formulas for all three were multiplied by k_P, k_I, and k_D. What are these constants and what do they do?If you scroll back up towards the top of the speed controller code, you'll find where these constants are defined. They're used to scale the magnitude of P, I, and D, so that we can control how much influence each one has on the corrected PWM output.As you can see, k_P is much larger than k_D. This is pretty typical. But wait, k_I is zero! Doesn't that mean I has no effect? Doesn't that make this a PD controller?You're absolutely correct! k_I is notoriously difficult to tune, and like I said before, most of the time a simple PD controller will suffice, so in this case I left it out. Feel free to add k_I to the mix to see what happens! Just know that usually k_I will be significantly lower than both k_D and k_P!", "step_imgs": ["https://cdn.instructables.com/FR2/2IEK/IOBR440G/FR22IEKIOBR440G.LARGE.jpg", "https://cdn.instructables.com/FJ5/G1VV/IOBR44IT/FJ5G1VVIOBR44IT.LARGE.jpg"], "step_title": "Step 20: PID Constants"}, {"step": 21, "steps_text": "That's the completed speed controller!I know this tutorial has taken much longer than most of my tutorials, but I wanted to make sure I did a thorough job of explaining both the sliding cutoff data filter and the the PID controller.Now you may understand why I was so excited for my shaft encoder project! It opens up exploration of not only data processing, but also PID controllers, which are the most predominant control system in the world! (And seriously cool to boot!)Not only that, but speed controllers and PIDs have some neat applications to robotics, allowing more refined movements and more sophisticated behaviors! I hope to have another tutorial up soon to explore those possibilities, but for now I hope you enjoyed this tutorial and I'd love to see what you do with it!Have fun!", "step_imgs": ["https://cdn.instructables.com/FG3/FV93/IOBR45N6/FG3FV93IOBR45N6.LARGE.jpg"], "step_title": "Step 21: And That's It!"}], "channel": "Robots"}, {"category": "technology", "description": "HiIn this Instructable I'll show you how I built a low-cost antenna analyser which can measure an antenna and display its VSWR over any or all of the HF frequency bands. It will find the minimum VSWR and corresponding frequency for each band but also will display a realtime VSWR for a user-selected frequency to facilitate antenna adjustment. If sweeping a single frequency band, it will display a graph of VSWR versus frequency. It also has a USB port on the back for outputting frequency and VSWR data, to allow more refined graph-plotting on a PC. The USB port can also be used to reflash the firmware if needed. I recently got into amateur radio (because I liked the idea of peer-to-peer communication over huge distances without infrastructure) and rapidly made the following observations:1. All of the worldwide communications that interested me take place on the HF bands (3-30 MHz)2. HF transceivers are very expensive and will break if you don't drive them into a reasonably well-matched antenna3. You are generally expected to rig up your own HF antenna from bits of wire strung across the garden (unless you want to spend even more money than you spent in 2).4. Your antenna might be a bad match but you won't know till you try it.Now a purist would probably say that one should first test the antenna on very low power at the frequency of interest and check the VSWR on the rig's meter to assess the quality of the match. I don't really have the time to muck about with that sort of thing for every frequency I might want to use. What I really wanted was an antenna analyser. These devices can test the quality of the antenna match at any frequency over the HF bands. Unfortunately they are also very expensive, so I set about considering whether I could make my own. I stumbled upon the excellent work carried out by K6BEZ (see http://www.hamstack.com/project_antenna_analyzer.html), who investigated the use of an Arduino to control a cheap direct digital synthesiser module (DDS). He soon abandoned the Arduino on cost grounds, preferring to use a PIC. Well, in 2017 you can buy an Arduino Nano for about \u00a33.50, so I thought it was time to revisit his work, pick up where he left off and see what I could come up with (note that I'm not the only one who has done this: there are some very nice examples to be found on the internet).Update (29/7/2018) - this work has been built upon considerably by bi3qwq, from China, who has made some really nice improvements to the user interface, which he has kindly shared. He's designed a very professional PCB (with a great calibration resistor feature) and done a really good looking build. To top it all he has prepared a schematic, which I know will delight many of those who have commented previously. Please see the comments section for more information.Update - I've been getting into 60 m recently, which the original sketch didn't cover. So now I've uploaded firmware version 7, which adds the 160 m and 60 m bands. These aren't add-ons; they are fully integrated into the operation of the analyser. It was fortunate that I could find an u8glib font that was still legible but allowed me to display ten bands simultaneously on that little screen (although it wasn't monospace, which caused some grief). I have estimated calibration values for the new bands, based on interpolation / extrapolation of the existing calibration values. I then checked these out with fixed resistors and they give pretty good results.Update - as several people have asked about schematics, the fundamental Arduino / DDS / VSWR bridge circuit is largely unaltered from K6BEZ's original work. Please check out the above URL for his original schematic on which I based this project. I've added an encoder, an OLED screen and fully developed firmware to make for an effortless user experience.Update - This system uses a very low voltage DDS signal source in conjunction with a resistive bridge containing diode detectors. Thus the diodes are operating in their non-linear regions and my first version of this system tended to under-read VSWR. As an example, a 16 ohm or 160 ohm impedance load should show a VSWR of about 3 in a 50 ohm system; this meter indicated a VSWR closer to 2 in this situation. I therefore carried out a software calibration using known loads which seems to be an effective fix for this problem. This is described in the penultimate step of this instructable and a revised sketch has been uploaded.Update - on-board graphing facility added to single sweeps as it was too useful to leave out, particularly when tuning antenna lengths for minimum VSWR : a graph gives you an instantly visible trend.", "title": "HF Antenna Analyser With Arduino and DDS Module", "url": "https://www.instructables.com/id/HF-Antenna-Analyser-With-Arduino-and-DDS-Module/", "section": "technology", "steps": [{"step": 1, "steps_text": "You will need the following items. Most of them can be obtained cheaply from Ebay. The most expensive single item was the box, at close on \u00a310! It might be possible to substitute some items (I used 47 Rs instead of 50 Rs, for example). The diodes were rather unusual (I had to buy 5 off from Italy) and would be worth substituting for more readily available items if you know what you are doing.Arduino Nano     DDS  module (DDS AD9850 Signal Generator Module HC-SR08 Signal Sine Square Wave 0-40MHz)    1.3\" i2c OLED display     MCP6002 op-amp (8 pin)     2 off AA143 diode     Ceramic capacitors: 2 off 100 nF, 3 off 10 nF     1 uF electrolytic capacitor     Resistors: 3 off 50 R, 2 off 10 K, 2 off 100 K, 2 off 5 K, 2 off 648 R     2.54 mm pitch screw terminal blocks: 3 off 2-pin, 2 off 4-pin     Single-core hook-up wire     702 or similar hook-up wire     Stripboard     Square header strip (female) for plugging the Arduino and DDS into - don't buy the round socket stuff by mistake!     SO-239 chassis-mount socket     Rotary encoder (15 pulse, 30 detent) with push switch and knob     Cheap rotary encoder 'module' (optional)      Project box     Toggle switch     Right-angle mini-usb to USB B bulkhead mount lead (50 cm)     PP3 and battery clip / holder     Self-adhesive PCB mounting posts / standoffsYou'll also need a soldering iron and electronics tools. A 3D printer and a pillar drill are helpful for the enclosure, although if you wanted you could probably assemble the whole thing on the stripboard and not bother with a box.Naturally you undertake this work and exploit the results generated at your own risk.", "step_imgs": [], "step_title": "Step 1: Buy Your Stuff"}, {"step": 2, "steps_text": "Plan out how you are going to arrange the components on the stripboard. You can either do it yourself, referring to K6BEZ's original schematic (which lacks an encoder or screen - see Page 7 of http://www.hamstack.com/hs_projects/antenna_analyzer_docs.pdf), or you can save a load of time and copy my layout.I do these layouts the simple way, using squared paper and a pencil. Every intersection represents a stripboard hole. The copper tracks go horizontally. A cross represents a broken track (use a 6 mm drill or the proper tool if you have one). Lines of circles with a box round them represent headers. Large boxes with screws denote the connector blocks. Note that in my diagram there is an extra line which runs horizontally through the middle of the board. Leave this out when you are putting it together (it's marked 'omit this line').Some of the components may appear to be laid out strangely. This is because the design evolved once I'd got the basic hardware working (particularly when I realised that the encoder needed hardware interrupts, for example).When soldering components onto the board, I use Blu-Tak to hold them in firmly in place while I turn the board over to solder the legs.I tried to minimise the amount of wire I used by aligning the Arduino and the DDS module and just using the stripboard to connect key pins. I didn't realise at the time that the hardware interrupts needed to read the encoder only work on pins D2 and D3, so I had to move DDS RESET from its original D3 connection with a bit of wire:DDS RESET - Arduino D7DDS SDAT - Arduino D4DDS FQ.UD - Arduino D5DDS SCLK - Arduino D6Arduino D2 & D3 are used for the encoder inputs A & B. D11 is used for the encoder switch input. D12 isn't used but I thought I'd make a screw terminal for it anyway, for future expansion.Arduino A4 & A5 provide the SDA & SCL (I2C) signals for the OLED screen.Arduino A0 & A1 take the inputs from the VSWR bridge (via the OPAMP).", "step_imgs": ["https://cdn.instructables.com/FT9/03WS/J08EBAYU/FT903WSJ08EBAYU.LARGE.jpg", "https://cdn.instructables.com/F63/TPTZ/J08EBA0O/F63TPTZJ08EBA0O.LARGE.jpg"], "step_title": "Step 2: Lay Out the Stripboard"}, {"step": 3, "steps_text": "It's worth testing the board before going to the trouble of mounting it into an enclosure. Attach the following components using flexible wire to the board using the screw terminal blocks:1.3\" OLED display (SDA and SCL are connected to Arduino pin A4 and A5 respectively; ground and Vcc go to Arduino GND and +5V, obviously)      Rotary encoder (this needs a ground, two signal lines and a switch line - you might need to flip the switch lines round if the encoder works the wrong way - connect these to Arduino ground, D2,D3 & D11 respectively). Note that for my prototyping work I mounted the 15/30 encoder onto a KH-XXX encoder module board, as the pins on the bare encoders are very flimsy. For the final job I soldered wires straight onto the encoder.     9V battery      SO-239 socket - solder the centre pin to the antenna signal line and use an M3 ring terminal and screw for the antenna groundFlash the following sketch onto the Arduino. Also make sure you have included the very good OLED driver library from Oli Kraus, or the complilation will crash and burn : https://github.com/olikraus/u8glib/If your OLED display is slightly different you may need a different configuration setting in u8glib; this is well documented in Oli's example code.", "step_imgs": ["https://cdn.instructables.com/FZZ/SIAC/J08EB9YQ/FZZSIACJ08EB9YQ.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 3: Install the Modules, Attach the Peripherals and Flash the Code"}, {"step": 4, "steps_text": "I seriously considered leaving the analyser as a bare board, as it was only likely to be used occasionally. On reflection though, I thought that if I was doing a lot of work on a single antenna, it might end up getting damaged. So everything went in a box. There's no point going into details about how this was done, as your box will likely be different, but some key features are worth mentioning:1. Use self-adhesive PCB standoffs for mounting the stripboard. They make life really easy.2. Use a short USB adaptor lead to bring out the Arduino USB port to the rear of the enclosure. Then it's easy to access the serial port to obtain frequency vs. VSWR data and also to reflash the Arduino without taking the lid off.3. I developed a custom 3D-printed part to support the OLED display, as I couldn't find anything on the web. This has a recess to allow one to insert a 2 mm piece of acrylic to protect the fragile screen. It can either be mounted using double-sided tape or self tapping screws (with the tabs on either side). Once the display has been fitted, you can use a hot wire (think paperclip and blowlamp) to melt the PLA pins onto the back of the circuit board to secure everything. Here's the STL file for anyone who's interested:", "step_imgs": ["https://cdn.instructables.com/F3J/4WRS/J08EBB6P/F3J4WRSJ08EBB6P.LARGE.jpg", "https://cdn.instructables.com/FJM/F930/J08EBB35/FJMF930J08EBB35.LARGE.jpg", "https://cdn.instructables.com/FS2/2FD3/J08EBBAL/FS22FD3J08EBBAL.LARGE.jpg", "https://cdn.instructables.com/FF1/LQDK/J08EBB47/FF1LQDKJ08EBB47.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 4: Put It All in a Nice Box (optional)"}, {"step": 5, "steps_text": "Originally I didn't do any calibration but discovered that the VSWR meter was consistently reading low. This meant that although an antenna appeared to be okay, my rig's autotuner wasn't able to match to it. This problem arises because the DDS module gives out a very low amplitude signal (about 0.5 Vpp at 3.5 MHz, rolling off as frequency increases). The detector diodes in the VSWR bridge are therefore operating in their non-linear region.There are two possible fixes for this. The first is to fit an broadband amplifier to the output of the DDS. Potentially suitable devices are available cheaply from China and they will boost the output to about 2 V pp. I have ordered one of these but have yet to try it. My feeling is that even this amplitude will be a bit marginal and some non-linearity will remain. The second method is to put known loads on the output of the existing meter and to record the displayed VSWR at each frequency band. This allows you to construct correction curves for actual versus reported VSWR, which can then be put into the Arduino sketch to apply correction on the fly. I adopted the second method as it was easy to do. Just get hold of the following resistors: 50, 100, 150 and 200 ohms. On this 50 ohm instrument these will correspond to VSWRs of 1,2,3 and 4 by definition. In the sketch there is a switch 'use_calibration'. Set this to LOW and upload the sketch (which will display a warning on the splash screen). Then carry out measurements at the centre of each frequency band for each resistor. Use a spreadsheet to plot expected versus displayed VSWR. You can then do a logarithmic curve fit for each frequency band, which gives a multiplier and intercept of the form TrueVSWR=m.ln(MeasuredVSWR)+c. These values should be loaded into the swr_results array in the last two columns (see the preceding comment statement in the sketch). This is an odd place to put them but I was in a hurry and as this array stores floats it seemed like a sensible choice at the time. Then put the use_calibration switch back to HIGH, reflash the Arduino and off you go.Note that when doing the spot frequency measurements, the calibration is applied for the initial choice of band. This won't be updated if you make gross changes in frequency.Now the meter reads as expected for the fixed loads and seems to make sense when measuring my antennas! I suspect I may not bother trying that broadband amp out when it arrives...", "step_imgs": ["https://cdn.instructables.com/FOO/F7RM/J1QP3L37/FOOF7RMJ1QP3L37.LARGE.jpg"], "step_title": "Step 5: Calibration"}, {"step": 6, "steps_text": "Attach an antenna via a PL-259 lead and switch the device on. It will display a splash screen then automatically perform a sweep of all the main HF bands. The display shows the frequency under test, the current VSWR reading, the minimum VSWR reading and the frequency at which it occurred. In order to reduce measurement noise, five measurements are taken of VSWR at every frequency point; the mean value of these five readings is then passed through a nine-point moving average filter with respect to frequency before the final value is displayed.If you want to stop this all-bands sweep, just press the encoder knob. The sweep will stop and a summary of all the band data gathered will be displayed (with nulls for those bands not yet swept). A second press will bring up the main menu. Choices are made by rotating the encoder and then pressing it at the appropriate point. There are three choices in the main menu:Sweep all bands will restart the sweep of all the main HF bands. When it finishes, it will display the summary screen described above. Write this down or take a photo if you want to keep it.Sweep single band will allow you to select a single band with the encoder then sweep it. Both the wavelength and frequency range are displayed while making the selection. When the sweep has finished, a second press of the encoder will display a simple VSWR versus frequency graph of the band just swept, with a numerical indication of minimum VSWR and the frequency that it occurred. This is very handy if you want to know whether to shorten or lengthen your dipole arms, as it shows the VSWR trend with frequency; this is lost with the simple numeric report.Single frequency allows you to choose a single fixed frequency and then continuously updates a live VSWR measurement, for antenna tuning purposes in real time. First select the relevant frequency band; the display will then show the centre frequency of the chosen band and a live VSWR reading. The relevant band calibration is applied at this point. One of the digits of the frequency will be underlined. This can be moved left and right with the encoder. Pressing the encoder emboldens the line; then rotating the encoder will reduce or increase the digit (0-9 with no wrap or carry). Press the encoder again to fix the digit, then go on to the next one. You can access pretty much any frequency across the entire HF spectrum using this facility - the band selection at the start just helps to get you close to where you probably want to be. There's a caveat though: the calibration for the selected band is loaded at the start. If you move too far away from the selected band by changing the digits the calibration will become less valid, so try to stay within the chosen band. When you have finished with this mode, move the underscore all the way to the right until it's under 'exit', then press the encoder to return to the main menu.If you connect your PC to the USB socket on the rear of the analyser (i.e. into the Arduino), you can use the Arduino serial monitor to collect frequency versus VSWR values during any sweep operation (it's currently set to 9600 but you can change that easily by editing my sketch). The values can then be put into a spreadsheet so you can plot more permanent graphs etc. The screenshot shows the VSWR summary for my 7.6 m fishing pole vertical antenna with 9:1 UNUN. My rig can accommodate a 3:1 max SWR with its internal auto-tuner unit. You can see that I will be able to tune it over all bands except 80 m and 17 m. So now I can relax in the knowledge that I've got a passable multi-band antenna and I'm not going to break anything expensive when transmitting on the majority of bands.Good luck and I hope you find this useful.", "step_imgs": ["https://cdn.instructables.com/F7R/2DKI/J08EDY8I/F7R2DKIJ08EDY8I.LARGE.jpg", "https://cdn.instructables.com/F3W/332S/J20PD0F7/F3W332SJ20PD0F7.LARGE.jpg"], "step_title": "Step 6: Using the Analyser"}], "channel": "Wireless"}, {"category": "technology", "description": "Action cameras have fish eye lenses so they can gather the widest field of view possible. With a macro lens, you can use one to get closeups of small objects with less distortion and more definition.With a macro lens, the background will be out of focus, so that the object you're trying to shoot takes center stage without any background distractions. I've provided a Fusion 360 file that you can use to quickly and easily make a custom adaptor for whatever action cam you have and 3D print it.", "title": "DIY Action Cam Macro Lens", "url": "https://www.instructables.com/id/DIY-Action-Cam-Macro-Lens/", "section": "technology", "steps": [{"step": 1, "steps_text": "Fusion 360 3D PrinterI use a Creality CR-10. It's the best bang for your buck, in my opinion.Use this coupon code at Gearbest to get it for $340: 1111CR10.3D Print FilamentI used BlackMatte Fiber HTPLA from Proto-pasta for this project, but pretty much any filament will work. This stuff is great for this project because it's important to avoid any kind of glare from the adaptor onto the back of the lens. Any black filament will do, but this stuff having a matte finish will ensure that there are no reflections at all from a glossy surface.Macro Filter Set: This is a 4-pack of 1X, 2X, 4X, and 10X lenses that will fit using the files I'm providing here (52mm). I'm using the +10 lens because the camera is super close to the subject.Action Camera: This design will work with the first 4 generations of GoPro, but I'm using an SJCam (works pretty well and is $90 on Gearbest with this coupon code: AFF1186).Calipers: These are as important to a digital fabrication maker as a tape measure is to a carpenter. You'll need them for this project and almost every other project I've posted.Fusion 360 is free and it's awesome. I use it for everything I design and fabricate. Student / Educator License (renew free every 3 years)Hobbyist / Startup (renew free yearly)", "step_imgs": [], "step_title": "Step 1: Tools + Materials"}, {"step": 2, "steps_text": "Follow this link to open the Fusion 360 file: http://a360.co/2zZrXTcWhen it's open, go to Modify > Change Parameters and make sure the \"lensDiameter\" parameter matches the diameter of your action cam lens.My lens is 22.4mm in diameter, but each camera model will probably be different. Use a pair of calipers to measure your lens diameter and enter that value under Expression in \"lensDiameter\". I usually stick to one decimal place when I use measurements of real things because 1/100th of a millimeter is way out of the range of precision for just about everything I make. It helps to keep these measurements simple so you can keep the project in your head more easily.The other parameter there is \"fitOffset\" which is the tolerance. If you increase this, the fit will be looser, if you decrease it the fit will be tighter. This takes a bit of trial and error and it's different for different materials. If you turn on the section analysis (Browser > Analysis > Section), you'll see a cross-section of the lens, adaptor, and cap. If you adjust the parameters, you'll be able to see the diameter of the adaptor change and the gaps between the parts change.Here's an example where the lens is 20mm in diameter.Here's an example where the lens is 25mm in diameter.", "step_imgs": ["https://cdn.instructables.com/FFO/DIG6/J9YJG1JT/FFODIG6J9YJG1JT.LARGE.jpg", "https://cdn.instructables.com/FE6/3SRE/J9YJG1J2/FE63SREJ9YJG1J2.LARGE.jpg", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 2: Using the Model"}, {"step": 3, "steps_text": "There's nothing to it. Just press-fit the lens into the adaptor and press-fit the adaptor onto the camera lens. If the fit is too tight or too loose, adjust the tolerance parameter accordingly and print another version.", "step_imgs": ["https://cdn.instructables.com/FOR/T085/J9YJG2TF/FORT085J9YJG2TF.LARGE.jpg", "https://cdn.instructables.com/FI6/RFYY/J9YJG2UD/FI6RFYYJ9YJG2UD.LARGE.jpg", "https://cdn.instructables.com/FD2/3LPF/J9YJG2UF/FD23LPFJ9YJG2UF.LARGE.jpg", "https://cdn.instructables.com/F1X/H0GJ/J9YJG2UG/F1XH0GJJ9YJG2UG.LARGE.jpg", "https://cdn.instructables.com/F65/0UPT/J9YJG2UJ/F650UPTJ9YJG2UJ.LARGE.jpg", "https://cdn.instructables.com/FJY/OPSI/J9YJG2V6/FJYOPSIJ9YJG2V6.LARGE.jpg", "https://cdn.instructables.com/F7I/RG3J/J9YJG2VT/F7IRG3JJ9YJG2VT.LARGE.jpg", "https://cdn.instructables.com/FDR/MV6P/J9YJG2VV/FDRMV6PJ9YJG2VV.LARGE.jpg", "https://cdn.instructables.com/FYK/NG2D/J9YJG2W9/FYKNG2DJ9YJG2W9.LARGE.jpg", "https://cdn.instructables.com/FZT/JBSG/J9YJG2WN/FZTJBSGJ9YJG2WN.LARGE.jpg", "https://cdn.instructables.com/FNX/Q3RT/J9YJG2X1/FNXQ3RTJ9YJG2X1.LARGE.jpg", "https://cdn.instructables.com/FTX/WG3U/J9YJG2X2/FTXWG3UJ9YJG2X2.LARGE.jpg", "https://cdn.instructables.com/FMO/8QCM/J9YJG2XK/FMO8QCMJ9YJG2XK.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 3: Assembly"}, {"step": 4, "steps_text": "This macro lens is good for 3D printing time-lapses because it doesn't distort the image so much and it puts all the background stuff out of focus. I'm using my macro lens with a time-lapse rig I made that's pictured here. It's got a USB cable clip that takes pressure off of the usb power jack and an LED grid for direct lighting.Here's a link to that Fusion file if you want to print the parts and make your own, if there's any interest I might make an instructable on the assembly and electronics too: http://a360.co/2iWYPkf", "step_imgs": ["https://cdn.instructables.com/F5U/E2LG/J9YJG32A/F5UE2LGJ9YJG32A.LARGE.jpg", "https://cdn.instructables.com/FSN/5W57/J9YJG32O/FSN5W57J9YJG32O.LARGE.jpg", "https://cdn.instructables.com/F39/OHIJ/JA1TQ28M/F39OHIJJA1TQ28M.LARGE.jpg", "https://cdn.instructables.com/FEC/KUEX/JA1TQ28S/FECKUEXJA1TQ28S.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 4: Get Some Time-lapse!"}], "channel": "3D Printing"}, {"category": "technology", "description": "This Instructable describes how to make a weighing scale using readily available off the shelf parts.Materials needed:Arduino - (this design uses a standard Arduino Uno, other Arduino versions or clones should work also)    HX711 on breakout board - This microchip is specially made for amplifying the signals from load cells and reporting them to another mircocontroller.  The load cells plug into this board, and this board tells the Arduino what the load cells measure.    50kg load cells (x4) - Load cells are specially shaped metal parts that have strain gauges glue to them.  The strain gauges are resistors that change their resitance when they are bent.  When the metal part bends, the resistance of the load cell changes (the HX711 measures this small change in resistance accurately).  You can buy the load cells and HX711 as a kit here: https://www.amazon.com/Degraw-amplifier-weight-Arduino-Bathroom/dp/B075Y5R7T7/  If you do purchase the kit please leave a review!  It is really helpful for future buyers.Sturdy flat mounting surface - a stiff piece of hardwood or metal is ideal    Wires in various colors for connecting all the parts    Power supply for Arduino", "title": "Arduino Bathroom Scale With 50 Kg Load Cells and HX711 Amplifier", "url": "https://www.instructables.com/id/Arduino-Bathroom-Scale-With-50-Kg-Load-Cells-and-H/", "section": "technology", "steps": [{"step": 1, "steps_text": "Mount the 4 load cells to the bottom of the scale in the four corners.  Epoxy works well to hold them in place.  See the mounting diagram, it shows which surface should be mounted to the base and which surface should touch the floor.", "step_imgs": ["https://cdn.instructables.com/FHV/GN9W/J7QGHZGX/FHVGN9WJ7QGHZGX.LARGE.jpg", "https://cdn.instructables.com/FD0/V65U/J7QGHZGY/FD0V65UJ7QGHZGY.LARGE.jpg"], "step_title": "Step 1: Mount the Load Cells"}, {"step": 2, "steps_text": "The wiring diagram is made assuming the load cell is constructed like this picture.To make sure you get it right, be sure to figure out which two terminals on the load cells have the highest resistance between them (E.g. Black and White, to match the schematic), wire them in a big color matching loop, like B-B W-W B-B W-W and then excite (E+/E-) two opposite center taps (R) and sense (A+/A-) on the other pair of center taps.This page on Sackexchange has even better information: https://arduino.stackexchange.com/questions/11946/how-to-get-weight-data-from-glass-electronic-bathroom-scale-sensors/18698#18698", "step_imgs": ["https://cdn.instructables.com/FRW/FFU0/J822XYDL/FRWFFU0J822XYDL.LARGE.jpg"], "step_title": "Step 2: Verify the Load Cell Wiring "}, {"step": 3, "steps_text": "See the wiring diagram for how to connect the load cells, HX711, and Arduino. Some of the load cell wires are connected together to form what is called a Wheatstone bridge arrangement.  This can get a little confusing.  A good option for connecting all the load cells in a clean, easy to understand way is the SparkFun load cell combinator board - https://www.sparkfun.com/products/13878This arrangement allows the loads on all of the different load cell sensors to be combined and measured at once.", "step_imgs": ["https://cdn.instructables.com/FCD/BMOB/J822Y1Q6/FCDBMOBJ822Y1Q6.LARGE.jpg", "https://cdn.instructables.com/FTY/ABC8/J7QGHZGH/FTYABC8J7QGHZGH.LARGE.jpg", "https://cdn.instructables.com/FGC/AMQI/J7QGHZGW/FGCAMQIJ7QGHZGW.LARGE.jpg"], "step_title": "Step 3: Wire the Load Cells and HX711"}, {"step": 4, "steps_text": "The HX711 library is available here:  https://github.com/bogde/HX711See this link on the Arduino website for instructions on how to add the library to your Arduino IDE: https://www.arduino.cc/en/Guide/Libraries", "step_imgs": [], "step_title": "Step 4: Add HX711 Library to Your Arduino IDE"}, {"step": 5, "steps_text": "Sparkfun has great Arduino programs to run the scale.  The most up to date versions are available on GitHub and reprinted below: https://github.com/sparkfun/HX711-Load-Cell-AmplifierThe first software step is to determine calibration factors for the scale.  To do this, run this code:/*\n Example using the SparkFun HX711 breakout board with a scale\n By: Nathan Seidle\n SparkFun Electronics\n Date: November 19th, 2014\n License: This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).\n\n This is the calibration sketch. Use it to determine the calibration_factor that the main example uses. It also\n outputs the zero_factor useful for projects that have a permanent mass on the scale in between power cycles.\n\n Setup your scale and start the sketch WITHOUT a weight on the scale\n Once readings are displayed place the weight on the scale\n Press +/- or a/z to adjust the calibration_factor until the output readings match the known weight\n Use this calibration_factor on the example sketch\n\n This example assumes pounds (lbs). If you prefer kilograms, change the Serial.print(\" lbs\"); line to kg. The\n calibration factor will be significantly different but it will be linearly related to lbs (1 lbs = 0.453592 kg).\n\n Your calibration factor may be very positive or very negative. It all depends on the setup of your scale system\n and the direction the sensors deflect from zero state\n This example code uses bogde's excellent library:\"https://github.com/bogde/HX711\"\n bogde's library is released under a GNU GENERAL PUBLIC LICENSE\n Arduino pin 2 -> HX711 CLK\n 3 -> DOUT\n 5V -> VCC\n GND -> GND\n\n Most any pin on the Arduino Uno will be compatible with DOUT/CLK.\n\n The HX711 board can be powered from 2.7V to 5V so the Arduino 5V power should be fine.\n\n*/\n\n#include \"HX711.h\"\n\n#define DOUT  3\n#define CLK  2\n\nHX711 scale;\n\nfloat calibration_factor = -7050; //-7050 worked for my 440lb max scale setup\n\nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"HX711 calibration sketch\");\n  Serial.println(\"Remove all weight from scale\");\n  Serial.println(\"After readings begin, place known weight on scale\");\n  Serial.println(\"Press + or a to increase calibration factor\");\n  Serial.println(\"Press - or z to decrease calibration factor\");\n\n  scale.begin(DOUT, CLK);\n  scale.set_scale();\n  scale.tare(); //Reset the scale to 0\n\n  long zero_factor = scale.read_average(); //Get a baseline reading\n  Serial.print(\"Zero factor: \"); //This can be used to remove the need to tare the scale. Useful in permanent scale projects.\n  Serial.println(zero_factor);\n}\n\nvoid loop() {\n\n  scale.set_scale(calibration_factor); //Adjust to this calibration factor\n\n  Serial.print(\"Reading: \");\n  Serial.print(scale.get_units(), 1);\n  Serial.print(\" lbs\"); //Change this to kg and re-adjust the calibration factor if you follow SI units like a sane person\n  Serial.print(\" calibration_factor: \");\n  Serial.print(calibration_factor);\n  Serial.println();\n\n  if(Serial.available())\n  {\n    char temp = Serial.read();\n    if(temp == '+' || temp == 'a')\n      calibration_factor += 10;\n    else if(temp == '-' || temp == 'z')\n      calibration_factor -= 10;\n  }\n}After calibrating the scale, you can run this sample program, then hack it up for your own purposes:/* \n Example using the SparkFun HX711 breakout board with a scale\n By: Nathan Seidle\n SparkFun Electronics\n Date: November 19th, 2014\n License: This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).\n\n This example demonstrates basic scale output. See the calibration sketch to get the calibration_factor for your\n specific load cell setup.\n\n This example code uses bogde's excellent library:\"https://github.com/bogde/HX711\"\n bogde's library is released under a GNU GENERAL PUBLIC LICENSE\n\n The HX711 does one thing well: read load cells. The breakout board is compatible with any wheat-stone bridge\n based load cell which should allow a user to measure everything from a few grams to tens of tons.\n Arduino pin 2 -> HX711 CLK\n 3 -> DAT\n 5V -> VCC\n GND -> GND\n\n The HX711 board can be powered from 2.7V to 5V so the Arduino 5V power should be fine.\n\n*/\n\n#include \"HX711.h\"\n\n#define calibration_factor -7050.0 //This value is obtained using the SparkFun_HX711_Calibration sketch\n\n#define DOUT  3\n#define CLK  2\n\nHX711 scale;\n\nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"HX711 scale demo\");\n\n  scale.begin(DOUT, CLK);\n  scale.set_scale(calibration_factor); //This value is obtained by using the SparkFun_HX711_Calibration sketch\n  scale.tare(); //Assuming there is no weight on the scale at start up, reset the scale to 0\n\n  Serial.println(\"Readings:\");\n}\n\nvoid loop() {\n  Serial.print(\"Reading: \");\n  Serial.print(scale.get_units(), 1); //scale.get_units() returns a float\n  Serial.print(\" lbs\"); //You can change this to kg but you'll need to refactor the calibration_factor\n  Serial.println();\n}", "step_imgs": [], "step_title": "Step 5: Calibrate and Weigh!"}], "channel": "Arduino"}, {"category": "technology", "description": "Ultrasound ranging is a complicated task that made easy by the readily available module for Arduino. To detect or measure the distance it transmits the signal to the target and target reflects that back. Arduino measure time is taken for complete travel. As the speed of sound is known the distance in between module and target can be calculated easily. Typically this sensor is used to just measure the distance from target here I am trying you get exact location/coordinate of the target. I have used HC-SR04 for the purpose. Two of this sensor would be required for the purpose.I tried to explain similar thing on below video.", "title": "Ultrasound Sensor: 2D Tracking With Arduino", "url": "https://www.instructables.com/id/Ultrasound-Sensor-2D-Tracking-With-Arduino/", "section": "technology", "steps": [{"step": 1, "steps_text": "To check the accuracy of this sensor I placed a target in front of it and measured the distance by using the ultrasound sensor and also by ruler scale. Measurement by ultrasound sensor is strength forward.  Follow this article if for details if required. from the above plot, it is very clear that output from the sensor is fairly linear. Slop is also almost one (as expected) and standard deviation of the error is around 9mm. which is a mostly static error. As I was measuring all distances from the extreme end of the sensor, while Arduino measures it from the transmitting and sensing element. ", "step_imgs": ["https://cdn.instructables.com/FHH/199H/JPGSQXPY/FHH199HJPGSQXPY.LARGE.jpg", "https://cdn.instructables.com/F1E/UYM5/JPGSQX24/F1EUYM5JPGSQX24.LARGE.jpg"], "step_title": "Step 1: Calibrating the Sensor"}, {"step": 2, "steps_text": "In the previous case, we were measuring only one distance from the target that gives a circle of that measured radius. the object can be anywhere on the circumference of the circle. But the sensor operates only on the cone shape area so the possibility is reduced to an arc (from a circle).If we add one more sensor aside the first sensor, the intersection of both of these sensors will give the exact location of the target.As shown in the 4th figure, both sensor has an operating cone, the area where both of the cones intersects, the exact location can be calculated.if the object is in the area which covered by only one cone than only range can be calculated. and obviously, we will get no idea about an object if it is outside of these cones. ", "step_imgs": ["https://cdn.instructables.com/FKM/EU68/JPGSQX1Y/FKMEU68JPGSQX1Y.LARGE.jpg", "https://cdn.instructables.com/FZU/QOR6/JPGSQX1Z/FZUQOR6JPGSQX1Z.LARGE.jpg", "https://cdn.instructables.com/FOH/I1C1/JPGSQX20/FOHI1C1JPGSQX20.LARGE.jpg", "https://cdn.instructables.com/FA1/KJXS/JPGSQX23/FA1KJXSJPGSQX23.LARGE.jpg"], "step_title": "Step 2: Measurement for 2D Coordinate: Concept"}, {"step": 3, "steps_text": "By measuring distance by two sensors a triangle will be created. in which one angle is the target and rests two angles are sensors. length of all sides of this triangle is known.Triangle is completely constrained and any required data can be calculated by applying basic geometry. to measure coordinate od the target cosine rule is applied from which angle from one of the sensor can be calculated which further can be converted to Cartesian coordinate (or polar coordinate with a required reference point).Attached Image shows formula to calculate location.", "step_imgs": ["https://cdn.instructables.com/FRZ/PER8/JPGSQX2B/FRZPER8JPGSQX2B.LARGE.jpg"], "step_title": "Step 3: Measurement for 2D Coordinate: Calculation"}, {"step": 4, "steps_text": "Setup is very simple, as discussed before it required at least two of these ultrasound sensors. I have attached it on the breadboard. That distance between these modules needs to be measured. this distance needs to measure from left extream of one sensor to left of another sensor or vice versa. below point need to be considered while selecting separation distance between the sensor.-If the target is closer then both of these sensors need to be slightly closer, such that the cone of these sensor intersects at close distance.The lower separation will lead to lower accuracy (especially at the high range) and higher separation distance will lead to better accuracy.An angle of sensor facing can be changed as per requirement to intersect cones of the sensor.Woking of Code:working of code will follow below steps:Measure range of sensor 1,Measure range of sensor 2,solve the coordinate.Code is available at below link:Once the system is set up it can be tested for the various target for accuracy. refer video from 2:28 onward:", "step_imgs": ["https://cdn.instructables.com/FKI/FXNT/JPGSQZ1U/FKIFXNTJPGSQZ1U.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 4: Measurement for 2D Coordinate: Setup"}, {"step": 5, "steps_text": "As shown in the previous video this sensor is having relatively poor resolution in the lateral direction. which can be enhanced by-Taking multiple samples and averaging the results and/ormultiple sensors for measurement such that a higher number of distance details are available to get the exact location.This method can be extended to 3D by adding the third sensor out of the plan.  ", "step_imgs": ["https://cdn.instructables.com/FAK/W7AL/JPGSQXPZ/FAKW7ALJPGSQXPZ.LARGE.jpg"], "step_title": "Step 5: Summary and Possiblity:"}], "channel": "Arduino"}, {"category": "technology", "description": " What is the Project AboutThis is a device capable of recording and recognizing sophisticated 3d gestures and carrying out a preset action if the gesture matches, maybe changing the slide of a presentation, increasing volume or anything else that can be done using a keyboard and mouse.For example: rotate the hand counter-clockwise to go to the previous slide & twist the hand to go to the next slide.Some of its key featuresCan identify any sophisticated 3-Dimensional gestures.Recognise gestures using Dynamic Time Warping (DTW) algorithm.It communicates wirelessly to PC via Bluetooth, no need to connect any additional device to PC for communication.Has an OLED display and menu styled user interface for easy navigation.It is a standalone device, entire processing is done internally in Arduino Mega.It can remember gestures even after power is lost and retrieve after it is repowered again.How it all startedIt all started as fantasy if I could change the slides of the presentation with hand gestures instead of pressing those boring old buttons of a  slide changer or a laptop.Before actually building the device, I had some requirements for itRequirementsShould be as cheap as possible.Need to be small, portable and battery powered.All processing should be done internally, it should be a standalone device.Should communicate wirelessly, there should not be any additional receivers.Should be able to record custom gesture", "title": "Gesture Controlled PPT Changer", "url": "https://www.instructables.com/id/Gesture-Controlled-PPT-Changer/", "section": "technology", "steps": [{"step": 1, "steps_text": "Arduino Mega -  link0.96-inch I2C OLED display -  linkMPU-6050 accelerometer gyroscope combo -  linkHC-05 Bluetooth module -  linkFTDI programmer -  linkPerfboard -  linkPush button * 2 -  linkBattery -  linkAnd some other common electronics components and tools such as soldering iron, USB cables etc...Please use the above affiliate links to buy any of the above components, it will help in the future existence of the project.", "step_imgs": ["https://cdn.instructables.com/FKV/G31A/JQ6YIDLO/FKVG31AJQ6YIDLO.LARGE.jpg"], "step_title": "Step 1: Parts Required"}, {"step": 2, "steps_text": "In this project, we need to send commands to the PC to change the slides, as we don't want any receivers to insert in the USB port of PC, we can proceed further with Bluetooth. By default, the firmware which is present in the most common Bluetooth module, HC-05 can act as a slave only.We need an HID (Human Interface Device) compatible Bluetooth module configured as a wireless Bluetooth keyboard to send commands to the PC to change slides. We have two options for an HID device, one is to directly buy a HID compatible Bluetooth module RN-42 like this which costs 10x of ordinary Bluetooth module or to flash the firmware of RN-42 to HC-05, both of the modules are based on similar hardware. I have learnt to change the firmware of HC-05 from Brian Lough and Evan Kale, they have done a wonderful job in explaining how to change the firmware, it makes no sense in reproducing the same here again, so I would like to leave links to their videos and give you the firmware files I have. Find Brian Lough's video hereFind Evan Kale's video hereAll the files required for firmware change can be downloaded from the google drive link here", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 2: \u200bConfigure the HC-05 Bluetooth Module As HID (Human Interface Device) Device"}, {"step": 3, "steps_text": "Now that you have an HID compatible Bluetooth module, you can start building the hardware. Download the Fritzing circuit schematic file from here. I recommend to build all the hardware on a piece of perf board and keep it as a shield for Arduino mega.", "step_imgs": ["https://cdn.instructables.com/FFS/LOH5/JQ6YIC14/FFSLOH5JQ6YIC14.LARGE.jpg", "https://cdn.instructables.com/FLD/J2HE/JQ6YIE3Q/FLDJ2HEJQ6YIE3Q.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 3: Building the Hardware"}, {"step": 4, "steps_text": "This is the most important part of the project, the code.Before actually opening my code, I would like to recommend you go to preferences and enable \"Code Folding\" if you are using Arduino IDE, now you can fold the parts of the code to get a clear idea of the code.You can find the most updated code from my Github page.There are many parts in the code, let me explain each part individually.If you have any doubts, comment it down, I will be happy to help.", "step_imgs": ["https://cdn.instructables.com/FSV/2WY5/JQ6YCYR4/FSV2WY5JQ6YCYR4.LARGE.jpg", "https://cdn.instructables.com/FA0/9XQ2/JQ6YCZGU/FA09XQ2JQ6YCZGU.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 4: Building the Software"}, {"step": 5, "steps_text": "The first step in the process of recognising gestures is to record them, and to record gestures, we are using accelerometer readings from MPU-6050. The function that I have created for recording gestures is take_reading(), refer it in the code. For gesture to be clear the sample size needs to be large and for faster processing, the gesture size needs to be small, I have found 50 to be a good fit for both the conditions. Now if we want to record longer gestures, we can average out every 2 or 3 elements to get gesture to 50 elements.#define DOF 3\t//3-degrees of freedom acc_x, acc-y, acc_z\n#define avg_lenght 2 \t//average out every 2 elements of reading\n#define sample_size 50\t\n\nint reading[DOF][avg_lenght*sample_size];\t//creating a 2-D array to store readings\n\n//taking readings\nfor(i=0; i<avg-lenght*sample_size; i++)\n{\n  MPU6050.update();\n\n  reading[0][i] = mpu6050.getAccX();\t//taking readings of acceleration in g's, 1g, 1.2g\n  reading[0][i] = reading[0][i]*50 + 50;   //ofsetting the value to 50\n  if(reading[0][i]<0)\t//limiting its value from 0 to 100 \n    reading[0][i]=0;\n  else if(reading[0][i]>100)\n    reading[0][i]=100;\n\n  //repeating the same for remaining 2 degrees of freedom, acc_y, acc_z\n}\nWe have taken the readings, but these are not of sample_size elements, these are of sample_size*avg_lenght elements, we need sample_size elements, so we need to average it out.if(avg_lenght>1)\t//if we need to average\n{\n  for(i=0; i<DOF; i++)\t\t//for each DOF\n  {\n    for(j=0; j<sample_size; j++)\n    {\n      for(k=0; k<avg_lenght; k++)\n      {\n        sum=sum+reading[i][avg_lenght*j+k];\t//add every avg_lenght elemens\n      }\n      temp_values[i][j]=sum/avg_lenhgt;\t\t//save avg of avg_lenght elements here\n      sum=0;\n    }\n  }\n}\n\n\nelse if(avg-lenght==1)\t//no need to average\n{\n  for(i=0; i<DOF; i++)\n  {\n    for(j=0; j<sample_size; j++)\n      temp_values[i][j]=reading[i][j];\t//simply copying values to temp_values\n  }\n}<br>Now readings for all DOF's are taken and saved to temp_values array.", "step_imgs": [], "step_title": "Step 5: Recording Gestures"}, {"step": 6, "steps_text": "Now that we know how to record a gesture, we need a way to save that as a master gesture so that we can compare a gesture to it later.The function that I have created for copying a gesture to master gesture array is copy_reading(from, to master, master _select), refer the code.for(i=0; i<DOF; i++)\n{\n  for(j=0; j<sample_size; j++)\n  {\n    master[master_select][i][j] = temp_values[i][j];\n  }\n}Now, we can record a gesture, save it as a master gesture.", "step_imgs": [], "step_title": "Step 6: Saving the Recorded Gesture As Master Gesture"}, {"step": 7, "steps_text": "We have saved the master gesture, but as soon as power is lost all the gestures saved till now will be lost. We need some way to save them so that we can retrieve them back again after the device is powered again.We can use external  I2C EEPROM's and attach these to Arduino, but this increases the cost, which we don't want. We can indeed use Arduino's internal EEPROM to save gestures. For that, we need to include EEPROM.h library and we are ready to go.The function to save master gestures to EEPROM is EEPROM_write().int master_select;\t//to select which master to select to EEPROM\n//save 0-49 for master-0-x, 50-99 for master-0-y, 100-149 for master-0-z .....\nfor(i=0; i<DOF; i++)\n{\n  for(j=0; j<sample_size; j++)\n  {\n    addr=(master_select*sample_size)+(i*DOF)+j;\n    EEPROM.write(addr, master[master_select][i][j]);  //write value of master to specific address<br>    delay(5);\t//time to write to EEPROM\n  }\n}The function to retrieve master gestures from EEPROM is EEPROM_read().int master_select\nfor(i=0; i<DOF; i++)\n{\n  for(j=0; j<sample_size; j++)\n  {\n    addr=(master_select*sample_size)+(i*DOF)+j;\n    master[master_select][i][j]=EEPROM.read(addr);   //save value from EEPROM to master gesture\n    delay(5);\n  }\n<p>}</p>", "step_imgs": [], "step_title": "Step 7: Saving Gestures to EEPROM\u200b"}, {"step": 8, "steps_text": "Nov that we can record a gesture and master gesture, we need something to compare both, that's where DTW algorithm comes into play...The function for DTW in the code is calc_DTW_score(), functions abs_sum() and Min() will be used in DTW calculations.What is the Dynamic Time Warping (DTW) algorithm?It is an algorithm to find how similar any two time-varying series are. It was initially developed for speech recognition purposes. For more details visit  Wikipedia.Higher the DTW_score, lesser the two time series are matching. For detection of matching the pair of a series, we can compare it to multiple series, with whichever series the DTW score is minimum, it is the matching series.  How to implement it?I didn't find any simple library (that is suitable to run on 16 Mhz processors of Arduino) or code written for Arduino, so I need to build it. The whole algorithm that I have written is most simple I could get it to, and it is based on this video.You can find only the DTW algorithm that I have implemented here.The above picture is the matrix for DTW calculation, highlighted elements of the first row and first column are the elements we are comparing. the rest of the elements are required for calculation of DTW score.cell  = difference of corresponding elements of arrays comparing + minimum of previously computed 3 valuesAs we are going to use difference and minimum of elements, I have created two separate functions \"abs_sub\" and \"Min\" for further use.The elements (1, 1), (2, 1) & (1, 2) are just difference of corresponding elements of arrays, so the code for it is as below.a[1][1]=abs_sub(a[1][0], a[0][1]);      //first element\na[2][1]=abs_sub(a[2][0], a[0][1]);\na[1][2]=abs_sub(a[1][0], a[0][2]);<br>The remaining elements of the second row and second columns are difference + min of previously calculated 3 values, which is the previous element.x=1\t\t//first row remaining elements\nfor(y=2; y<matrix_size; y++)\n  a[x][y] = abs_sum(a[x][0], a[0][y]) + a[x][y-1];\n\ny=1\t\t//first coulum remaining elements\nfor(x=2; x<matrix_size; x++)\n  a[x][y] = abs_sub(a[x][0], a[0][y]) + a[x-1][y]\nNow, the rest of the elements can be calculatedfor(x=2; x<matrix_size; x++)\n{\n  for(y=2; y<matrix_size; y++)\n  {\n    a[x][y] = abs_sub(a[x][0], a[0][y]) + Min(a[x][y-1], a[x-1][y], a[x-1][y-1])\n  }\n}Now that we have calculated the entire DTW matrix, we can now calculate the DTW score, by adding up the minimum of the next 3 elements from the bottom right to top left, see the image above for more clarity.x = sample_size;\t//moving to bottom right\ny = sample_size;\nDTW_score = a[x][y];\t//sarting adding from there\n\n\nwhile(x!=0 && y!=0)\t//till top left is reached\n{\n  if(a[x-1][y-1]<=a[x][y-1] && a[x-1][y-1]<=a[x-1][y])\t\t//if diagonal is minimum\n  {\n    DTW_score = DTW_score + a[x-1][y-1];\t//add it\n    x--;\t//go to its position\n    y--;\n  }\n  else if()    //if top is minimum\n  {\n    DTW_score = DTW_score + a[x][y-1];\n    y--;\n  }\n  else \t\t//add its side\n  {\n    DTW_score = DTW_score + a[x-1][y];\n    x--;\n  }\n  //repeat until top left is reached\n}\n\n\nreturn DTW_score;\t//done calculating DTW scoreThe calculation of DTW_score is completed when the top left is reached. Now this score can be used to compare how similar any two series are.", "step_imgs": ["https://cdn.instructables.com/FXH/Q4ND/JQGYNSCW/FXHQ4NDJQGYNSCW.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 8: The Dynamic Time Warping Algorithm"}, {"step": 9, "steps_text": "We now have DTW algorithm to compare a gesture to several master gestures, we need to set actions to do if the gesture matches with a master gesture.The function for this in the code is do_action(int a).You can do all the things that you can do with a keyboard, maybe increasing the volume of video playing or do an action with multiple key presses (ctrl+shift+esc) to turn on task manager, maybe launching an application by using  Autohotkey and many more.You can enter all commands by using this  USB HID table.For entering a number,  character or a phrase, you can use Bluetooth_HID.write / print(\"some character or phrase\"); and for entering a key from USB HID table, you need to use Bluetooth_HID.print(\"something\", HEX);  Some commands in PowerPoint Presentationn - go to next slidep - go to the previous slidew - display white screenb - display black screenif(a==0)\t//do action corresponding to master 0 gesture\n{\n  bluetooth_HID.write(\"n\"); \t//send keystroke n from HID Bluetooth module as sent from wireless keyboard\n}\n//actions for remainging masters", "step_imgs": [], "step_title": "Step 9: Adding an Action to Do If Gesture Match"}, {"step": 10, "steps_text": "We have all the necessary functions for recognising a gesture and additional, now we need a User Interface to access all of the functions.If you don't want to create a User Interface, you could go with the most simple code I have created and modify it according to your need.Here I have created User Interface in the void loop...The first step is to initialize the display by cleaning it and setting the text size and text position#define display_init display.clearDisplay();display.setTextSize(1);display.setTextColor(WHITE);display.setCursor(0,0)after this, we can display the desired text on the displaywhile(1)\n{\n  display_init;\t//initialize display\n  \n  display.println(\"What?\");\n  display.println(\"  a. test gesture\");\n  display.println(\"  b. record master\");\n  display.println(\"  c. update EEPROM\");\n  display_set_cursor(line);\t//function we have created to display a cursor on selected line\n  display.display();\t//update the screen\n\n  //press down_button to move cursor down\n  if(down_buton_pressed)\n  {\n    delay(10);\t//to remove button bouncing\n    line++\t//go to next line\n    if(line>2)\t//if reached to last line\n      line=0;\t//go to first line\n  }\n\n  //press select_button to select option where cursor is present\n  if(select_button_pressed)\n  {\n    delay(10); \t\t//to remove button bouncing\n    break;\t//go to next lines by crossing while(1)\n  }\n}\n\nif(line==0)\t//if option on line 0 is selected, to test gesture\n{\n  display_init;\t//initialize display\n  display.println(\"recording gesture\");\n  display.display();  digitalWrite(13, HIGH);\n\n  take_reading();\n\n  digitalWrite(13, LOW);\n  display_init;\n  display.println(\"done recording gesture\");\n  display.display();\n\n  for(i=0; i<num_masters; i++)\t\t//calculate DTW_score for each master\n    DTW_score[i]=calc_DTW_score(temp_values, master, i);\n  \n  min_score=DTW_score[0];\t//finding minimum of all DTW_scores\n  for(i=1; i<num_masters; i++)\n  {\n    if(DTW_score[i]<min_score)\n      min_score=DTW_score[i];\n  }\n\n  for(i=0; i<num_masters; i++)\t//finding minimum is which master\n  {\n    if(min_score==DTW_score[i])\n      break;\t//exit from for loop\n  }\n\n  display_init;\n  display.println(\"master is: \");\n  display.println(i);\t\t//display master on screen\n  display.display();\n  do_action(i);\t\t//do corresponding action to master gesture\n  delay(2000); \t//display on screen for 2 seconds\n}\n\nelse if(line==1)\t//similarly for line 1 and line 2\n{\n}\n\nelse if(line==2)\n{\n}\nDone!", "step_imgs": ["https://cdn.instructables.com/FTE/W33O/JQ6YI4G3/FTEW33OJQ6YI4G3.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 10: Creating a User Interface "}], "channel": "Arduino"}, {"category": "technology", "description": "To measure the amount of fog or smoke in the air we made this fog sensor. It measures the amount of light a LDR receives from a laser, and compares it to the amount of light of the surrounding. It posts the data on a google sheet realtime via IFTTT. ", "title": "Fog Sensor - Particle Photon - Save Data Online", "url": "https://www.instructables.com/id/Fog-Sensor-Particle-Photon-Save-Data-Online/", "section": "technology", "steps": [{"step": 1, "steps_text": "- Particle Photon- 2x Breadboard- jumper wires- 2x 220k Ohm resistors- 3x 10k Ohm resistors- 3 LED's (green, red, yellow)- Humidity Sensor (DHT11)- 2x LDR- Laser- Some timber or similar household materials for assembling the components. - Something to cover the sensors ( i.e. a pvc duct)", "step_imgs": ["https://cdn.instructables.com/FF3/5JZS/JAIJJCPZ/FF35JZSJAIJJCPZ.LARGE.jpg", "https://cdn.instructables.com/FFO/HXS6/JAIJJCQ1/FFOHXS6JAIJJCQ1.LARGE.jpg", "https://cdn.instructables.com/F62/AXQL/JAIJJCQG/F62AXQLJAIJJCQG.LARGE.jpg", "https://cdn.instructables.com/FTJ/ZE4X/JAIJJCW2/FTJZE4XJAIJJCW2.LARGE.jpg"], "step_title": "Step 1: Ingredients"}, {"step": 2, "steps_text": "Connect the wires following the picture. Pin D7 allready has an internal resistor, so it can be connected directly to the LED. ", "step_imgs": ["https://cdn.instructables.com/FK7/ADCV/JAIJJCPI/FK7ADCVJAIJJCPI.LARGE.jpg"], "step_title": "Step 2: Setting Up the LED's"}, {"step": 3, "steps_text": "Connect the wires as denoted in the picture. We used a second breadboard for holding the LDR sensors, but they could also be connected directly. The exact distance between the laser and LDR isn't important, however it should be at least 30 cm. The laser should be pointed at one of the LDR's, so the second LDR can be used as a reference. They should be exposed to the same amount of light from the surroundings. Make sure all the equipment is connected very rigidly, a small change in the direction of the laser screws up your measurements. We used a pvc duct to shield the LDR's from direct light from the surroundings. You can be creative and use some cardboard or other materials as well. Make sure the fog or smoke can still enter the laser beam. ", "step_imgs": ["https://cdn.instructables.com/F27/VP6W/JAIJJCPG/F27VP6WJAIJJCPG.LARGE.jpg"], "step_title": "Step 3: Setting Up the LDR's, Laser and Humidity Sensor"}, {"step": 4, "steps_text": "Coding is done at build.particle.io. In console.particle.io the published values will be displayed. The code we used can be found in the .txt file. The particle software doesn't automatically understand the first line. You need to add the Adafruit_DHT library manually. Further explanations:To calibrate the LDR's the laser is turned off at the beginning. Both LDR's are compared over a series of measurements and the measured difference is set as 'DS' . This is the difference in sensitivity of the LDR's. To calibrate the surrounding light, the laser is turned on and the maximum measured value of S is determined. This is set as 100% for the further measurements. It's value is saved as 'MaxS'.After this the setup is completed and the sensor starts run timers to measure the air every 0.1 seconds for the LED's and sends a measurement every 5 seconds to the console. ", "step_imgs": ["https://cdn.instructables.com/F9I/EQSB/JAIJJEC6/F9IEQSBJAIJJEC6.LARGE.jpg", "https://cdn.instructables.com/FA0/N98V/JAIJJEH8/FA0N98VJAIJJEH8.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 4: The Code"}, {"step": 5, "steps_text": "IFTTT - If This Than That is an useful tool to save the published values. Create an account if you don't already have one at IFTTT.com. Create a new applet.If ThisClick  'This', search for particle and click on it. Choose 'new event published'. In 'event name' type 'info'. This is the name of the events that are published every 5 seconds and need to be saved in the document. Click 'create trigger'. Then ThatClick 'that', search for sheets. Choose the google sheet icon. They ask you to connect your IFTTT account to google if you haven't already. Click 'add row to spreadsheet'. Don't change any of the default settings, except for the 'formatted row' part. Copy paste the .txt in this field. In order to make the data useful, excel needs to extract the percentage and time of measurement into different columns. To make this happen automatically for every new row, the code is written in the IFTTT applet. Go to docs.google.com to open your new sheet called 'info'. It may take some time to create the sheet and make the data available. Be patient.", "step_imgs": ["https://cdn.instructables.com/FOB/HM90/JAIJJENR/FOBHM90JAIJJENR.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 5: IFTTT"}], "channel": "Arduino"}, {"category": "technology", "description": "A Clinometer is a tool that is used to measure the angle of elevation, or angle from the ground, in a right - angled triangle. We can use a clinometer to measure the height of tall things that we can't possibly reach to the top of, flag poles, buildings, trees. ", "title": "Advanced Clinometer", "url": "https://www.instructables.com/id/Advanced-Clinometer/", "section": "technology", "steps": [{"step": 1, "steps_text": "\u00b7       Old Selfie Stick\u00b7        Full Protractor\u00b7        Laser\u00b7        One geared Motor\u00b7        One Toggle Switch\u00b7        Old Bulb Holder \u00b7        Wooden Piece \u00b7        Plastic Tube\u00b7        Two Batteries(1.5V AA)\u00b7        Screws\u00b7        Plastic Scrap\u00b7        Wire", "step_imgs": ["https://cdn.instructables.com/F83/724U/J47LCO4J/F83724UJ47LCO4J.LARGE.jpg", "https://cdn.instructables.com/FEJ/6DKK/J44FRU6V/FEJ6DKKJ44FRU6V.LARGE.jpg", "https://cdn.instructables.com/FC0/WOLI/J44FRUE1/FC0WOLIJ44FRUE1.LARGE.jpg", "https://cdn.instructables.com/FL2/SV5Y/J44FRUF1/FL2SV5YJ44FRUF1.LARGE.jpg", "https://cdn.instructables.com/F5R/XUAU/J44FRU7D/F5RXUAUJ44FRU7D.LARGE.jpg", "https://cdn.instructables.com/F9V/T5WQ/J44FRUD3/F9VT5WQJ44FRUD3.LARGE.jpg", "https://cdn.instructables.com/F8S/EOB3/J44FRUPK/F8SEOB3J44FRUPK.LARGE.jpg", "https://cdn.instructables.com/F6J/5HOI/J44FRU85/F6J5HOIJ44FRU85.LARGE.jpg", "https://cdn.instructables.com/FEW/GH33/J44FRUTG/FEWGH33J44FRUTG.LARGE.jpg", "https://cdn.instructables.com/FM6/TYNU/J44FRUQU/FM6TYNUJ44FRUQU.LARGE.jpg"], "step_title": "Step 1: Material Required"}, {"step": 2, "steps_text": "For Making Stand of the Clinometer I used old Selfie stick, Plastic Tube, Bulb Holder and Wooden Piece. First join the bottom of selfie Stick with the Plastic Tube and mount it on the wooden piece with the help of bulb holder.", "step_imgs": ["https://cdn.instructables.com/FEW/GH33/J44FRUTG/FEWGH33J44FRUTG.LARGE.jpg", "https://cdn.instructables.com/FU6/M9DN/J44FRUTH/FU6M9DNJ44FRUTH.LARGE.jpg"], "step_title": "Step 2: Stand Assembly"}, {"step": 3, "steps_text": "For Making Motor Assembly, join a charging pin at the terminal of the motor.", "step_imgs": ["https://cdn.instructables.com/FEJ/6DKK/J44FRU6V/FEJ6DKKJ44FRU6V.LARGE.jpg", "https://cdn.instructables.com/FPQ/P3RL/J44FRUU0/FPQP3RLJ44FRUU0.LARGE.jpg"], "step_title": "Step 3: Motor Assembly"}, {"step": 4, "steps_text": "For Making Protractor assembly we need a full protractor. First mark the nut dimension on it with the help of marker to make it fit on the geared motor. Then attach it with the selfie stick Stand with the help of Screws and fix the Geared Motor at the Protractor Centre.", "step_imgs": ["https://cdn.instructables.com/FAI/IVTO/J47LCOZR/FAIIVTOJ47LCOZR.LARGE.jpg", "https://cdn.instructables.com/FW8/K06L/J44FRUUT/FW8K06LJ44FRUUT.LARGE.jpg", "https://cdn.instructables.com/FIA/HK05/J44FRUUV/FIAHK05J44FRUUV.LARGE.jpg", "https://cdn.instructables.com/F9G/K1SB/J44FRUUZ/F9GK1SBJ44FRUUZ.LARGE.jpg", "https://cdn.instructables.com/FJ7/HCO5/J44FRUV2/FJ7HCO5J44FRUV2.LARGE.jpg"], "step_title": "Step 4: Protractor Assembly"}, {"step": 5, "steps_text": "For Making Laser Light Assembly We need a laser light along with button cells to glow it, pen cap and wire. Take a plastic wheel that can be easily fitted on the motor shaft. Paste the Laser Light on this Wheel. Make a pointer with the help of a plastic gear and a rubber scrap that can be fit on the outer face of laser light to indicate the Angle on the Protractor.", "step_imgs": ["https://cdn.instructables.com/F9V/T5WQ/J44FRUD3/F9VT5WQJ44FRUD3.LARGE.jpg", "https://cdn.instructables.com/FZZ/71DR/J44FRUTI/FZZ71DRJ44FRUTI.LARGE.jpg", "https://cdn.instructables.com/FAW/X92K/J44FRUU4/FAWX92KJ44FRUU4.LARGE.jpg", "https://cdn.instructables.com/FYX/HUIQ/J44FRUU9/FYXHUIQJ44FRUU9.LARGE.jpg", "https://cdn.instructables.com/FLF/AZRR/J44FRUUC/FLFAZRRJ44FRUUC.LARGE.jpg"], "step_title": "Step 5: Laser Light Assembly"}, {"step": 6, "steps_text": "For Making Toggle Switch Assembly we need a toggle switch that is used to operate motor in clockwise and counter-clockwise direction, an old adapter- here I used a scraped one, Battery Holder, wires. First make a circular hole to place toggle Switch handle on the adapter. Put the batteries (1.5V AA). Join the connections of switch as shown in image.", "step_imgs": ["https://cdn.instructables.com/FC0/WOLI/J44FRUE1/FC0WOLIJ44FRUE1.LARGE.jpg", "https://cdn.instructables.com/F06/T2GY/J44FRUO8/F06T2GYJ44FRUO8.LARGE.jpg", "https://cdn.instructables.com/F5R/XUAU/J44FRU7D/F5RXUAUJ44FRU7D.LARGE.jpg", "https://cdn.instructables.com/FLY/9T9R/J44FRUTN/FLY9T9RJ44FRUTN.LARGE.jpg", "https://cdn.instructables.com/FKR/4G8G/J44FRV6C/FKR4G8GJ44FRV6C.LARGE.jpg"], "step_title": "Step 6: Toggle Switch Assembly"}, {"step": 7, "steps_text": "As the main aim of this instrument is to measure the Height of buildings, trees or extremely long objects. So, we need certain formulation for it.Suppose, we need to find the height of a object AD as shown in fig. Here we have:  h= Height of the Clinometer from centre of protractor to the bottom base.  H= Height of the object  x= Distance between E and D  y= distance between base of building and Clinometer  \u00f81 = Angle made by laser beam towards top end of the object.  \u00f82 = Angle made by laser beam towards bottom end of the object.Formula:We know that,Tan \u00f8 = Perpendicular/BaseTan \u00f81  = (DE/EC) = (DE/AE)= X/y                                           \u2026\u2026\u2026\u2026\u2026\u2026.(1)Tan \u00f82 = (AB/CB) = y/h                                                 \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026(2)X = y x Tan \u00f81y= h x Tan \u00f82So, X = h x Tan \u00f82 x Tan \u00f81     ..................................................... from equation (1) and (2)Or X = h. Tan \u00f82 .Tan \u00f81     \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026..(3)Now, total height of the Object, H= h + X \u2026\u2026\u2026\u2026\u2026(4)From equation (3) and (4) we have,  H = h + h. Tan \u00f82 .Tan \u00f81Or ,So, this is shown from the Formula that we need to find the Value of angles \u00f82 and \u00f81 from to calculate the Height of the Object.NOTE: h= Height of the Clinometer from centre of protractor to the bottom base, which can be measured with the help of scale.Or,H = h (1 + Tan \u00f82 .Tan \u00f81)", "step_imgs": ["https://cdn.instructables.com/FRF/LFCD/J44FRV9C/FRFLFCDJ44FRV9C.LARGE.jpg"], "step_title": "Step 7: Calculation"}, {"step": 8, "steps_text": "As shown the original height of the object is 31.8 cm.(measured from scale)The value of \u00f81= 20 deg. and  \u00f82 =(329-270)=59 deg.Then, Tan \u00f81=0.36397And, Tan \u00f82= 1.66427h= Height of the Clinometer from centre of protractor to the bottom base= 19.7 cm (As measured from Scale) while its height can be varies from 19.7 cm to 57 cm depending upon object.Now, height of the object H= h (1 + Tan \u00f82 .Tan \u00f81)H =19.7(1+ (1.66427 x 0.36397))H = 19.7 x 1.60574H =31.63 cm (calculated value) which is nearly equal to measured value (=31.8 cm).% error = ((31.8-31.63)x100)/31.8 =0.53 Conclusion: The Advanced Clinometer measured the nearby accurate value of the object.", "step_imgs": ["https://cdn.instructables.com/FAU/LQNI/J44FRW31/FAULQNIJ44FRW31.LARGE.jpg", "https://cdn.instructables.com/FI8/2328/J44FRW10/FI82328J44FRW10.LARGE.jpg", "https://cdn.instructables.com/F5G/TFRH/J44FRW6O/F5GTFRHJ44FRW6O.LARGE.jpg", "https://cdn.instructables.com/FJU/Z1K1/J44FS4OT/FJUZ1K1J44FS4OT.LARGE.jpg"], "step_title": "Step 8: Working"}], "channel": "Tools"}, {"category": "technology", "description": "Updated 26th April 2017Revised circuit and board for use with 4000ZC USB meters.No Android coding requiredThis instructable shows you how access a wide range of high accuracy measurements from your Arduino and also send them remotely for logging and plotting. For High Speed Data Logging (2000 samples/sec) see this instrucatble, Remote High Speed Data Logging using Arduino/GL AR150/Android/pfodAppThe AtoD converter built into the Arduino's has poor accuracy, typically +/-10% and very limited range, typically 0 to 5V DC volts only. Using a simple circuit and library, you can feed your Arduino with high accuracy auto-ranging measurements from a multimeter with an optically isolated RS232 connection. Having the measurements available to your sketch lets you control outputs based on the values. This tutorial also covers sending the measurement remotely, via WiFi, Bluetooth, Bluetooth Low Energy or SMS, to an Android mobile for display, logging and plotting using pfodApp.This instructable uses an Arduino Mega2560 5V board which you can pair with a wide variety of communication shields, Ethernet, WiFi, Bluetooth V2 (classic), Bluetooth LE or SMS. The interface hardware and library presented here can alos be used with 3.3V Arduino compatible boards. As well as the Mega2560 you can use a wide variety of other boards such as UNO with and Ehternet shield, an ESP8266 base board (stand alone), a board with integrated Bluetooth Low Energy, like Arduino 101, or boards that connect to the communication sub-system using SPI such as RedBear BLE shield and Adafrut's Bluefruit SPI boards. pfodDesignerV2 supports all of these board combinations and will generate the code for them. The limiting condition is that you need to have a free Hardware Serial to connect to the this Multimeter RS232 shield.The circuit and code presented here works with a number of multimeters. A readily available, inexpensive, one is a Tekpower TP4000ZC, also know as Digitek TD-4000ZC. Multimeters that work with this circuit and library include Digitek DT-4000ZC, Digitech QM1538, Digitech QM1537, Digitek DT-9062, Digitek INO2513, Digitech QM1462, PeakTech 3330, Tenma 72-7745, Uni-Trend UT30A, Uni-Trend UT30E, Uni-Trend UT60E, Voltcraft VC 820, Voltcraft VC 840", "title": "High Accuracy Remote Data Logging Using Mulitmeter/Arduino/pfodApp", "url": "https://www.instructables.com/id/High-Accuracy-Remote-Data-Logging-Using-Mulitmeter/", "section": "technology", "steps": [{"step": 1, "steps_text": "This tutorial has two parts:The first part covers the hardware interface to the multimeter and the code library using an Arduino Mega. If you only want to get the measurement into your Arduino this is all you need. The second part covers sending the measurement to a remote Android mobile for display, logging and plotting. In this example we will use a Bluetooth shield and generate the basic sketch using pfodDesignerV2, but you can also generate code for WiFi, Ethernet, Bluetooth Low Energy and SMS connections using pfodDesignerV2. The multimeter library is then added to the basic sketch to complete the code. No Android coding is required to display, log and plot the reading. Everything is controlled from your Arduino code.This project is also available on-line at www.pfod.com.auFor a remote head-up display of the multimeter, see this instructable, Arduino Data Glasses For My Multimeter by Alain.", "step_imgs": [], "step_title": "Step 1: "}, {"step": 2, "steps_text": "The multimeters used in this tutorial are the inexpensive (~US40) Tekpower TP4000ZC (also know as Digitek DT-4000ZC) and the older Digitech QM1538, which it is no longer sold. Both these meters are visually the same and use the same RS232 encoding of the measurement.Here the specs for the Tekpower TP4000ZC:-DC Voltage: 400mV/4/40/400V \u00b10.5%+5, 600V \u00b10.8%AC Voltage: 4/40/400V \u00b10.8%+5, 400mV/600V \u00b11.2%+5DC Current: 400/4000\u03bcA \u00b12.0%+5, 40/400mA \u00b11.5%+5, 4/10A \u00b12%+5AC Current: 400/4000\u03bcA \u00b12.5%+3, 40/400mA \u00b12%+5, 4/10A \u00b12.5%+5Resistance: 400\u03a9/4/40/400k\u03a9/4M\u03a9 \u00b11%+5, 40M\u03a9 \u00b12%+5Capacitance: 40nF \u00b13.5%+10, 400nF/4/40\u03bcF \u00b13%+5,100\u03bcF \u00b13.5%+5Frequency: 10Hz-10MHz \u00b10.1%+5Duty Cycle: 0.1%-99.9% \u00b12.5%+5Temperature: 0oC - +40oC \u00b13oC, -50oC - +200oC\u00b10.75% \u00b13oC, +200oC - +750oC \u00b11.5% \u00b13oC, Resolution 0.1oC via included thermocouple probe.The multimeter's RS232 connection is only one way and you cannot change the multimeter's settings remotely, so you need to manually select the type of measurement. However the meter is auto-ranging and the Voltage and Current settings handle both AC and DC.", "step_imgs": ["https://cdn.instructables.com/F6C/NI66/IX0PZ025/F6CNI66IX0PZ025.LARGE.jpg"], "step_title": "Step 2: The Multimeter"}, {"step": 3, "steps_text": "There are two interfaces. The newer Digitek DT-4000ZC and Tekpower TP40000ZC meters come with a USB cable. While the older Digitek QM1538 was provided a RS232 9pin D connector cable.The above circuit (pdf version) shows how to connect the multi-meter's opto coupler to drive an Arduino RX serial pin.  Note: This circuit has been updated to add another protection resistor, R2, for the Digitek DT-4000ZC and Tekpower TP40000ZC meters. This resistor was not included on the 9pin D connector board shown above.Digitek DT-4000ZC and Tekpower TP40000ZCFor the Digitek DT-4000ZC and Tekpower TP40000ZC, you need a 3.5mm audio cable male to male, stereo or mono will do, and a 3.5mm socket.Digitek QM1538For the older Digitek QM1538, you need a 9pin D socket.The 9pin D connector has offset pins that will not plug into the prototype shield. Just cut off the row of 4 pins so you can solder the connector to the board, as the circuit only uses pins in second row of 5 pins. The mounting legs where bent over to let the connector lie flat and the connector was secured to the prototype shield using 2 part epoxy glue (\u201cAraldite\u201d) The connector pin layout is shown above is from this site. The 10K resistor that comes mounted inside the connector of supplied RS232 cables (connected between pins 2 and 3) is not required for this project.Connecting the signal to an Arduino RX pinThis circuit will work for both 5V and 3.3V Arduino boards. Here we are using an Mega2560 (5V) Arduino and mounted the circuit on a prototype shield as shown above.A flying lead is used to connect the TP1 on the shield to a Serial1 RX, pin D19, on the Mega2560.Note about Software Serial: Initially this shield was paired with an UNO using Software Serial on pins 10,11. However when paired with the Bluetooth Shield on Serial at 9600baud, some receive bytes were lost. Moving the RS232 to a Hardware Serial connection solved this issue. So for reliable remote displaying and logging, if you are using a communication shield that connects via serial, you need either a board with two or more Hardware Serials such as the Mega2560. Other alternatives are an UNO with and Ehternet shield, an ESP8266 base board (stand alone), a board with integrated Bluetooth Low Energy like Anduino 101 or boards that connect to the communication sub-system using SPI such as RedBear BLE shield and Adafrut's Bluefruit SPI boards. pfodDesignerV2 supports all of these boards and will generate the code for them.", "step_imgs": ["https://cdn.instructables.com/FWO/01KT/J1WW5TV1/FWO01KTJ1WW5TV1.LARGE.jpg", "https://cdn.instructables.com/FI7/Q6JL/J1WW5TOP/FI7Q6JLJ1WW5TOP.LARGE.jpg", "https://cdn.instructables.com/FVC/QOPI/J1WW5TLI/FVCQOPIJ1WW5TLI.LARGE.jpg", "https://cdn.instructables.com/F3P/RECC/IX0PZ03J/F3PRECCIX0PZ03J.LARGE.jpg", "https://cdn.instructables.com/FAK/TTF0/IX0PZ03L/FAKTTF0IX0PZ03L.LARGE.jpg", "https://cdn.instructables.com/F3N/BK99/IX0PZ03K/F3NBK99IX0PZ03K.LARGE.jpg"], "step_title": "Step 3: The RS232 Interface Hardware"}, {"step": 4, "steps_text": "The Tekpower TP4000ZC and a number of other mulimeter do not send the measurement via RS232 as ASCII text, rather it sends 14 bytes with bits set depending on which segments of the LCD display that are illuminated. The encoding of the 14 bytes are explained in this pdf. The pfodVC820MeterParser.zip library decodes these bytes into text strings and floats. (The VC820 refers to one of the meters that uses this encoding.) Also see QtDMM for Windows, Mac and Linux computer software that handles a wide range of multimeters.There is a minimal example, MeterParserExample.ino, of using the pfodVC820MeterParser library. Connect the meter to a 2400baud serial connection and then call haveReading() each loop to process the bytes. haveReading() will return true when there is a new complete reading parsed. Then you can call getAsFloat() to get the value (scaled) as a float or getAtStr() to get the reading with scaling for printing and logging. There are other methods available to access the type of measurement, getTypeAsStr() and getTypeAsUnicode(), as well as other utility methods.#include \"pfodVC820MeterParser.h\"\npfodVC820MeterParser meter; //void setup() {\n  Serial.begin(74880);\n  Serial1.begin(2400);\n  meter.connect(&Serial1);\n}float reading;\nvoid loop() {\n  if (meter.haveReading()) {\n    reading = meter.getAsFloat(); // use this for Arduino calculations\n    \n    Serial.print(\"Reading with units: \"); \n    Serial.print(meter.getDigits()); Serial.print(meter.getScalingAsStr()); Serial.print(meter.getTypeAsStr()); \n    Serial.print(F(\" = as float printed (6 digits):\")); Serial.println(reading,6);\n    \n    Serial.println(\"Time(sec) and Reading as string for logging\");\n    \n    Serial.print(((float)millis())/1000.0); Serial.print(\",sec,\"); \n    Serial.print(meter.getAsStr()); Serial.print(','); Serial.println(meter.getTypeAsStr());\n  }\n}With the meter set on Deg C and using the thermocouple probe, the example sketch gives this output on the Arduino IDE serial monitorReading with units: 25.7C = as float printed (6 digits):25.700000Time(sec) and Reading as string for logging 2.40,sec,25.7,C", "step_imgs": [], "step_title": "Step 4: The PfodVC820MultimeterParser Library"}, {"step": 5, "steps_text": "This part of the tutorial covers how to remotely display, log and plot the meter reading on your Android mobile. pfodApp is used to handle the display, logging and plotting on your Android mobile. No Android programming is required. All the displays, logging and plotting are completely controlled by your Arduino sketch. The free pfodDesignerV2 app lets you design your Android menu and chart and then generates the an Arduino sketch for you.pfodApp supports a number of connection types, Ethernet, WiFi, Bluetooth V2 (classic), Bluetooth LE or SMS. This tutorial uses Arduino 101 (Bluetooth Low Energy) for data logging and plotting. Other Bluetooth Low Energy boards are also supported. This tutorial uses SMS to connect to pfodApp. You can use pfodDesignerV2 to add data logging and charting to that SMS example. pfodDesignerV2 also has options to generate Arduino code to a Bluetooth V2 (classic) shield to connect to pfodApp.For this example we will use an Iteadstudio Bluetooth Shield V2.2 that connects to the Arduino Mega2560 via a 9600baud serial connection. Using the free pfodDesignerV2 app we set up a simple menu that just has a label to show the meter reading and one button to open the chart. This page has a number of pfodDesignerV2 tutorials. Once we have a basic sketch, we will modify it to add the meter parser and to send the meter reading and data for logging and charting.Designing the MenuIn this section we will design an Android/pfodApp menu that will display the meter reading and a button to open a chart of the readings. The readings are also saved to a file on the Android mobile", "step_imgs": [], "step_title": "Step 5: Part 2 \u2013 Remote Display, Logging and Plotting"}, {"step": 6, "steps_text": "Install the free pfodDesignerV2 and start a new menu.The default Target is Serial at 9600baud which is what is need for the Iteadstudio Bluetooth Shield V2.2. If you are connecting using a Bluetooth Low Energy device or Wifi or SMS then click on Target to change the selection.To add a label to display the meter reading, click on Add Menu Item and select scroll down to select Label.Choose a suitable font size and colours. Leave the Text as Label as we will modify the generated code to replace this with the meter measurement later. Here we have set font size to +7, font colour to Red and background to Silver.Go back to the Editing Menu_1 screen and set a Refresh Interval 1 sec. The will make pfodApp re-request the menu about once a second to display the latest reading in the Label.", "step_imgs": ["https://cdn.instructables.com/FA1/XKTW/IX0PZ0T5/FA1XKTWIX0PZ0T5.LARGE.jpg", "https://cdn.instructables.com/FA2/ZDYE/IX0PZ0TP/FA2ZDYEIX0PZ0TP.LARGE.jpg", "https://cdn.instructables.com/FYA/RZ96/IX0PZ0TQ/FYARZ96IX0PZ0TQ.LARGE.jpg"], "step_title": "Step 6: Adding a Label"}, {"step": 7, "steps_text": "Click on Add Menu Item again to add a Chart Button.Edit the text of the Chart Button to something suitable, e.g. just \u201cChart\u201d and choose a font size and colours.Then click on the \u201cChart\u201d button to open the plot editing screen. There will only be one plot so click in the Edit Plot 2 and Edit Plot 3 buttons and scroll down and click on Hide Plot for each of them.Edit the chart label to something suitable, e.g. \u201cMultimeter\u201d. No need to change any of the other plot settings as we will be modifying the sketch to send different y-axis label depending on the multimeter setting.Finally go back to the Editing Menu_1 and Edit Prompt, this sets the text at the bottom of the menu and overall menu background colour. Here we have set the prompt to \u201cRemote Multimeter\u201d with font size +3 and background colour Silver.You can now go back to Editing Menu_1 and click Preview Menu to preview the menu design.If you don't like the design you can change it before you generate the code. If you want to space out the Label from the button you can add some blank labels as described here. Adding a Chart and Logging Data on How to Display/Plot Arduino Data on Android is another tutorial on pfodDesignerV2/pfodApp datalogging and charting.", "step_imgs": ["https://cdn.instructables.com/FS1/TT1B/IX0PZ1EW/FS1TT1BIX0PZ1EW.LARGE.jpg", "https://cdn.instructables.com/FOM/49N4/IX0PZ1EZ/FOM49N4IX0PZ1EZ.LARGE.jpg", "https://cdn.instructables.com/FAS/ZBRN/IX0PZ1FN/FASZBRNIX0PZ1FN.LARGE.jpg", "https://cdn.instructables.com/FLE/F16L/IX0PZ1FO/FLEF16LIX0PZ1FO.LARGE.jpg"], "step_title": "Step 7: Adding a Chart Button"}, {"step": 8, "steps_text": "To generate the Arduino code that will display this menu in pfodApp, go back to the Editing Menu_1 screen and scroll down and click the Generate Code button.Click the \u201cWrite Code to file\u201d button to output the Arduino sketch to the /pfodAppRawData/pfodDesignerV2.txt file on your mobile. Then exit the pfodDesignerV2. Transfer the pfodDesignerV2.txt file to your PC using either a USB connection or a file transfer app, like wifi file transfer pro. A copy of the generated sketch is here, pfodDesignerV2_meter.txtLoad the sketch into your Arduino IDE and program your Uno (or Mega) board. Then add the Iteadstudio Bluetooth Shield V2.2. The install pfodApp on your Android mobile and create a new Bluetooth connection named, for example, Multimeter. See pfodAppForAndroidGettingStarted.pdf for how to create new connections. Then when you use pfodApp to open the Multimeter connection you will see your designed menu.Opening the Chart does not display anything interesting because we have not added in the multimeter hardware/software.", "step_imgs": ["https://cdn.instructables.com/FDS/7JNQ/IX0PZ1S1/FDS7JNQIX0PZ1S1.LARGE.jpg", "https://cdn.instructables.com/FU0/11GA/IX0PZ1SM/FU011GAIX0PZ1SM.LARGE.jpg"], "step_title": "Step 8: Generating the Arduino Sketch"}, {"step": 9, "steps_text": "We will modify the generated sketch to add the multimeter parser and to send its data to your Android mobile. The complete modified sketch is here, pfod_meter.inoThese modifications add the multimeter parser and a 5sec timer. If there is no new valid reading in that time then the sketch stops sending data and updates the Android/pfodApp display to \u201c- - - \u201c. As the meter's manual selection is changed the chart labels are updated, but you need to exit the chart and re-select it to see the new labels. On the other hand, the meter reading is automatically updated every second. Finally pfodApp handles Unicode by default so when displaying the meter reading the method getTypeAsUnicode() is used to return the Unicode for ohms, \u2126, and degsC, \u2103 for the meter display.The chart button displays an updating chart of the readings :-The chart data, in CSV format, is also saved to a file to your Android mobile under /pfodAppRawData/Mulitmeter.txt for later transfer to your computer and import to a spreadsheet for further calculations and charting.", "step_imgs": ["https://cdn.instructables.com/FZZ/P94H/IX0PZ23E/FZZP94HIX0PZ23E.LARGE.jpg", "https://cdn.instructables.com/F38/GP88/IX0PZ241/F38GP88IX0PZ241.LARGE.jpg", "https://cdn.instructables.com/FI3/U7T6/IX0PZ24X/FI3U7T6IX0PZ24X.LARGE.jpg"], "step_title": "Step 9: Adding the Multimeter"}, {"step": 10, "steps_text": "Download the pfodVC820MeterParser.zip library and then open Arduino IDE and click in the Sketch \u2192 Include Library \u2192 Add .zip to add this library to your IDE.Add the pfodVC820MeterParser library to the sketch. Click on Sketch \u2192 Include Library \u2192 pfodVC820MeterParser. This will add the include statements at the top of the sketch. Edit pfodParser_codeGenerated parser(\"V1\"); to pfodParser_codeGenerated parser(\"\"); This disables the menu caching in pfodApp so your menu changes will be displayed. You can revert to \u201cV3\u201d when you have finished all you changes to re-enable menu caching. Add these lines to create the objects for the software serial and the multimeter. pfodVC820MeterParser meter;At the end of setup() add Serial1.begin(2400); meter.connect(&Serial1);Above loop() add unsigned long validReadingTimer = 0; const unsigned long VALID_READINGS_TIMEOUT = 5000; // 5secs bool haveValidReadings = true; // set to true when have valid readings int measurementType = meter.NO_READING; and  at the top of the loop() add if (meter.haveReading()) {       if (meter.isValid()) {            validReadingTimer = millis();           haveValidReadings = true;  }      int newType = meter.getType();  if (measurementType != newType) {       // output new datalogging titles          parser.print(F(\"sec,\")); parser.println(meter.getTypeAsStr());   }      measurementType = newType; } if ((millis() - validReadingTimer) > VALID_READINGS_TIMEOUT) {      haveValidReadings = false; // no new valid reading in last 5 sec }Further down in loop replace parser.print(F(\"{=Multimeter|time (secs)|Plot_1~~~||}\")); with parser.print(F(\"{=Multimeter|time (secs)|Meter Reading~~~\")); parser.print(meter.getTypeAsStr()); parser.print(F(\"||}\"));At the bottom of loop() replace  sendData(); with  if (haveValidReadings) {  sendData(); } In sendData() replace parser.print(','); parser.print(((float)(plot_1_var-plot_1_varMin)) * plot_1_scaling + plot_1_varDisplayMin); with parser.print(','); parser.print(meter.getAsStr);In sendMainMenu() replace parser.print(F(\"~Label\")); with parser.print('~'); if (haveValidReadings) {   parser.print(meter.getDigits()); parser.print(meter.getScalingAsStr()); parser.print(meter.getTypeAsUnicode ()); } else {   parser.print(F(\"- - -\")); } In sendMainMenuUpdate() add parser.print(F(\"|!A\"));parser.print('~'); if (haveValidReadings) {  parser.print(meter.getDigits());  parser.print(meter.getScalingAsStr());  parser.print(meter.getTypeAsUnicode ()); } else {   parser.print(F(\"- - -\")); } To update the reading when using menu caching.ConclusionThis tutorial has shown how to connect an inexpensive multimeter to an Arduino Mega2560 via RS232. Many other boards are also supported. The pfodVC820MeterParserlibrary parses the multimeter data into floats for Arduino calculations and strings for display and logging. pfodDesignerV2 was used to generate a basic sketch to display the multimeter reading and show a plot of the values in an Android mobile using pfodApp. No Android programming is required. To this basic sketch the multimeter handling was added and final sketch displays the current multimeter reading on your Android mobile as well as plotting the readings and logging them to a file on your mobile for later use.", "step_imgs": [], "step_title": "Step 10: The Sketch Modifications in Detail"}], "channel": "Arduino"}, {"category": "technology", "description": "This is really a barometer/altimeter but you will see the reason for the title by looking at the video.The MS5611 pressure sensor, found on the Arduino GY63 and GY86 breakout boards, delivers amazing performance.  On a calm day it will measure your height to within 0.2m.  This is effectively measuring the distance from your head to outer space and subtracting it from the distance of your feet to outer space (by measuring pressure \u2013 that is the weight of the air above).  This spectacular device has a range that will comfortably measure the height of Everest - and can also measure down to a few inches.This project was aimed as: a schools project, an example of modifying Arduino code and a good starting place to explore using the MS5611 sensor.  There are plenty of forum questions from those having difficulties with this sensor.  The approach here makes using it very straightforward.  After doing this project you will be well equipped to develop other pressure related applications.Every sensor has its own calibration constants that need to be read and used to correct the data.  There is a library available to help drive these.  The code shown here uses the library to take readings and then converts them to height and displays them on a LCD Shield.First we will send the data to the serial monitor on the PC/laptop for initial tests.  These show some noise and so we add a filter to smooth them out.  Then we will add a LCD display so the unit can run independently and you can try measuring your height \u2013 or anything else.Note the GY63 board just has the MS5611 pressure sensor.  The GY86 is called a 10 degrees of freedom board and also includes a 3 axis accelerometer, 3 axis gyro and a 3 axis magnetometer for just a few $ more.You will need:1.       Arduino UNO (or other with standard pinout) and its USB cable2.       GY63 breakout board or GY863.       4 Dupont leads male-female -  or connecting wire4.       Arduino LCD keypad shield5.       9v battery and lead6.       2.54mm socket strip (optional but recommended)PreparationDownload the Arduino IDE (integrated development environment) from:   https://www.arduino.cc/en/Main/SoftwareSome technical bits for interestThe MS5611 delivers its great performance by averaging large numbers of measurements.  It can make 4096 3 byte (24bit) analogue measurements in just 8ms and give the average value.  It has to measure both pressure and temperature so the pressure data can be corrected for internal temperature.  Hence it can deliver around 60 pairs of pressure and temperature readings per second. The data sheet is available at:  http://www.te.com/usa-en/plp/ms5611-01ba03/Xoye8B...Communications is via I2C.  So other I2C sensors can share the bus (as is the case on the GY86 10DOF board where all the chips are on I2C).", "title": "Arduino Atmospheric Tape Measure/ MS5611 GY63 GY86 Demonstration", "url": "https://www.instructables.com/id/Arduino-Atmospheric-Tape-Measure-MS5611-GY63-GY86-/", "section": "technology", "steps": [{"step": 1, "steps_text": "Many of the Arduino sensors either use a standard library that is included with the Arduino IDE or are supplied with a zip file with a library that can be easily installed.  This tends not to be the case for the MS5611 sensors.  However a search found:  https://github.com/gronat/MS5611  that has a library for the MS5611, including performing the temperature correction.Option 1Go to the website above, click \u2018Clone or Download\u2019 and select \u2018Download ZIP\u2019.  This should deliver MS5611-master.zip to your downloads directory.  Now, if you wish, move it to a folder where you can find it in future.  I use a directory called \u2018data\u2019 added to my Arduino folders.Unfortunately the downloaded .zip file not does include any example sketches and it would be nice to add the library and examples to the Arduino IDE.  There is a minimum example in the README.md file that can be copied and pasted into a sketch and saved.  This is one way to get going.Option 2To make it easier to run the code in this instructable I have added the minimum example above and the examples shown here to the library and attached a .zip file below that will install into the Arduino IDE.Download the zip file below.  Move this to a better folder if you wish.Start the Arduino IDE.  Click Sketch>Include Library>Add zip file and select the file.  Restart the IDE.   The IDE will now both have the library installed plus all the examples shown here.  Check by clicking File>examples>>MS5611-master.  Three sketches should be listed.", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 1: Get a MS5611 Library"}, {"step": 2, "steps_text": "The GY63/GY86 boards usually come with headers but not soldered.  So it is your choice to either solder the headers in place and use male-female Dupont leads, or (as I decided) solder leads directly to the board and add pins to the lead to plug into the Arduino.  The latter option is better if you think you might want to solder the board into a project later.  The former is better if you want to use the board for experimentation.  Unsoldering leads is much easier than a pin header.The connections required are:GY63/GY86       Arduino \n\nVCC         -      5v       Power\n\nGND         -      GND      Ground\n\nSCL         -      A5       I2C clock\n\n>SDA        -      A4       I2C dataAttach the sensor board to the Arduino as above and connect the Arduino to the PC/laptop via its USB lead.  Also cover the sensor with some opaque/black material.  The sensor is sensitive to light (as is the case for most of this type of sensor).Start the Arduino IDE.  Click: File>examples>>MS5611-master>MS5611data2serial.A new instance of the IDE will appear with the sketch.   Click the upload button (right arrow). Next start the serial plotter \u2013 click Tools>Serial Plotter and if necessary set the baud to 9600.  The data being sent is the pressure in Pascals.   After a second or so it will re-scale and raising and lowering the sensor by say 0.3m should show as lowering and raising of the trace (lower height is higher pressure). The data has some noise.  See first plot above.  This can be smoothed using a digital filter (a really useful tool).The filter equation is: value = value  + K(new-value) where \u2018value\u2019 is the filtered data, and \u2018new\u2019 is the latest measured.  If K=1 there is no filtering.  For lower values of K the data is smoothed with a time constant of T/K where T is the time between samples.  Here T is around 17ms so a value of 0.1 gives a time constant of 170ms or around 1/6s. The filter can be added by:Add a variable for the filtered data before setup():float filtered = 0;Then add the filter equation after the pressure = \u2026.  line.filtered = filtered + 0.1*(pressure-filtered);It is a good idea to initialise the filtered value to the first reading.  So add an \u2018if\u2019 statement around the the line above that does this so it looks like:if(filtered != 0){ \nfiltered = filtered + 0.1*(pressure-filtered);\n} \nelse { \nfiltered = pressure;          // first reading so set filtered to reading \n}The test \u2018!=\u2019 is \u2018not equal\u2019.  So if \u2018filtered\u2019 is not equal to 0 the filter equation is executed but if it is then it is set to the pressure reading.Lastly we need to change \u2018pressure\u2019 to \u2018filtered\u2019 in the Serial.println statement so we see the filtered value.The best learning is achieved by making the changes above manually.  However I included these in the example MS5611data2serialWfilter.  So if there are problems the example can be loaded.Now upload the code to the Arduino and see the improvement.  See second plot above and note the Y scale is expanded x2.Try a lower value for the filter constant, say 0.02 instead of 0.1, and see the difference.  The data is smoother but with a slower response.  This is a compromise that has to be sought when using this simple filter.  The characteristic is the same as a RC (resistance and capacitance) filter extensively used in electronic circuits.", "step_imgs": ["https://cdn.instructables.com/FVA/958E/IWH3IP0N/FVA958EIWH3IP0N.LARGE.jpg", "https://cdn.instructables.com/FGP/O783/IWH3IP0M/FGPO783IWH3IP0M.LARGE.jpg"], "step_title": "Step 2: Connect the Sensor to the Arduino and Test"}, {"step": 3, "steps_text": "Now we will add a LCD Keypad shield, convert the pressure to height in meters, and show it on the display.  We will also add the ability to zero the value by pressing the keypad \u2018Select\u2019 button.With the LCD shield on the Arduino the sensor will have to be connected to the LCD shield.  Unfortunately the LCD shields usually come without the appropriate sockets.  So the options are to make solder connections or to get some socket strip.  Socket strip is available on ebay for not much more than the cost of postage.  Do a search on \u20182.54mm socket strip\u2019 and look for ones that are similar to the ones on the Arduino.   These usually come in 36 or 40 pin lengths.  I would avoid the turned pin ones as they are not deep enough for standard Dupont leads.The socket strip has to be cut to length and the cut has to be made in the same place as a pin.  So for a 6 pin strip \u2013 remove the 7th pin with some fine pliers, then cut at that place using a junior hacksaw.  I file the ends to make them neat.Make sure there are no solder bridges when soldering them onto the board.With the appropriate decision on connecting the sensor plug the LCD shield onto the Arduino and connect the sensor the same pins \u2013 but now on the LCD shield.Also get the battery and lead ready.  I made up my lead from parts in my scrap bin but they are also available on ebay \u2013 including a nice option that includes a battery box and switch.  Search on \u2018PP3 2.1mm lead\u2019.The current consumption is around 80ma.  Hence if you want to run for more than a few minutes consider a bigger 9v battery than the PP3.", "step_imgs": [], "step_title": "Step 3: Make It Standalone"}, {"step": 4, "steps_text": "We need to do a little more coding to convert the pressure to height and drive the display.At the start of the sketch add the display library and tell this what pins are used:#include <LiquidCrystal.h> \n// initialize the library with the numbers of the interface pins \nLiquidCrystal lcd(8, 9, 4, 5, 6, 7);Next we need some variables and a function to read the keypad buttons.   These are all connected to analogue input A0.  Each button gives a different voltage to A0.  A search on \u2018arduino lcd shield buttons code\u2019 found some good code at:https://www.dfrobot.com/wiki/index.php/Arduino_LCD_KeyPad_Shield_(SKU:_DFR0009)#Sample_CodeAdd this code before setup():// define some values used by the panel and buttons \nint lcd_key     = 0; \nint adc_key_in  = 0; \n#define btnRIGHT  0 \n#define btnUP     1 \n#define btnDOWN   2 \n#define btnLEFT   3 \n#define btnSELECT 4 \n#define btnNONE   5 \n// read the buttons \nint read_LCD_buttons() \n{ \n adc_key_in = analogRead(0);      // read the value from the sensor \n // my buttons when read are centered at these valies: 0, 144, 329, 504, 741 \n // we add approx 50 to those values and check to see if we are close \n if (adc_key_in > 1000) return btnNONE; // We make this the 1st option for speed reasons since it will be the most likely result \n if (adc_key_in < 50)   return btnRIGHT; \n if (adc_key_in < 250)  return btnUP;  \n if (adc_key_in < 450)  return btnDOWN;  \n if (adc_key_in < 650)  return btnLEFT;  \n if (adc_key_in < 850)  return btnSELECT;  \n return btnNONE;  // when all others fail, return this... \n}Altitude is usually zeroed at the starting point. So we need variables for both height and reference.  Add these before setup() and the function above:float mtr; \nfloat ref = 0;The conversion from pressure in Pascals to meters is almost exactly a division by 12 at sea level.  This formula is fine for most ground based measurements.  There are more accurate formulae that are more appropriate for conversion at high altitudes.  Use these if you are going to use this to record the altitude of a balloon flight.The reference should be set to the first pressure reading so we start at zero height and when the SELECT button is pressed.  Add, after the filter code, and before the Serial.println statement:  if(ref == 0){  \n    ref = filtered/12.0; \n  } \n  if(read_LCD_buttons() == btnSELECT) { \n    ref = filtered/12.0; \n  }After this add the height calculation:  mtr = ref - filtered/12.0;Lastly change the Serial.println statement to send \u2018mtr\u2019 instead of \u2018filtered\u2019, and add code to send \u2018mtr\u2019 to the LCD:  Serial.println(mtr);   // Send pressure via serial (UART) \n  lcd.setCursor(0,1);         // line 2 \n  lcd.print(mtr);All the changes here are included in the example MS5611data2lcd.  Load this as in step 2.There is one last mod that is helpful.  The display is difficult to read when it is being updated 60 times a second.  Our filter is smoothing the data with a time constant around 0.8s.  So updating the display every 0.3s seems plenty enough.So add a counter after all the other variable definitions at the start of the sketch (e.g. after float ref=0;):int i = 0;Then add code to increment 'i' and an 'if' statement to run when it gets to 20 and then set it back to zero and move the Serial and lcd commands within the 'if' statement so these are only executed every 20th reading:  i += 1; \n  if(i>=20) { \n  Serial.println(mtr); // Send pressure via serial (UART) \n  lcd.setCursor(0,1);         // line 2 \n  lcd.print(mtr); \n  i = 0; \n  }I did not include an example with this last modification in order to encourage entering the code manually which aids learning.This project should give a good starting point for example for a digital barometer.  For those who might want to consider use in RC models - search for OpenXvario for code that enables an altimeter and variometer for Frsky and Turnigy 9x telemetry systems.", "step_imgs": [], "step_title": "Step 4: Add Code for Altitude and the LCD"}], "channel": "Arduino"}, {"category": "technology", "description": "**** ENTERED IN THE HURRICANE LASERS CONTEST**** \nWhat would I do with a Laser Cutter? Build Simple Robotic Kits to teach people a Hobby that I Love.\nEver wanted to make some money from your projects?\nThis Instrutable will show you how to Simply interface a coin selector with your Adruino.\nAnd also how to then connect that to your Visual C# Project.\nThen it's all up to you and that great idea you have, if it's electronic or a program/game,The Buck Starts Here.You will need:\nA Coin Selector: There are many different type's, the CH-926 accepts the most amount of coins so thats what I'll be using.UK Stock, US Stock\nAny 12v Power Supply, Batteries or Wall Wart.\nAn Arduino UNOMicrosoft Visual Express 2010 C#: Free Download, Scroll down until you see the correct option.\nNote: Only needed for a coin operated Program, Not electronics Projects.Let's get Started!", "title": "Make Money With Arduino", "url": "https://www.instructables.com/id/Make-Money-with-Arduino/", "section": "technology", "steps": [{"step": 1, "steps_text": "For your Coin Selector to know what type of coins it accepts, you have to set it up and then feed it samples of those coins.\nIt is recommend to sample at least 15 coins of the same type, up to a maximum of 30. Don't feed the same coin through 30 times, it's make the selector to fussy about what it accepts.\nA Coin Selector works by comparing the material, weight and size of coins past through it to the samples you provide. If a coin is not reconised it drops out the return slot, if it is reconised the Unit sends out pulse's on the \"COIN\" line.\nSo to make it easier for the programming side we use a \"greatest common factor\" rule.\neg. We'll use the following coins (UK) 5p, 10p, 20p, 50p,& \u00a31, (US) 5c, 10c, 25c, 50c & $1.\nAll the the coins can be made up with multiple 5p or 5c coins, so we make 1 pulse equal to 5p or 5c.\n5p/c = 1 pulse, 10p/c = 2 pulses, 20p = 4 pulses, 25c = 5 pulses, 50p/c = 10 pulses, \u00a3/$1 = 20 pulses.\nNow, TheSetup:\nFirst the switches...\nselect \"NC\" by sliding the top switch to the bottom position.\nselect \"FAST\" by sliding the bottom switch to the top position.\nPower Up the unit with a 12v supply.\n1. Hold the \"ADD\" and \"MINUS\" buttons down at the same time for about 3 seconds, release and then the letter \"A\" will appear on the LED display.\n2. Press the \"SETUP\" button once, and the letter \"E\" will appear. Then use the \"ADD\" and \"MINUS\" buttons to choose how many kinds of coins your going to use. Press the \"SETUP\" button again to finish.\n3. The letter \"H\" will appear. Use the \"ADD\" and \"MINUS\"buttons to choose how many sample coins your going to feed it later. Press the\"SETUP\" button again to finish.\n4.\u00a0 The letter \"P\" will appear. Again use the \"ADD\" and \"MINUS\" buttons to choose the amount of output pulses you want. Press the \"SETUP\" button to finish. Refer to the above example to determine number of pulses.\n5.\u00a0 The letter \"F\" will appear. Using the \"ADD\" and \"MINUS\" buttons, choose the accuracy. The value is from 1 to 30, with 1 being the most accurate. I use 10 and it works fine. Again \"SETUP\" to finish.\nYou have now setup the first coin, depending on how many coins you selected in step 2, you'll have to repeat Step's 3 to 5 for each one.\nThe letter \"A\" will appear when you've setup all the coins. Hold \"SETUP\" for 3 seconds to finish, the letter \"E\" will appear.\nFinally, switch the unit off and then back on.Sampling time:\n1.\u00a0 Hold the \"SETUP\" button down for about 3 seconds, release and then the letters \"A1\" will appear on the LED display. This is your first coin (5p/c)\n2. Feed the Coin Selector your sample coins, the LED display will show the amount of coins you've entered. \"A1\" will appear again when finished.\n3. Hold the \"SETUP\" button down again for about 3 seconds, release and then\"A2\" will appear, repeat these steps until all coins are sampled.\nIf your not using all of the coin types available (eg 5 coins of a 6 type coin selector) the unit will ask for samples of a coin type you haven't setup, just hold the \"SETUP\" button down for 3 secconds of each of the remaining coins.\nThe Coin Selector restarts itself and is now ready to connect to the Arduino.", "step_imgs": ["https://cdn.instructables.com/FKF/7ACK/H7432F3P/FKF7ACKH7432F3P.LARGE.jpg"], "step_title": "Step 1: Coin Sampling"}, {"step": 2, "steps_text": "To Wire the Coin Selector to the Arduino is easy.\nThe white \"COIN\" Wire from the Selector connects to pin 2 on the Arduino. It has to be pin 2 or 3 as these are Interrupt pins.\nNow if your using a different power supply for the Coin Selector to the Arduino, you must connect a common Ground. So the Red wire from the Coin Selector connects to +12V of the supply and the Black wire to ground of the supply AND to ground of the arduino.\nNote: USB will NOT power the coin selector.", "step_imgs": ["https://cdn.instructables.com/FNB/NBR4/H7432FIA/FNBNBR4H7432FIA.LARGE.jpg"], "step_title": "Step 2: Arduino Time"}, {"step": 3, "steps_text": "Now, Fire up the Arduino IDE and let start coding:PROGRAM START:const int coinInt = 0;\u00a0\n//Attach coinInt to Interrupt Pin 0 (Digital Pin 2). Pin 3 = Interrpt Pin 1.volatile float coinsValue = 0.00;\n//Set the coinsValue to a Volatile float\n//Volatile as this variable changes any time the Interrupt is triggeredint coinsChange = 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n//A Coin has been inserted flagvoid setup()\n{\n\u00a0 Serial.begin(9600);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n//Start Serial Communication\u00a0 attachInterrupt(coinInt, coinInserted, RISING);\u00a0\u00a0\u00a0\n//If coinInt goes HIGH (a Pulse), call the coinInserted function\n//An attachInterrupt will always trigger, even if your using delays}void coinInserted()\u00a0\u00a0\u00a0\u00a0\n//The function that is called every time it recieves a pulse{\u00a0 coinsValue = coinsValue + 0.05;\u00a0\u00a0\n//As we set the Pulse to represent 5p or 5c we add this to the coinsValue\n\u00a0 coinsChange = 1;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n//Flag that there has been a coin inserted}\nvoid loop()\n{\n\u00a0 if(coinsChange == 1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n//Check if a coin has been Inserted\u00a0 {\n\u00a0\u00a0\u00a0 coinsChange = 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n//unflag that a coin has been inserted\n\u00a0\u00a0\u00a0\u00a0\u00a0 Serial.print(\"Credit: \u00a3\");\n\u00a0\u00a0\u00a0 Serial.println(coinsValue);\u00a0\u00a0\u00a0\u00a0\n//Print the Value of coins inserted\u00a0 }\n}PROGRAM END!\nThis simple program will write the total value of coins inserted to the serial monitor.\nIf you'd like your project to start automatically after say 50p or 50c has been inserted then replace:\n\u00a0\u00a0\u00a0 Serial.print(\"Credit: \u00a3\");\n\u00a0\u00a0\u00a0 Serial.println(coinsValue);\nwith:\n\u00a0 if(coinsValue >= 0.50)\n\u00a0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //your code here, eg Big Flashing Lights!!!! and Serial.println(\"I'M MAKING MONEY!!!!\");\n\u00a0 }CONGRATULATIONS\nThe Electronics Side is finished, Continue if you want to Interface with a Window Application you've created", "step_imgs": ["https://www.instructables.com/files/deriv/FIQ/AW9L/H742YWSS/FIQAW9LH742YWSS.LARGE.jpg"], "step_title": "Step 3: Some Simple Code"}, {"step": 4, "steps_text": "Load up Microsoft Express 2010 and create a new \"Windows Form Application\".\nI'm calling mine Coin Selector.\nNow to your form add the following components:\n1. A Button, Change the Text to \"Connect\"\n2. A Text Box, Change the Text to \"0.00\"\n3. A Serial Port, Change the PortName to the COM Port your Arduino connects to.", "step_imgs": ["https://cdn.instructables.com/F3W/KDH1/H74351GX/F3WKDH1H74351GX.LARGE.jpg", "https://cdn.instructables.com/FFX/CRCZ/H742IM9L/FFXCRCZH742IM9L.LARGE.jpg"], "step_title": "Step 4: Basic Windows Form Application"}, {"step": 5, "steps_text": "Double Click the \"Connect\" Button and you'll open the Code window, paste the following code in the brackets:if (button1.Text == \"Connect\")\u00a0\u00a0 //If the button say's connect\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 serialPort1.Open();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //Open Serial Port\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (serialPort1.IsOpen)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //If the Port Opens\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 button1.Text = \"Disconnect\";\u00a0\u00a0\u00a0 //Change the Button to Disconnect\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.serialPort1.DataReceived += new System.IO.Ports.SerialDataReceivedEventHandler(this.serialPort1_DataReceived);\n\u00a0\u00a0\u00a0\u00a0\u00a0 //Adds an Event when the serial port receives data\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 serialPort1.Close();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //Close the Serial Port\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 button1.Text = \"Connect\";\u00a0\u00a0\u00a0 //Change the Button to Connect\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\nWe have to add a few functions, the first will close the port if we close the application. The second tells the program what to do if data is received and the third is what it does. So Just below the final \"}\" of \"button1_Click\"\nadd the following:\n//CLOSE PORT ON EXIT\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 private void Form1_FormClosing(object sender, FormClosingEventArgs e)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (serialPort1.IsOpen)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 serialPort1.Close();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n//SERIAL DATA RECEIVED EVENT\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 private void serialPort1_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {\u00a0\u00a0 //serialPort1 runs in a different thread, to call a function in the main code Invoke must be used\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this.Invoke(new EventHandler(serialReceived));\u00a0 //Calls the below function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 private void serialReceived(object sender, EventArgs e)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 double coinsValue = Convert.ToDouble(textBox1.Text);\u00a0 //converts the text to a number\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 coinsValue = coinsValue + 0.05;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //Add 0.05 to that number\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 textBox1.Text = Convert.ToString(coinsValue);\u00a0\u00a0\u00a0\u00a0 //Converts it back to text and puts it back in the textbox\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\nNow, Scroll up and you'll see some \"using\" lines, add \"using System.IO.Ports;\" as we'll be using Serial port functions.\nThe Basic Program is finished, On the Arduino side:\nreplace...\u00a0\u00a0\u00a0 Serial.print(\"Credit: \u00a3\");\n\u00a0\u00a0\u00a0 Serial.println(coinsValue);\nwith...\n\u00a0 Serial.print(0);\u00a0 //Sends 1 piece of data over the Serial, the windows program add's 0.05 for every piece (println would send 3)\nUpload, Run the windows Application, Click \"Connect\" and your away!", "step_imgs": ["https://cdn.instructables.com/FYT/BNMD/H742YYAK/FYTBNMDH742YYAK.LARGE.jpg"], "step_title": "Step 5: Coding Time"}, {"step": 6, "steps_text": "You can now activate your projects by receiving the right amount of money!\nGood Luck & when your a Millionaire please send me some!", "step_imgs": ["https://cdn.instructables.com/FRF/K0WN/H742FC5E/FRFK0WNH742FC5E.LARGE.jpg"], "step_title": "Step 6: CONGRATULATIONS"}], "channel": "Arduino"}, {"category": "technology", "description": "Have you ever wondered how your ID tag works? In this tutorial, we will be able to show you how to read a RFID button, or tag, if it\u2019s held up against ID-12 RFID reader or any 125KHz module. Also this project is an easy and fun way to explain the basic concept of digital identification technique using ID-12 together with ping ultrasonic and LEDs.", "title": "Getting Started With RFID", "url": "https://www.instructables.com/id/Getting-Started-With-RFID/", "section": "technology", "steps": [{"step": 1, "steps_text": "To follow along and create this tutorial, you will need the following materials:ID-12LA RFID Reader2 - RFID buttons 125 kHz (Black)ATMEGA32U2 USB Dev Board for ID-12 and ID-20Ping Ultrasonic Sensor2 - LEDs (1 Red and 1 Green)2 - 220ohm ResistorsJumper Wires", "step_imgs": [], "step_title": "Step 1: Materials"}, {"step": 2, "steps_text": "In this kit there are three things: ID-12LA RFID reader, RFID Button, and ATMEGA32U2 USB Dev Board. Here is a little information about each part:ID-12LA RFID reader: It uses radio frequency to identifying any object with a RFID tag wirelessly within a certain range.This reader is going to send out a radio signal that is going to be picked up and answered with a unique string of data from the RFID tag or button. This module has been used in applications such as access control, load identification, alarm system, and so on.The only things that make ID-12 different from the other RFID module (ID-2 and ID-20) is that it has a built-in antenna, and the size of the antenna. All these different ID readers use the same communication protocols, and works within a three data output format. This tutorial is using the ASCII (American Standard Code for Information Interchange) data format. That means out of 32 bit unique number of the RFID button, this tutorial concentrates on the 12 bit from the DATA and CHECKSUM.STX stands for Start-of-Text. It indicates that communication between the RFID button and RFID reader has started while ETX is an End-of-Text communication. DATA are the 10 ID tag number.Check Sum is the sum of the data for the purpose of detecting error.CR is the Carriage Return and LF is Linefeed.See first image above.It\u2019s designed to include 11 pins, which is shown in the diagram in the second image above. In order for the reader to work, it requires a power supply to the ground and digital pin that are connected to the Arduino for serial communication. It can draw around 65mA current and works within about 100mm range.", "step_imgs": ["https://cdn.instructables.com/FIC/HLQM/IKRNKRRO/FICHLQMIKRNKRRO.LARGE.jpg", "https://cdn.instructables.com/FYE/HB62/IKRNKRRT/FYEHB62IKRNKRRT.LARGE.jpg"], "step_title": "Step 2: ID-12LA RFID Kit - ID-12LA RFID Reader"}, {"step": 3, "steps_text": "RFID Button: Having a diameter of 30mm, this button holds a unique 32 bit ID. This ID is read by the ID-12LA RFID, or any other device using 125kHZ module. The unique serial number of each button makes them useful as a key system, or to track individual objects. Refer to the second image in the previous step for more information.", "step_imgs": [], "step_title": "Step 3: ID-12LA RFID Kit -  RFID Button"}, {"step": 4, "steps_text": "ATMEGA32U2 USB Dev Board: This device is made compatible for the RFID reader (ID-12) that we are using to do this tutorial. It contains an Atmega32u2 microcontroller and an extra pin that can be used to control other sensors. Also the board has an LED and Buzzer to indicate whether the reader made a scan or not. We only used this board for connection purpose since the ID-12 has a large pin that makes it hard to connect on to a breadboard.", "step_imgs": ["https://cdn.instructables.com/F35/ATIQ/IKRNKRT4/F35ATIQIKRNKRT4.LARGE.jpg"], "step_title": "Step 4: ID-12LA RFID Kit - ATMEGA32U2 USB Dev Board:"}, {"step": 5, "steps_text": "This sensor is used to measure distance by using ultrasonic waves. Ultrasonic describes sound that has a frequency above human ear limit, which is about 20,000Hz. The device can measure a distance from about 2cm (0.8in) to 3m (3.3yd). It works by sending an ultrasonic wave, and then provides an output pulse to approximate the time it took for the echoed wave to return to the sensor. The distance is the result of the rate of speed multiplied with how long it took for the wave to hit the object and to echo back to the sensor. These kinds of sensors are widely used in robotic applications.Distance between two objects = (Speed of Sound * Time) / 2", "step_imgs": ["https://cdn.instructables.com/FG8/9EKD/IKRNKRV8/FG89EKDIKRNKRV8.LARGE.jpg"], "step_title": "Step 5: Ping Ultrasonic Sensor"}, {"step": 6, "steps_text": "1. Place a black and red wire on the breadboard. Connect the red wire to 5V on the Arduino while the black wire is connected to the GND.", "step_imgs": [], "step_title": "Step 6: Hardware Assembly"}, {"step": 7, "steps_text": "2. Place the Ping Ultrasonic sensor on the breadboard. Connect the left most pin to the GND, the middle to the power supply (+5V), and the right most pin to digital pin 6 on the Arduino.", "step_imgs": ["https://cdn.instructables.com/FMX/1CMU/IKRNKRWH/FMX1CMUIKRNKRWH.LARGE.jpg"], "step_title": "Step 7: Hardware Assembly - Continued"}, {"step": 8, "steps_text": "3. Attach ID-12 reader to the Atmega32U2 USB Dev board and place it on the breadboard.  Then connect  from the board to the Arduino/ breadboard as follows:VCC => =5VGND = > GNDTX => Pin 3", "step_imgs": ["https://cdn.instructables.com/FNT/CZNM/IKRNKRWK/FNTCZNMIKRNKRWK.LARGE.jpg"], "step_title": "Step 8: Hardware Assembly - Continued"}, {"step": 9, "steps_text": "4. Place the LEDs on the breadboard and connect the resistors from the GND to the short pin of the LED. Connect the long pin to the digital pin 7 for the Red LED and digital pin 9 for the Green LED.", "step_imgs": ["https://cdn.instructables.com/FPF/CEEX/IKRNKRXU/FPFCEEXIKRNKRXU.LARGE.jpg"], "step_title": "Step 9: Hardware Assembly - Continued"}, {"step": 10, "steps_text": "In this section we are going to program the Arduino to identify the specific person assigned for each RFID button.First, we need a program to read the RFID button. After compiling and loading, we will use the unique numbers that were read from each RFID button for identification purposes./*Using RFID ID-12 to read unique character that is assigned to each RFID button or tag*/char val = 0; //variable to store the char read from the RFID buttonvoid setup() {Serial.begin(9600); //connect to the serial port}\nvoid loop () {//read the serial portif(Serial.available() > 0)val = Serial.read(); //read from one char from the ID-12 and store it Serial.print(val); //display the char in the serial monitor}}At this point, we will be able to know each RFID button\u2019s unique identifier.", "step_imgs": [], "step_title": "Step 10: Software Program"}, {"step": 11, "steps_text": "Since we already have the unique identifier from the earlier code, we are going to store it in the system. Once the user comes near to the ultrasonic sensor, it will ask for an ID. After the reader scans, check to make sure it matches the one stored in the system. The output will be displayed on the serial monitor as well as the ON and OFF functions of different LEDs to indicate matching.<p>/*This program uses ID-12 reader to read any RFID button or card, and Identify if this ID is known in the system*/<br>// include a header file to........... <br>#include  SoftwareSerial mySerial(3,2); // virtual serial port //////////////////////////////////////////////////////////////////<br> int R_LED= 7; // pin attached to the red LED<br> int G_LED = 9;<br> int LEDpin= 13;\nint Reset = 12;\nint Sonic_pin = 6; // pin from the ultrasonic sensor\n/////////////////////////////////////////////////////////////\nchar val = 0; // what if it's byte val...how many is it storing\n// because I already read and stored the ID's and I assigned it to the people\nchar id_tag1[] =\"78003BDE66FB\";\nchar id_tag2[] = \"78003BF78B3F\";\nchar* nam_tag[] = {\"Derek\", \"Jay\"};\nchar IDstring[13];\nint i=0;  \nint p =0;\n////////////////////////////////////////////////////////////\nvoid setup()\n{\nSerial.begin (9600);  // begin serial communication\nmySerial.begin(9600);\npinMode (Sonic_pin, INPUT);\npinMode (R_LED, OUTPUT);\npinMode (G_LED, OUTPUT);\npinMode (Reset, OUTPUT);\npinMode (LEDpin, OUTPUT);\ndigitalWrite(LEDpin ,LOW);\n}\n \nvoid loop()\n{\n //calculate the distance measured from the ping ultrasonic sensor until the target is less than 4cm away\n  float distance;\n  do{\n  float time;\n  // send out a pulse tone by creating\n  pinMode(Sonic_pin, OUTPUT);\n  digitalWrite(Sonic_pin, LOW);\n  delay(2);\n  digitalWrite(Sonic_pin, HIGH);\n  delay(5); \n  digitalWrite(Sonic_pin, LOW);\n  //let the ultrasonic sensor be an input to take back the echoed wave\n  pinMode(Sonic_pin, INPUT);\n  time = pulseIn(Sonic_pin, HIGH); // get the echoed duration in microsecond\n  distance = SecToCm(time); // call function to calculate the distance\n  delay(1000);} while (distance>4.0);\n  \n  Serial.println(\"Hello, please swipe your ID\");\n  //Serial.println(\" \");\n delay(2000);\n  //Open_Door();\n \n   Red_tag();\n   Iden_tag();\n   resetID();\n  Serial.println(\" \");\n}\n ////////////////////////////////////////////////////////////////////////////\nvoid Access()\n{\n  // turns the green LED on if the ID is known to the system\n  digitalWrite(G_LED, HIGH);\n  delay(2000);\n  digitalWrite(G_LED, LOW);\n}\n///////////////////////////////////////////////////////////////////////////////\nvoid Denied()\n{ \n  // turns the red LED on if the ID is not known to the system\n  for(int i=0; i<3; i++)\n  {\n  digitalWrite(R_LED, HIGH);\n  delay(1000);\n  digitalWrite(R_LED, LOW);\n  delay(300);\n  }\n}\n//////////////////////////////////////////////////////////////////////////////\nfloat SecToCm(float time)\n{\n  // convert the time measured into distance in centimeter\n  //the ultrasonic read 29 microseconds per centimeter\n return time/29.0/2.0 ;\n}\n///////////////////////////////////////////////////////////////////////////////////////////////\nvoid Red_tag()\n { // if there is a radio frequency available from let the ID-12 read each char and store the value\n   while (mySerial.available() >0)\n   {\n     //for(p=0;p<13;p++)\n     {\n     val= mySerial.read();\n     IDstring[p] = val;\n     //Serial.println(val);\n     p++;\n     }\n   }\n   p=0;\n   delay(500);\n  Serial.print(\"ID Number: \");\n  delay(500);\n  // print out on the serial monitor the RFID unique ID stored in string\n    for ( i=0; i<13;i++)\n{\n  Serial.print(IDstring[i]);\n}\n Serial.println();\n delay(1000);\n Serial.print(\"Please wait while checking\");\n Serial.println();\n }\n ////////////////////////////////////////////////////////////////////////////////\n void Iden_tag()\n{\n   boolean reading = true; //to check if the ID is known\n   boolean reading1 = false;// to check if the first ID is not known\n   boolean reading2 = false;// to check if the second ID is not known\n  \n for (int i=0; i<12;i++)// comparing the new button read to the ID 2 stored in the system\n{\n if (IDstring[i+1] != id_tag2[i])\n {\n  reading2= true; //indicate that the ID is not the same\n  reading = false;\n   // break;\n }\n \n}\n \n if (reading==true)\n {\n delay (1500);\n  Serial.println(\"Access granted\");\n  Serial.print(\"ID belongs to \");\n  Serial.println(nam_tag[1]);\n   Access(); // call a function to light up the green LED\n delay(2000);\n  }\n reading = true;\n for (int i=0; i<12;i++)// why 12 not 13 try to figure out\n{\n if (IDstring[i+1] != id_tag1[i])\n  {\n    reading1= true;\n    reading = false;\n    //break;\n  } \n}  \n{\n if (reading==true)\n {\n   delay (1500);\n  Serial.println(\"Access granted\");\n  Serial.print(\"ID belongs to \");\n  Serial.println(nam_tag[0]);\n  Access();\n delay(2000);\n }\n if (reading1== true && reading2 ==true)\n  {\n   delay(1000);\n    Denied();\n     Serial.println(\"Access Denied\");\n     Serial.println(\"Please try again \");\n  }\n}\n}\n///////////////////////////////////////////////////////////\nvoid resetID()\n{\n for(int i = 0; i < 13; i++){ \n    IDstring[i] = 0;\n   }\n}</p>", "step_imgs": [], "step_title": "Step 11: Software Program - Continued"}, {"step": 12, "steps_text": "The first part of the code includes the serial header file that is used to implement serial communication between the Arduino and RFID reader module. We are then going to create an object, in this case \u201cmySerial\u201d, to assign the communication pins. Then we define the global variable pin that is used by the LED and ping ultrasonic sensor. Also, as a global variable, we have created a character array to hold the two ID numbers that we got from the previous code as well as two names that are assigned for each ID number. These variables can be used by any function declared in this program.Inside the setup function we have defined the serial communication between the computer and the Arduino as well as ID-12 and Arduino using same frequency band (9600). Then we defined which pin is used as an output or input. When we look at the loop function, the first thing we did was use another loop known as do while loop. Inside this loop, we calculated the distance at least once and checked if the target is located less than 4cm away. In order to calculate the distance, we first have to send out a pitched tone from the ultrasonic sensor. And this is done by sending Low-High-Low sequence by triggering digital pin 6. After it hit a target and returned back to the sensor, the sensor will output echo pulse. Using pulseln(), we can measure the echoed time pulse in microsecond and then converted it into distance. According to the datasheet for ping ultrasonic sensor, the speed of the sound is 340m/s and that means there are 29 seconds per centimeter. Calling out function Red_tag, we are going to scan and store any RFID button. In order to do this, we created a new array to hold on to each character. The Iden_tag function is going to compare the button that was stored on to the new array and the Id_tag created at the beginning of the code. Then we are going to see the output on the serial monitor as well as the LEDs.", "step_imgs": [], "step_title": "Step 12: Code Explanation "}, {"step": 13, "steps_text": "Above is a screenshot of the serial monitor displaying the output.If the detector doesn\u2019t work after running the code, check the connection as well as any mistyping when writing the code. As we conclude this tutorial, we can now use this project for monitoring any object with a RFID tag.Ready to get started? Jaycon Systems' online store has all the products you need to create your own project. While you're there, check out the other tutorials we have available for you! Also, if you haven't already, explore our Instructables profile. If you have any questions about this tutorial, do not hesitate to post a comment, shoot us an email, or post it in our forum.Thanks for reading!", "step_imgs": ["https://cdn.instructables.com/FVV/1XRB/IKRNKRY1/FVV1XRBIKRNKRY1.LARGE.jpg"], "step_title": "Step 13: Results"}], "channel": "Sensors"}, {"category": "technology", "description": "\n          I am a Physicist and the nicest part of working in this field is that I get to build my own instruments. With this way of thinking, I decided to build a homebrew Arduino Oscilloscope. This instructable was written with the purpose of teaching a bit about microcontrollers and data acquisition. This is an extreme project because I wanted to squeeze out from Arduino as much velocity as I could, I have not seen any other Arduino Oscilloscope as fast as this one.\nSome time ago I was working on an Arduino project and I needed to see if the output signal was into compliance with the specifics. Thus I spent some time on the internet looking for Arduino Oscilloscopes already implemented, but I did not like what I found.\u00a0The projects that I found were mostly composed of a Graphical User Interface for the computer written in Processing and a very simple arduino sketch. The sketches were something like:\n\n\tvoid setup() {\n\t\u00a0\u00a0\u00a0\u00a0Serial.begin(9600);\n\t}\n\tvoid loop() {\n\t\u00a0\u00a0\u00a0\u00a0int val = analogRead(ANALOG_IN);\n\t\u00a0\u00a0\u00a0\u00a0Serial.println(val);\n\t}\nThis approach is not wrong and I do not want to insult anyone, but this is too slow for me. The serial port is slow and sending every result of an analogRead() through it is a bottleneck.\nI have been studying Waveform Digitizers for some time and I know reasonably well how do they work, so I got inspiration from them. These were the starting points of the oscilloscope that I wanted to create:\n\n\t\tthe incoming signal should be decoupled from the arduino to preserve it;\n\t\twith an offset of the signal it is possible to see negative signals;\n\t\tthe data should be buffered;\n\t\ta hardware trigger is required to catch the signals;\n\t\ta circular buffer can give the signal shape prior to the trigger (more to follow on this point);\n\t\tusing lower lever functions that the standard ones makes the program run faster.\nThe sketch for the Arduino is attached to this step, along with the schematic of the circuit that I made.\nThe name that I came up with, Girino, is a frivolous pun in Italian. Giro means rotation and adding the suffix -ino you get a small rotation, but Girino also means tadpole. This way I got a name and a mascot.\n        ", "title": "Girino - Fast Arduino Oscilloscope", "url": "https://www.instructables.com/id/Girino-Fast-Arduino-Oscilloscope/", "section": "technology", "steps": [{"step": 1, "steps_text": "THE AUTHOR OF THIS INSTRUCTABLE\u00a0MAKES NO GUARANTEE OF VALIDITY AND NO WARRANTY WHATSOEVER.\nElectronics can be dangerous if you do not know what you are doing and the author\u00a0cannot guarantee the validity of the information found here. This is not a professional advice and anything written in this instructable can be inaccurate, misleading, dangerous or wrong. Do not rely upon any information found here without independent verification.\nIt is up to you to verify any information and to double check that you are not exposing yourself, or anyone, to any harm or exposing anything to any damage; I take no responsibility. You have to follow by yourself the proper safety precautions, if you want to reproduce this project.\nUse this guide at your own risk!", "step_imgs": ["https://cdn.instructables.com/FPO/2E1R/GZUAG6TZ/FPO2E1RGZUAG6TZ.LARGE.jpg"], "step_title": "Step 1: Disclaimer"}, {"step": 2, "steps_text": "What we really need for this project is an Arduino board and the datasheet of the ATMega328P.\nThe datasheet is what tells us how the microcontroller works and it is very important to keep it if we want a lower lever of control.\nThe datasheet can be found here: http://www.atmel.com/Images/doc8271.pdf\nThe hardware that I added to the Arduino is partly necessary, its purpose is just to form the signal for the ADC and to provide a voltage level for the trigger. If you want, you could send the signal directly to the Arduino and use some voltage reference defined by a voltage divider, or even the 3.3 V given by the Arduino itself.", "step_imgs": ["https://cdn.instructables.com/FNR/4WCV/GZPBLRPE/FNR4WCVGZPBLRPE.LARGE.jpg", "https://cdn.instructables.com/FGR/DTDO/GZKG39A7/FGRDTDOGZKG39A7.LARGE.jpg"], "step_title": "Step 2: What You Need"}, {"step": 3, "steps_text": "\n          I usually put a lot of debug output in my programs because I want to keep track of anything that happens; the problem with Arduino is that we do not have a stdout to write to. I decided to use the Serial port as a stdout.\nBe aware, though, that this approach does not work all the times! Because writing to the Serial port requires some time for the execution and it can dramatically change things during some time sensible routines.\nI usually define debugging outputs inside a preprocessor macro, so when the debug is disabled they simply disappear from the program and do not slow down the execution:\n\n\t\tdprint(x);\u00a0- Writes to the serial port something like: # x: 123\n\t\tdshow(\"Some string\"); - Writes the string\n\tThis is the definition:\n\t\t#if DEBUG == 1\n\t\t#define dprint(expression) Serial.print(\"# \"); Serial.print( #expression ); Serial.print( \": \" ); Serial.println( expression )\n\t\t#define dshow(expression) Serial.println( expression )\n\t\t#else\n\t\t#define dprint(expression)\n\t\t#define dshow(expression)\n\t\t#endif", "step_imgs": ["https://cdn.instructables.com/FLH/WJJU/GZUA8RZ8/FLHWJJUGZUA8RZ8.LARGE.jpg"], "step_title": "Step 3: Debug Output"}, {"step": 4, "steps_text": "\n          With the purpose of being fast, it is necessary to manipulate the microcontroller features with lower lever functions than the standard ones provided by the Arduino IDE. The internal functions are managed through some registers, that are collections of eight bits where each one governs something particular. Each register contains eight bits because the ATMega328P has an 8-bit architecture.\nThe registers have some names that are specified in the datasheet depending on their meanings, like ADCSRA for the ADC Setting Register A. Also each meaningful bit of the registers has a name, like ADEN for the ADC Enable Bit in the ADCSRA register.\nTo set their bits we could use the usual C syntax for binary algebra, but I found on the internet a couple of macros that are very nice and clean:\n\n\t\t// Defines for setting and clearing register bits\n\t\t#ifndef cbi\n\t\t#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))\n\t\t#endif\n\t\t#ifndef sbi\n\t\t#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))\n\t\t#endif\n\tUsing them is very simple, if we want to set to 1 the Enable Bit of the ADC we can just write:\n\t\tsbi(ADCSRA,ADEN);\n\tWhile if we want to set it to 0 (id est clear it) we can just write:\n\t\tcbi(ADCSRA,ADEN);", "step_imgs": ["https://cdn.instructables.com/F8T/X9ES/GZLW4ES1/F8TX9ESGZLW4ES1.LARGE.jpg", "https://cdn.instructables.com/FBA/3NQ9/GZLW97EP/FBA3NQ9GZLW97EP.LARGE.jpg"], "step_title": "Step 4: Setting Register Bits"}, {"step": 5, "steps_text": "\n          As we will see in the next steps, the use of interrupts is required in this project. Interrupts are signals that tell the microcontroller to stop the execution of the main loop and pass it to some special functions. The images give an idea of the program flow.\nThe functions that are executed are called Interrupt Service Routines (ISR) and are more or less simple functions, but that do not take arguments.\nLet us see an example, something like counting some pulses. The ATMega328P has an Analog Comparator that has an interrupt associated that is activated when a signal surpasses a reference voltage. First of all you must define the function that will be exectuted:\n\n\t\tISR(ANALOG_COMP_vect)\n\t\t{\n\t\t\u00a0\u00a0\u00a0 counter++;\n\t\t}\nThis is really simple, the instruction ISR() is a macro that tells the compiler that the following function is an Interrupt Service Routine. While ANALOG_COMP_vect is called Interrupt Vector and it tells the compiler which interrupt is associated to that routine. In this case it is the Analog Comparator Interrupt. So everytime that the comparator sees a signal bigger than a reference it tells the microcontroller to execute that code, id est in this case to increment that variable.\nThe next step is to enable the interrupt associated. To enable it we must set the ACIE (Analog Comparator Interrupt Enable) bit of the ACSR (Analog Comparator Setting Register) register:\n\n\t\tsbi(ACSR,ACIE);\n\tIn the following site we can see the list of all Interrupt Vectors:http://www.nongnu.org/avr-libc/user-manual/group__avr__interrupts.html", "step_imgs": ["https://cdn.instructables.com/FDF/1QWH/GZLW99GQ/FDF1QWHGZLW99GQ.LARGE.jpg", "https://cdn.instructables.com/FDQ/C2E2/GZMIUKWM/FDQC2E2GZMIUKWM.LARGE.jpg"], "step_title": "Step 5: What Are the Interrupts"}, {"step": 6, "steps_text": "\n          The concept of using a Circular Buffer is pretty straight forward:\nAcquire continuously till a signal is found, then send the digitized signal to the computer.\n\tThis approach allows to have the incoming signal shape also before the trigger event.\nI prepared some diagrams to make myself clear. The following points are referring to the images.\n\n\t\tOn the first image we can see what I mean with continuous acquisition. We define a buffer that will store the data, in my case an array with 1280 slots, then we start to continuously read the ADC output register (ADCH) ad filling the buffer with the data. When we get to the end of the buffer we restart from the beggining without clearing it. If we immagine the array arranged in a circular way it is easy to see what I mean.\n\t\tWhen the signal surpasses the threshold, the Analog Comparator Interrupt is activated. Then we start a waiting phase in which we continue to acquire the signal but keep a count of the ADC cycles that passed from the Analog Comparator Interrupt.\n\t\tWhen we waited for N cycles (with N < 1280), we freeze the situation and stop the ADC cycles. So we end up with a buffer filled with the digitization of the signal temporal shape. The great part of this, is that we have also the shape prior to the trigger event, because we were already acquiring before that.\n\t\tNow we can send the whole buffer to the serial port in a block of binary data, instead of sending the single ADC reads. This reduced the overhead required to send the data and the bottleneck of the sketches that I found on the internet.", "step_imgs": ["https://cdn.instructables.com/FO3/JCIB/GZKGLLQT/FO3JCIBGZKGLLQT.LARGE.jpg", "https://cdn.instructables.com/F6E/95A1/GZLW96FD/F6E95A1GZLW96FD.LARGE.jpg", "https://cdn.instructables.com/F67/V17T/GZKG30IA/F67V17TGZKG30IA.LARGE.jpg", "https://cdn.instructables.com/F2A/X7MV/GZLW96FE/F2AX7MVGZLW96FE.LARGE.jpg"], "step_title": "Step 6: Continuously Acquire With a Circular Buffer"}, {"step": 7, "steps_text": "\n          An oscilloscope shows on its display a signal, on that we all agree, but how can it show it steadily and do not show it jumping around the screen? It has an internal trigger that is able to show the signal always on the same position of the screen (or at least most of the times), creating the illusion of a stable plot.\nThe trigger is associated with a threshold that activates a sweep when the signal passes it. A sweep is the phase in which the oscilloscope records and displays the signal. After a sweep another phase occurs: the holdoff, in which the oscilloscope rejects any incoming signal. The holdoff period can be composed of a part of dead time, in which the oscilloscope is unable to accept any signal, and a part that can be user selectable. The dead time can be caused by various reasons like having to draw on the screen or having to store the data somewhere.\nLooking at the image we get a sense of what happens.\n\n\t\tSignal 1 surpasses the threshold and activates the sweep;\n\t\tsignal 2 is inside the sweep time and gets caught with the first;\n\t\tafter the holdoff, signal 3 activates the sweep again;\n\t\tinstead signal 4 is rejected because it falls inside the holdoff region.\nThe raison d'\u00eatre of the holdoff phase is to prevent some undesired signals to get in the sweep region. It is a little bit long to explain this point and it eludes the purpose of this instructable.\nThe moral of this story is that we need:\n\n\t\ta threshold level to wich we can compare the incoming signal;\n\t\ta signal that tells the microcontroller to start the waiting phase (see preceding step).\nWe have several possible solutions for point 1. :\n\n\t\tusing a trimmer we can manually set a voltage level;\n\t\tusing the PWM of the Arduino we can set the level by software;\n\t\tusing the 3.3 V provided by the Arduino itself;\n\t\tusing the internal bangap reference we can use a fixed level.\nFor point 2. we have the right solution: we can use the interrupt of the internal Analog Comparator of the microcontroller.\n        ", "step_imgs": ["https://cdn.instructables.com/FYJ/6VUX/GZPZMFFH/FYJ6VUXGZPZMFFH.LARGE.jpg"], "step_title": "Step 7: Oscilloscope Triggering"}, {"step": 8, "steps_text": "\n          The Arduino microcontroller features a single 10-bit successive approximation ADC. Before the ADC there is an analog multiplexer that lets us send, to the ADC,\u00a0the signals from different pins and sources (but only one at a time).Successive Approximation ADC means that the ADC takes 13 clock cycles to complete the conversion (and 25 clock cycles for the first conversion). There is a clock signal dedicated to the ADC that is \"computed\" from the main clock of the Arduino; this is because the ADC is a little slow and can not keep up with the pace of the other parts of the microcontroller. It requires an input clock frequency between 50 kHz and 200 kHz to get maximum resolution. If a lower resolution than 10 bits is needed, the input clock frequency to the ADC can be higher than 200 kHz to get a higher sample rate.\nBut how much higher rates can we use? There are a couple of good guides about the ADC at the Open Music Labs that I suggest to read:\nhttp://www.openmusiclabs.com/learning/digital/atmega-adc/http://www.openmusiclabs.com/learning/digital/atmega-adc/in-depth/\nSince my purpose is to get a fast oscilloscope I decided to limit the precision to 8-bits. This has several bonuses:\n\n\t\tthe data buffer can store more data;\n\t\tyou do not waste 6-bits of RAM per datum;\n\t\tthe ADC can acquire faster.\nThe prescaler lets us divide the frequency, by some factors, by setting the ADPS0-1-2 bits of the ADCSRA register. Seeing the plot of the precision from the Open Music Labs Article, we can see that for 8-bits precision the frequency could go up to 1.5 MHz, good! But since the ability of changing the prescaler factor lets us change the acquisition rate, we can use it also to change the timescale of the oscilloscope.\nThere is a good feature about the output registers: we can decide the adjusting of conversion bits, by setting the ADLAR bit in the ADMUX register. If it is 0 they are right adjusted and viceversa (see the image). Since I wanted 8-bits precision I set it to 1 so I could read just the ADCH register and ignore the ADCL.\nI decided to have just one input channel to avoid having to switch channel back and forth at every conversion.\nOne last thing about the ADC, it has different running modes each one with a different trigger source:\n\n\t\tFree Running mode\n\t\tAnalog Comparator\n\t\tExternal Interrupt Request 0\n\t\tTimer/Counter0 Compare Match A\n\t\tTimer/Counter0 Overflow\n\t\tTimer/Counter1 Compare Match B\n\t\tTimer/Counter1 Overflow\n\t\tTimer/Counter1 Capture Event\nI was interested in the free running mode that is a mode in which the ADC continuously converts the input and throws an Interrupt at the end of each conversion (associated vector:\u00a0ADC_vect).", "step_imgs": ["https://cdn.instructables.com/FFU/6Y34/GZQR1BVN/FFU6Y34GZQR1BVN.LARGE.jpg", "https://cdn.instructables.com/FM2/0IGY/GZPZME5W/FM20IGYGZPZME5W.LARGE.jpg", "https://cdn.instructables.com/FA2/MS3S/GZQ40KO6/FA2MS3SGZQ40KO6.LARGE.jpg"], "step_title": "Step 8: How the ADC Works"}, {"step": 9, "steps_text": "\n          The analog input pins of the Arduino can also be used as digital I/O pins, therefore they have an input buffer for digital functions. If we want to use them as analog pins you should disable this feature.\nSending an analog signal to a digital pin induces it to toggle between HIGH and LOW states, especially if the signal is near the boundary between the two states; this toggling induces some noise to the near circuits like the ADC itself (and induces a higher energy consumption).\nTo disable the digital buffer we should set the ADCnD bits of the DIDR0 register:\n\n\t\tsbi(DIDR0,ADC5D);\n\t\tsbi(DIDR0,ADC4D);\n\t\tsbi(DIDR0,ADC3D);\n\t\tsbi(DIDR0,ADC2D);\n\t\tsbi(DIDR0,ADC1D);\n\t\tsbi(DIDR0,ADC0D);", "step_imgs": ["https://cdn.instructables.com/FIU/SIJP/GZQ40L39/FIUSIJPGZQ40L39.LARGE.jpg"], "step_title": "Step 9: Digital Input Buffers"}, {"step": 10, "steps_text": "In the sketch, I wrote a initialization function that sets-up all the parameters of the ADC functioning. As I tend to write clean and commented code, I will just past the function here. We can refer to the preceding step and to the comments for the meaning of the registers.\n\n\tvoid initADC(void)\n\t{\n\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\u00a0 \u00a0 \u00a0 \u00a0 // ADMUX settings\n\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\u00a0 \u00a0 \u00a0 \u00a0 // These bits select the voltage reference for the ADC. If these bits\n\t\u00a0 \u00a0 \u00a0 \u00a0 // are changed during a conversion, the change will not go in effect\n\t\u00a0 \u00a0 \u00a0 \u00a0 // until this conversion is complete (ADIF in ADCSRA is set). The\n\t\u00a0 \u00a0 \u00a0 \u00a0 // internal voltage reference options may not be used if an external\n\t\u00a0 \u00a0 \u00a0 \u00a0 // reference voltage is being applied to the AREF pin.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // REFS1 REFS0 Voltage reference\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 0 AREF, Internal Vref turned off\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 1 AVCC with external capacitor at AREF pin\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 0 Reserved\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 1 Internal 1.1V Voltage Reference with external\n\t\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0\u00a0 capacitor at AREF pin\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(ADMUX,REFS1);\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(ADMUX,REFS0);\n\t\u00a0 \u00a0 \u00a0 \u00a0 // The ADLAR bit affects the presentation of the ADC conversion result\n\t\u00a0 \u00a0 \u00a0 \u00a0 // in the ADC Data Register. Write one to ADLAR to left adjust the\n\t\u00a0 \u00a0 \u00a0 \u00a0 // result. Otherwise, the result is right adjusted. Changing the ADLAR\n\t\u00a0 \u00a0 \u00a0 \u00a0 // bit will affect the ADC Data Register immediately, regardless of any\n\t\u00a0 \u00a0 \u00a0 \u00a0 // ongoing conversions.\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(ADMUX,ADLAR);\n\t\u00a0 \u00a0 \u00a0 \u00a0 // The value of these bits selects which analog inputs are connected to\n\t\u00a0 \u00a0 \u00a0 \u00a0 // the ADC. If these bits are changed during a conversion, the change\n\t\u00a0 \u00a0 \u00a0 \u00a0 // will not go in effect until this conversion is complete (ADIF in\n\t\u00a0 \u00a0 \u00a0 \u00a0 // ADCSRA is set).\n\t\u00a0 \u00a0 \u00a0 \u00a0 ADMUX |= ( ADCPIN & 0x07 );\n\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\u00a0 \u00a0 \u00a0 \u00a0 // ADCSRA settings\n\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\u00a0 \u00a0 \u00a0 \u00a0 // Writing this bit to one enables the ADC. By writing it to zero, the\n\t\u00a0 \u00a0 \u00a0 \u00a0 // ADC is turned off. Turning the ADC off while a conversion is in\n\t\u00a0 \u00a0 \u00a0 \u00a0 // progress, will terminate this conversion.\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(ADCSRA,ADEN);\n\t\u00a0 \u00a0 \u00a0 \u00a0 // In Single Conversion mode, write this bit to one to start each\n\t\u00a0 \u00a0 \u00a0 \u00a0 // conversion. In Free Running mode, write this bit to one to start the\n\t\u00a0 \u00a0 \u00a0 \u00a0 // first conversion. The first conversion after ADSC has been written\n\t\u00a0 \u00a0 \u00a0 \u00a0 // after the ADC has been enabled, or if ADSC is written at the same\n\t\u00a0 \u00a0 \u00a0 \u00a0 // time as the ADC is enabled, will take 25 ADC clock cycles instead of\n\t\u00a0 \u00a0 \u00a0 \u00a0 // the normal 13. This first conversion performs initialization of the\n\t\u00a0 \u00a0 \u00a0 \u00a0 // ADC. ADSC will read as one as long as a conversion is in progress.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // When the conversion is complete, it returns to zero. Writing zero to\n\t\u00a0 \u00a0 \u00a0 \u00a0 // this bit has no effect.\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(ADCSRA,ADSC);\n\t\u00a0 \u00a0 \u00a0 \u00a0 // When this bit is written to one, Auto Triggering of the ADC is\n\t\u00a0 \u00a0 \u00a0 \u00a0 // enabled. The ADC will start a conversion on a positive edge of the\n\t\u00a0 \u00a0 \u00a0 \u00a0 // selected trigger signal. The trigger source is selected by setting\n\t\u00a0 \u00a0 \u00a0 \u00a0 // the ADC Trigger Select bits, ADTS in ADCSRB.\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(ADCSRA,ADATE);\n\t\u00a0 \u00a0 \u00a0 \u00a0 // When this bit is written to one and the I-bit in SREG is set, the\n\t\u00a0 \u00a0 \u00a0 \u00a0 // ADC Conversion Complete Interrupt is activated.\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(ADCSRA,ADIE);\n\t\u00a0 \u00a0 \u00a0 \u00a0 // These bits determine the division factor between the system clock\n\t\u00a0 \u00a0 \u00a0 \u00a0 // frequency and the input clock to the ADC.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // ADPS2 ADPS1 ADPS0 Division Factor\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 0 0 2\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 0 1 2\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 1 0 4\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 1 1 8\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 0 0 16\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 0 1 32\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 1 0 64\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 1 1 128\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(ADCSRA,ADPS2);\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(ADCSRA,ADPS1);\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(ADCSRA,ADPS0);\n\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\u00a0 \u00a0 \u00a0 \u00a0 // ADCSRB settings\n\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\u00a0 \u00a0 \u00a0 \u00a0 // When this bit is written logic one and the ADC is switched off\n\t\u00a0 \u00a0 \u00a0 \u00a0 // (ADEN in ADCSRA is zero), the ADC multiplexer selects the negative\n\t\u00a0 \u00a0 \u00a0 \u00a0 // input to the Analog Comparator. When this bit is written logic zero,\n\t\u00a0 \u00a0 \u00a0 \u00a0 // AIN1 is applied to the negative input of the Analog Comparator.\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(ADCSRB,ACME);\n\t\u00a0 \u00a0 \u00a0 \u00a0 // If ADATE in ADCSRA is written to one, the value of these bits\n\t\u00a0 \u00a0 \u00a0 \u00a0 // selects which source will trigger an ADC conversion. If ADATE is\n\t\u00a0 \u00a0 \u00a0 \u00a0 // cleared, the ADTS2:0 settings will have no effect. A conversion will\n\t\u00a0 \u00a0 \u00a0 \u00a0 // be triggered by the rising edge of the selected Interrupt Flag. Note\n\t\u00a0 \u00a0 \u00a0 \u00a0 // that switching from a trigger source that is cleared to a trigger\n\t\u00a0 \u00a0 \u00a0 \u00a0 // source that is set, will generate a positive edge on the trigger\n\t\u00a0 \u00a0 \u00a0 \u00a0 // signal. If ADEN in ADCSRA is set, this will start a conversion.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // Switching to Free Running mode (ADTS[2:0]=0) will not cause a\n\t\u00a0 \u00a0 \u00a0 \u00a0 // trigger event, even if the ADC Interrupt Flag is set.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // ADTS2 ADTS1 ADTS0 Trigger source\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 0 0 Free Running mode\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 0 1 Analog Comparator\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 1 0 External Interrupt Request 0\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 1 1 Timer/Counter0 Compare Match A\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 0 0 Timer/Counter0 Overflow\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 0 1 Timer/Counter1 Compare Match B\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 1 0 Timer/Counter1 Overflow\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 1 1 Timer/Counter1 Capture Event\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(ADCSRB,ADTS2);\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(ADCSRB,ADTS1);\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(ADCSRB,ADTS0);\n\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\u00a0 \u00a0 \u00a0 \u00a0 // DIDR0 settings\n\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\u00a0 \u00a0 \u00a0 \u00a0 // When this bit is written logic one, the digital input buffer on the\n\t\u00a0 \u00a0 \u00a0 \u00a0 // corresponding ADC pin is disabled. The corresponding PIN Register\n\t\u00a0 \u00a0 \u00a0 \u00a0 // bit will always read as zero when this bit is set. When an analog\n\t\u00a0 \u00a0 \u00a0 \u00a0 // signal is applied to the ADC5..0 pin and the digital input from this\n\t\u00a0 \u00a0 \u00a0 \u00a0 // pin is not needed, this bit should be written logic one to reduce\n\t\u00a0 \u00a0 \u00a0 \u00a0 // power consumption in the digital input buffer.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // Note that ADC pins ADC7 and ADC6 do not have digital input buffers,\n\t\u00a0 \u00a0 \u00a0 \u00a0 // and therefore do not require Digital Input Disable bits.\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(DIDR0,ADC5D);\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(DIDR0,ADC4D);\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(DIDR0,ADC3D);\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(DIDR0,ADC2D);\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(DIDR0,ADC1D);\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(DIDR0,ADC0D);\n\t}", "step_imgs": ["https://cdn.instructables.com/FRS/ZFMU/GZQ40L3J/FRSZFMUGZQ40L3J.LARGE.jpg"], "step_title": "Step 10: Setting Up the ADC"}, {"step": 11, "steps_text": "The Analog Comparator is an internal module of the microcontroller and it compares the input values on the positive pin (Digital Pin 6) and negative pin (Digital Pin 7). When the voltage on the positive pin is higher than the voltage on the negative pin AIN1, the Analog Comparator outputs a 1 in the ACO bit of the ACSR register.\nOptionally, the comparator can trigger an interrupt, exclusive to the Analog Comparator. The associated vector is ANALOG_COMP_vect.\nWe can also set the the interrupt to be launched on a rising edge, falling edge or on a toggle of the state.\nThe Analog Comparator is just what we need for the triggering connecting out input signal to pin 6, now what is left is a threshold level on pin 7.", "step_imgs": ["https://cdn.instructables.com/FYW/ZVXN/GZPZO8Z8/FYWZVXNGZPZO8Z8.LARGE.jpg"], "step_title": "Step 11: How the Analog Comparator Works"}, {"step": 12, "steps_text": "\n          In the sketch, I wrote another initialization function that sets-up all the parameters of the Analog Comparator functioning. The same issue about ADC digital buffers applies to the Analog Comparator, as we can see on the bottom of the routine.\n\n\t\tvoid initAnalogComparator(void)\n\t\t{\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // ACSR settings\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // When this bit is written logic one, the power to the Analog\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // Comparator is switched off. This bit can be set at any time to turn\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // off the Analog Comparator. This will reduce power consumption in\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // Active and Idle mode. When changing the ACD bit, the Analog\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // Comparator Interrupt must be disabled by clearing the ACIE bit in\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // ACSR. Otherwise an interrupt can occur when the bit is changed.\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(ACSR,ACD);\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // When this bit is set, a fixed bandgap reference voltage replaces the\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // positive input to the Analog Comparator. When this bit is cleared,\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // AIN0 is applied to the positive input of the Analog Comparator. When\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // the bandgap referance is used as input to the Analog Comparator, it\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // will take a certain time for the voltage to stabilize. If not\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // stabilized, the first conversion may give a wrong value.\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(ACSR,ACBG);\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // When the ACIE bit is written logic one and the I-bit in the Status\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // Register is set, the Analog Comparator interrupt is activated.\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // When written logic zero, the interrupt is disabled.\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(ACSR,ACIE);\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // When written logic one, this bit enables the input capture function\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // in Timer/Counter1 to be triggered by the Analog Comparator. The\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // comparator output is in this case directly connected to the input\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // capture front-end logic, making the comparator utilize the noise\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // canceler and edge select features of the Timer/Counter1 Input\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // Capture interrupt. When written logic zero, no connection between\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // the Analog Comparator and the input capture function exists. To\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // make the comparator trigger the Timer/Counter1 Input Capture\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // interrupt, the ICIE1 bit in the Timer Interrupt Mask Register\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // (TIMSK1) must be set.\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(ACSR,ACIC);\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // These bits determine which comparator events that trigger the Analog\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // Comparator interrupt.\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // ACIS1 ACIS0 Mode\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 0 Toggle\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 1 Reserved\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 0 Falling edge\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 1 Rising edge\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(ACSR,ACIS1);\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(ACSR,ACIS0);\n\t\t\u00a0 \u00a0 \u00a0 \u00a0\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // DIDR1 settings\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // When this bit is written logic one, the digital input buffer on the\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // AIN1/0 pin is disabled. The corresponding PIN Register bit will\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // always read as zero when this bit is set. When an analog signal is\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // applied to the AIN1/0 pin and the digital input from this pin is not\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // needed, this bit should be written logic one to reduce power\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // consumption in the digital input buffer.\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(DIDR1,AIN1D);\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(DIDR1,AIN0D);\n\t\t}", "step_imgs": ["https://cdn.instructables.com/FQN/WA3H/GZQR3IJP/FQNWA3HGZQR3IJP.LARGE.jpg"], "step_title": "Step 12: Setting Up the Analog Comparator"}, {"step": 13, "steps_text": "\n          Recalling what we said about the trigger, we can implement these two solutions for the threshold:\n\n\t\tusing a trimmer we can manually set a voltage level;\n\t\tusing the PWM of the Arduino we can set the level by software.\nOn the image we can see the hardware implementation of the threshold in both paths.\nFor the manual selection, a multi-turn potentiometer put between +5 V and GND is sufficient.\nWhile for software selection we need a low-pass filter that filters a PWM signal coming from the Arduino. PWM signals (more on this to follow) are square signals with a constant frequency but a variable pulse-width. This variability brings a variable mean value of the signal that can be extracted with a low-pass filter. A good cutoff frequency for the filter is about one hundredth of the PWM frequency and I chose about 560 Hz.\nAfter the two threshold sources I inserted a couple of pins that allows to select, with a jumper, which source I wanted. After the selection I also added an emitter follower to decouple the sources from the Arduino pin.\n        ", "step_imgs": ["https://cdn.instructables.com/F1Y/7HHJ/GZUA8XAV/F1Y7HHJGZUA8XAV.LARGE.jpg"], "step_title": "Step 13: Threshold"}, {"step": 14, "steps_text": "\n          As stated before, a Pulse Width Modulation (PWM) signal is a square signal with fixed frequency but variable width. On the image we see an example. On each row there is one of such signals with a different duty cycle (id est the period portion in which the signal is High). Taking the mean signal over a period, we get the red line that correspond to the duty cycle with respect to the signal maximum.\nElectronically \"taking the mean of a signal\" can be translated to \"passing it to a low-pass filter\", as seen on the preceding step.\nHow does the Arduino generate a PWM signal? There is a really good tutorial about PWM here:http://arduino.cc/en/Tutorial/SecretsOfArduinoPWM\nWe will see just the points that are needed for this project.\nIn the ATMega328P there are three timers that can be used to generate PWM signals, each one of those has different characteristics that you can use. For each timer correspond two registers called\u00a0Output Compare Registers A/B\u00a0(OCRnx) that are used to set the signal duty cycle.\nAs for the ADC there is a prescaler (see image), that slows down the main clock to have a precise control of the PWM frequency. The slowed down clock is fed to a counter that increments a Timer/Counter Register (TCNTn). This register is continuously compared to the OCRnx, when they are equal a signal is sent to a Waveform Generator that generate a pulse on the output pin. So the trick is setting the OCRnx register to some value to change the mean value of the signal.\nIf we want a 5 V signal (maximum) we must set a 100% duty cycle or a 255 in the OCRnx (maximum for a 8-bit number), while if we want a 0.5 V signal we must set a 10% duty cycle or a 25 in the OCRnx.\nSince the clock has to fill the TCNTn register before starting from the beginning for a new pulse the output frequency of the PWM is:\n\n\t\tf = (Main clock) / prescaler / (TCNTn maximum)exempli gratia for the Timer 0 and 2 (8-bit) with no prescaler it will be: 16 MHz / 256 = 62.5 KHz while for Timer 1 (16-bit) it will be 16 MHz / 65536 = 244 Hz.\nI decided to use the Timer number 2 because\n\n\t\tTimer 0\u00a0is used internally by the Arduino IDE for functions such as millis();\n\t\tTimer 1 has an output frequency too slow because it is a 16-bit timer.\nIn the ATMega328P there are different kinds of operation mode of the timers, but what I wanted was the Fast PWM one with no prescaling to get the maximum possible output frequency.\n        ", "step_imgs": ["https://cdn.instructables.com/FOA/VZS3/GZQR3MLC/FOAVZS3GZQR3MLC.LARGE.jpg", "https://cdn.instructables.com/F1C/JRSF/GZPZMIJW/F1CJRSFGZPZMIJW.LARGE.jpg"], "step_title": "Step 14: How the Pulse Width Modulation Works"}, {"step": 15, "steps_text": "In the sketch, I wrote another initialization function that sets-up all the parameters of the Timer functioning and initializes a couple of pins.\n\n\tvoid initPins(void)\n\t{\n\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\u00a0 \u00a0 \u00a0 \u00a0 // TCCR2A settings\n\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\u00a0 \u00a0 \u00a0 \u00a0 // These bits control the Output Compare pin (OC2A) behavior. If one or\n\t\u00a0 \u00a0 \u00a0 \u00a0 // both of the COM2A1:0 bits are set, the OC2A output overrides the\n\t\u00a0 \u00a0 \u00a0 \u00a0 // normal port functionality of the I/O pin it is connected to.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // However, note that the Data Direction Register (DDR) bit\n\t\u00a0 \u00a0 \u00a0 \u00a0 // corresponding to the OC2A pin must be set in order to enable the\n\t\u00a0 \u00a0 \u00a0 \u00a0 // output driver.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // When OC2A is connected to the pin, the function of the COM2A1:0 bits\n\t\u00a0 \u00a0 \u00a0 \u00a0 // depends on the WGM22:0 bit setting.\n\t\u00a0 \u00a0 \u00a0 \u00a0 //\n\t\u00a0 \u00a0 \u00a0 \u00a0 // Fast PWM Mode\n\t\u00a0 \u00a0 \u00a0 \u00a0 // COM2A1 COM2A0\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 0 Normal port operation, OC2A disconnected.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 1 WGM22 = 0: Normal Port Operation, OC0A Disconnected.\n\t\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0\u00a0 WGM22 = 1: Toggle OC2A on Compare Match.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 0 Clear OC2A on Compare Match, set OC2A at BOTTOM\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 1 Clear OC2A on Compare Match, clear OC2A at BOTTOM\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(TCCR2A,COM2A1);\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(TCCR2A,COM2A0);\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(TCCR2A,COM2B1);\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(TCCR2A,COM2B0);\n\t\u00a0 \u00a0 \u00a0 \u00a0 // Combined with the WGM22 bit found in the TCCR2B Register, these bits\n\t\u00a0 \u00a0 \u00a0 \u00a0 // control the counting sequence of the counter, the source for maximum\n\t\u00a0 \u00a0 \u00a0 \u00a0 // (TOP) counter value, and what type of waveform generation to be used\n\t\u00a0 \u00a0 \u00a0 \u00a0 // Modes of operation supported by the Timer/Counter unit are:\n\t\u00a0 \u00a0 \u00a0 \u00a0 // - Normal mode (counter),\n\t\u00a0 \u00a0 \u00a0 \u00a0 // - Clear Timer on Compare Match (CTC) mode,\n\t\u00a0 \u00a0 \u00a0 \u00a0 // - two types of Pulse Width Modulation (PWM) modes.\n\t\u00a0 \u00a0 \u00a0 \u00a0 //\n\t\u00a0 \u00a0 \u00a0 \u00a0 // Mode WGM22 WGM21 WGM20 Operation TOP\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 0 0 0 Normal\u00a0 0xFF\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 0 0 1 PWM\u00a0 0xFF\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 2 0 1 0 CTC\u00a0 OCRA\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 3 0 1 1 Fast PWM 0xFF\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 4 1 0 0 Reserved -\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 5 1 0 1 PWM\u00a0 OCRA\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 6 1 1 0 Reserved -\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 7 1 1 1 Fast PWM OCRA\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(TCCR2B,WGM22);\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(TCCR2A,WGM21);\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(TCCR2A,WGM20);\n\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\u00a0 \u00a0 \u00a0 \u00a0 // TCCR2B settings\n\t\u00a0 \u00a0 \u00a0 \u00a0 //---------------------------------------------------------------------\n\t\u00a0 \u00a0 \u00a0 \u00a0 // The FOC2A bit is only active when the WGM bits specify a non-PWM\n\t\u00a0 \u00a0 \u00a0 \u00a0 // mode.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // However, for ensuring compatibility with future devices, this bit\n\t\u00a0 \u00a0 \u00a0 \u00a0 // must be set to zero when TCCR2B is written when operating in PWM\n\t\u00a0 \u00a0 \u00a0 \u00a0 // mode. When writing a logical one to the FOC2A bit, an immediate\n\t\u00a0 \u00a0 \u00a0 \u00a0 // Compare Match is forced on the Waveform Generation unit. The OC2A\n\t\u00a0 \u00a0 \u00a0 \u00a0 // output is changed according to its COM2A1:0 bits setting. Note that\n\t\u00a0 \u00a0 \u00a0 \u00a0 // the FOC2A bit is implemented as a strobe. Therefore it is the value\n\t\u00a0 \u00a0 \u00a0 \u00a0 // present in the COM2A1:0 bits that determines the effect of the\n\t\u00a0 \u00a0 \u00a0 \u00a0 // forced compare.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // A FOC2A strobe will not generate any interrupt, nor will it clear\n\t\u00a0 \u00a0 \u00a0 \u00a0 // the timer in CTC mode using OCR2A as TOP.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // The FOC2A bit is always read as zero.\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(TCCR2B,FOC2A);\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(TCCR2B,FOC2B);\n\t\u00a0 \u00a0 \u00a0 \u00a0 // The three Clock Select bits select the clock source to be used by\n\t\u00a0 \u00a0 \u00a0 \u00a0 // the Timer/Counter.\n\t\u00a0 \u00a0 \u00a0 \u00a0 // CS22 CS21 CS20 Prescaler\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 0 0 No clock source (Timer/Counter stopped).\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 0 1 No prescaling\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 1 0 8\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 0 1 1 32\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 0 0 64\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 0 1 128\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 1 0 256\n\t\u00a0 \u00a0 \u00a0 \u00a0 // 1 1 1 1024\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(TCCR2B,CS22);\n\t\u00a0 \u00a0 \u00a0 \u00a0 cbi(TCCR2B,CS21);\n\t\u00a0 \u00a0 \u00a0 \u00a0 sbi(TCCR2B,CS20);\n\t\u00a0 \u00a0 \u00a0 \u00a0 pinMode( errorPin, OUTPUT );\n\t\u00a0 \u00a0 \u00a0 \u00a0 pinMode( thresholdPin, OUTPUT );\n\t\u00a0 \u00a0 \u00a0 \u00a0 analogWrite( thresholdPin, 127 );\n\t}", "step_imgs": ["https://cdn.instructables.com/FIP/ALVA/GZPZODTC/FIPALVAGZPZODTC.LARGE.jpg"], "step_title": "Step 15: Setting Up the PWM"}, {"step": 16, "steps_text": "I can not remember where, but I read that variables that are modified inside an ISR should be declared as volatile.\nVolatile variables are variables that can change during time, even if the program that is running does not modify them. Just like Arduino registers that can change value for some external interventions.\nWhy does the compiler want to know about such variables? That is because the compiler always tries to optimize the code that we write, to make it faster, and it modifies it a little bit, trying not to change its meaning. If a variable changes by its own it could seem to the compiler that it is never modified during execution of, say, a loop and it could ignore it; while it could be crucial that the variable changes its value. So declaring volatile variables it prevents the compiler to modify the code concerning those.\nFor some more information I suggest to read the Wikipedia page:\u00a0http://en.wikipedia.org/wiki/Volatile_variable", "step_imgs": ["https://cdn.instructables.com/FQ7/DWXD/GZUAF99L/FQ7DWXDGZUAF99L.LARGE.jpg"], "step_title": "Step 16: Volatile Variables"}, {"step": 17, "steps_text": "\n          Finally we have gotten to the kernel of the program!\nAs we saw before, I wanted a continuous acquisition and I wrote the ADC Interrupt Service Routine to store in the circular buffer the data continuously. It stops whenever it reaches the index that is equal to stopIndex. The buffer is implemented as circular employing the modulo operator.\n\t\t//-----------------------------------------------------------------------------\n\t\t// ADC Conversion Complete Interrupt\n\t\t//-----------------------------------------------------------------------------\n\t\tISR(ADC_vect)\n\t\t{\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // When ADCL is read, the ADC Data Register is not updated until ADCH\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // is read. Consequently, if the result is left adjusted and no more\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // than 8-bit precision is required, it is sufficient to read ADCH.\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // Otherwise, ADCL must be read first, then ADCH.\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 ADCBuffer[ADCCounter] = ADCH;\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 ADCCounter = ( ADCCounter + 1 ) % ADCBUFFERSIZE;\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 if ( wait )\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 {\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if ( stopIndex == ADCCounter )\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Freeze situation\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Disable ADC and stop Free Running Conversion Mode\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cbi( ADCSRA, ADEN );\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 freeze = true;\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 }\n\t\t}\n\tThe Analog Comparator Interrupt Service Routine (that is called when a signal passes the threshold) disables itself and tells the ADC ISR to start the waiting phase and sets the stopIndex.\n\t\t//-----------------------------------------------------------------------------\n\t\t// Analog Comparator interrupt\n\t\t//-----------------------------------------------------------------------------\n\t\tISR(ANALOG_COMP_vect)\n\t\t{\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // Disable Analog Comparator interrupt\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 cbi( ACSR,ACIE );\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 // Turn on errorPin\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 //digitalWrite( errorPin, HIGH );\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 sbi( PORTB, PORTB5 );\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 wait = true;\n\t\t\u00a0 \u00a0 \u00a0 \u00a0 stopIndex = ( ADCCounter + waitDuration ) % ADCBUFFERSIZE;\n\t\t}\n\tThis was really easy after all that grounding!", "step_imgs": ["https://cdn.instructables.com/FZZ/NB2E/GZSNYZN7/FZZNB2EGZSNYZN7.LARGE.jpg", "https://cdn.instructables.com/FDP/AU3H/GZQ40ZZ1/FDPAU3HGZQ40ZZ1.LARGE.jpg"], "step_title": "Step 17: Writing the Kernel of the Sketch"}, {"step": 18, "steps_text": "\n          Let us get to the hardware now. The circuit may look complicated but it is really simple.\n\t\tThere is a 1 M\u03a9 resistor at the input, to give a mass reference to the signal and have a high impedance input. A high impedance \"simulates\" an open circuit if you connect it to a lower impedance one, so the presence of the Girino does not mess too much with the circuit you want to measure.\n\t\tAfter the resistor there is an emitter follower to decouple the signal and protect the following electronics.\n\t\tThere is a simple offset that generates a 2.5 V level with a voltage divider. It is attached to a capacitor to stabilize it.\n\t\tThere is a non-inverting sum-amplifier that sums the incoming signal and the offset. I used this technique because I wanted to be able to see also negative signals, as the Arduino ADC could see signals only between 0 V to 5 V.\n\t\tAfter the sum-amp there is another emitter follower.\n\t\tA jumper lets us decide if we want to feed the signal with a offset or not.\nThe Operational Amplifier that I intended to use was a LM324 that is able to work between 0 V to 5 V but also between, say, -12 V to 12 V. This gives us more possibilities with the power supplies. I also tried a TL084 that is way faster than the LM324 but requires a dual power supply. They both have the same pinout so can be changed without any modification of the circuit.", "step_imgs": ["https://cdn.instructables.com/FKH/AHV3/GZUASBSJ/FKHAHV3GZUASBSJ.LARGE.jpg"], "step_title": "Step 18: Forming Incoming Signal"}, {"step": 19, "steps_text": "Bypass Capacitors are capacitors that are used to filter the power supplies of Integrated Circuits (IC) and they should be put as close as possible to the alimentation pins of the IC. They are used usually in couple, one ceramic and one electrolytic because they can filter out different frequencies.", "step_imgs": ["https://cdn.instructables.com/FV6/5PF8/GZUAFB6B/FV65PF8GZUAFB6B.LARGE.jpg"], "step_title": "Step 19: Bypass Capacitors"}, {"step": 20, "steps_text": "I used a dual power supply for the TL084 that can be converted to a single power supply for the LM324.\nOn the image we can see that I used a couple of voltage regulators a 7812, for +12 V, and a 7912, for -12 V. The capacitors are, as usual, used to stabilize the levels and their values are the ones suggested in the datasheets.\nObviously to have a \u00b112 V we have to have at least about 30 V on the input because the voltage regulators require a higher input to provide a stabilized output. Since I did not have such power supply I used the trick of using two 15 V power supplies in series. One of the two is connected to the Arduino power connector (so it feeds both the Arduino and my circuit) and the other directly to the circuit.\nIt is not an error to connect the +15 V of the second power supply to the GND of the first! This is how we get a -15 V with isolated power supplies.\nIf I do not want to carry around an Arduino and two power supplies I can still use the +5 V provided by the Arduino changing those jumpers (and using the LM324).", "step_imgs": ["https://cdn.instructables.com/F3V/A01W/GZUAFVZM/F3VA01WGZUAFVZM.LARGE.jpg", "https://cdn.instructables.com/F1O/Q00F/GZUAFW0T/F1OQ00FGZUAFW0T.LARGE.jpg"], "step_title": "Step 20: Power Sources"}, {"step": 21, "steps_text": "I have always been annoyed by the connectors that I could find to make an Arduino shield, because they always have pins that are too short and the boards that I use can be soldered only on one side.\u00a0So I made up a little trick to make the pins longer so they can be soldered and inserted in the Arduino.\nInserting the pin strip into the board, as on the picture, we can push the pins, to have them only on one side of the black plastic. Then we can solder them on the same side where they will be inserted in the Arduino.", "step_imgs": ["https://cdn.instructables.com/FL6/K3AP/GZUAFWQP/FL6K3APGZUAFWQP.LARGE.jpg", "https://cdn.instructables.com/FMZ/JTSA/GZUAFBJQ/FMZJTSAGZUAFBJQ.LARGE.jpg", "https://cdn.instructables.com/F7Y/16GF/GZUAFBJS/F7Y16GFGZUAFBJS.LARGE.jpg", "https://cdn.instructables.com/FTQ/VFAB/GZUB372S/FTQVFABGZUB372S.LARGE.jpg", "https://cdn.instructables.com/FVC/OW74/GZUASC4F/FVCOW74GZUASC4F.LARGE.jpg", "https://cdn.instructables.com/F9R/R9UE/GZUAFBK1/F9RR9UEGZUAFBK1.LARGE.jpg", "https://cdn.instructables.com/FPF/LXE2/GZUASC4H/FPFLXE2GZUASC4H.LARGE.jpg"], "step_title": "Step 21: Preparing a Shield Connector"}, {"step": 22, "steps_text": "I am unable to show you all the soldering procedure of the circuit because it underwent a lot of trial and error work. In the end it got a little messy but not too bad, though I will not show the underside because that is really messy.\nAt this stage there is not much to say because I already explained in detail all the parts of the circuit. I tested it with an oscilloscope, that a friend borrowed me, to see the signals at each point of the circuit. It seems that everything is working alright and I am pretty satisfied.\nThe connector for the incoming signal could seem a little strange for someone that does not come from the High Energy Physics, it is a LEMO connector. It is the standard connector for nuclear signals, at least in Europe as in the USA I have seen mostly BNC connectors.", "step_imgs": ["https://cdn.instructables.com/FZE/D8ZW/GZUASC4D/FZED8ZWGZUASC4D.LARGE.jpg", "https://cdn.instructables.com/FNG/10PY/GZUAFWQX/FNG10PYGZUAFWQX.LARGE.jpg", "https://cdn.instructables.com/FA0/LP18/GZV1CEFV/FA0LP18GZV1CEFV.LARGE.jpg", "https://cdn.instructables.com/F05/E23J/GZUB373A/F05E23JGZUB373A.LARGE.jpg", "https://cdn.instructables.com/FLF/7C36/GZV1CEFX/FLF7C36GZV1CEFX.LARGE.jpg", "https://cdn.instructables.com/F9Q/AQVM/GZV1CEFZ/F9QAQVMGZV1CEFZ.LARGE.jpg", "https://cdn.instructables.com/FIA/YUWP/GZV1CEG2/FIAYUWPGZV1CEG2.LARGE.jpg", "https://cdn.instructables.com/F9Y/7OEI/GZUASC4R/F9Y7OEIGZUASC4R.LARGE.jpg", "https://cdn.instructables.com/F4D/MIRV/GZUAFBKC/F4DMIRVGZUAFBKC.LARGE.jpg", "https://cdn.instructables.com/F29/L6MD/GZUB376V/F29L6MDGZUB376V.LARGE.jpg"], "step_title": "Step 22: Soldering and Testing"}, {"step": 23, "steps_text": "To test the circuit and the Data AcQuisition (DAQ) I used a second Arduino with a simple sketch that generates square pulses with different lenghts. I also wrote a python script that talks to Girino and tells it to acquire some data series and saves one of those to a file.\nThey are both attached to this step.", "step_imgs": ["https://cdn.instructables.com/FYC/Z81Z/GZUASBVE/FYCZ81ZGZUASBVE.LARGE.jpg", "https://cdn.instructables.com/FPV/CLJ1/GZUASBW7/FPVCLJ1GZUASBW7.LARGE.jpg", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 23: Test Signals"}, {"step": 24, "steps_text": "\n          Using the test signals I calibrated the horizontal scale of the plots. By measuring the widths of the pulses (that are known because were generated) and plotting the measured pulses widths against the known values, we get a hopefully linear plot. Doing this for each prescaler setting we have the time calibration for all acquisition rates.\nOn the images we can see all the data that I took an analyzed. The \"Fitted slopes\" plot is the most interesting because it tells us the actual acquisition rate of my system at each prescaler setting. The slopes were measured as a [ch/ms] number but this is equivalent to a [kHz], so the slopes values are actually kHz or also kS/s (kilo Samples per second). That means that with the prescaler set to 8 we get an acquisition rate of:\n\n\t\t(154\u00b12) kS/s\n\tNot bad, uh?\n\tWhile from the \"Fitted y-intercepts\" plot we get an insight of the system linearity. All the y-intercepts should be zero because at a signal with zero length should correspond a pulse with a zero length. As we can see on the graph they all are compatible with zero, but not the 18-prescaler dataset. This dataset, though, is the worst one because is has just two data and its calibration can not be trusted.\n\tFollowing there is a table with the acquisition rates for each prescaler setting.\n\t\t\t\tPrescaler\n\t\t\t\tAcquisition rate [kS/s]\n\t\t\t\t128\n\t\t\t\t9.74 \u00b1 0.04\n\t\t\t\t64\n\t\t\t\t19.39 \u00b1 0.06\n\t\t\t\t32\n\t\t\t\t37.3 \u00b1 0.6\n\t\t\t\t16\n\t\t\t\t75.5 \u00b1 0.3\n\t\t\t\t8\n\t\t\t\t153 \u00b1 2\nThe cited errors are coming from the Gnuplot fit engine and I am unsure about them.\n\n\tI also tried an unweighted fit of the rates because you can see that they roughly double when the prescaling halves, this looks like an inverse proportionality law. So I fitted the rates vs the prescaler settings with a simple law of\n\t\ty=a/x\n\tI got a value for a of\n\t\ta=1223\n\twith a \u03c7\u00b2=3.14 and 4 degrees of freedom, this means that the law is accepted with a 95% confidence level!", "step_imgs": ["https://cdn.instructables.com/F6H/7AS0/GZUAFXD7/F6H7AS0GZUAFXD7.LARGE.jpg", "https://cdn.instructables.com/FXF/D9A6/GZUAFBPU/FXFD9A6GZUAFBPU.LARGE.jpg", "https://cdn.instructables.com/F00/DY87/GZUASCCG/F00DY87GZUASCCG.LARGE.jpg", "https://cdn.instructables.com/F02/EPV9/GZUASCCF/F02EPV9GZUASCCF.LARGE.jpg", "https://cdn.instructables.com/FX4/6IPI/GZUAFBPW/FX46IPIGZUAFBPW.LARGE.jpg", "https://cdn.instructables.com/FAC/APEC/GZUAFBPV/FACAPECGZUAFBPV.LARGE.jpg", "https://cdn.instructables.com/FCH/2J3M/GZUAFXD8/FCH2J3MGZUAFXD8.LARGE.jpg", "https://cdn.instructables.com/F20/W5TQ/GZUB37N7/F20W5TQGZUB37N7.LARGE.jpg", "https://cdn.instructables.com/F5K/X4J6/GZUB37N8/F5KX4J6GZUB37N8.LARGE.jpg", "https://cdn.instructables.com/FXW/VK8A/GZV1CEMQ/FXWVK8AGZV1CEMQ.LARGE.jpg", "https://cdn.instructables.com/FWN/016P/GZUAFXDK/FWN016PGZUAFXDK.LARGE.jpg", "https://cdn.instructables.com/FDQ/P0J6/GZUASCCU/FDQP0J6GZUASCCU.LARGE.jpg", "https://cdn.instructables.com/FQX/1I99/GZUAFEG0/FQX1I99GZUAFEG0.LARGE.jpg"], "step_title": "Step 24: Time Calibration"}, {"step": 25, "steps_text": "\n          At the end of this long experience, I feel very satisfied because\n\n\t\tI learned a lot about microcontrollers in general;\n\t\tI learned a lot more about the Arduino ATMega328P;\n\t\tI had some hands-on experience of Data Acquisition, not by using something already done but by making something;\n\t\tI realized an amateur oscilloscope that is not that bad.\nI hope that this guide will be useful to anybody that reads it. I wanted to write it so detailed because I learned all that in the hard way (surfing the internet, reading the datasheet and by a lot of trial and error) and I would like to spare anybody from that experience.\n        ", "step_imgs": ["https://cdn.instructables.com/F5K/TEUE/GZXW89BQ/F5KTEUEGZXW89BQ.LARGE.jpg"], "step_title": "Step 25: Done! (Almost)"}, {"step": 26, "steps_text": "\n          The project if far from completed, though. What it is missing is:\n\n\t\tA test with different analog signals (I am missing an analog signal generator);\n\t\tA Graphical User Interface for the computer side.\nWhile for point 1. I am not sure when it will be completed, because I am not planning to buy/build one in the near future.\nFor point 2. the situation could be better. Is anyone willing to help me with that? I found a nice Python Oscilloscope here:http://www.phy.uct.ac.za/courses/python/examples/moreexamples.html#oscilloscope-and-spectrum-analyser\nI would like to modify it to fit it for Girino, but I am accepting suggestions.", "step_imgs": ["https://cdn.instructables.com/FGI/ULA9/GZUB3J5A/FGIULA9GZUB3J5A.LARGE.jpg"], "step_title": "Step 26: To Be Continued..."}], "channel": "Arduino"}, {"category": "technology", "description": "Is this enough of LED controller around? Yes, there are many LED control guides we can find on the Internet. One objective of my quest was to control a powered LED panel with a defined profile light intensity and real-time clock, and a light sensor to double check the output of LED panel. The input, output of light intensity are logged into SD card for a post-analysis.What are the parts? Below are the parts I have in my projects, details will be present along the way.Optional: I want to mimic a profile of solar intensity, which depends on the region, and the reason. The profile is hours vs. intensity of light. I grew algae so that the particle properties (uE, a photon) of light is the primary metric (can be 2200 uE/m2-s in the range of 400-700 nm in the summer's noon). Other light units are W/m2, lux, candle/ft. The conversion is between those sources have to be taken into account of the light source (or the spectrum of the light source).Optional: The key difference of my setup with other solar simulation is that I use an array to define a solar value (between 0-100%), and another array to store time value. With a defined time interval (5min), the program reads the real-time values, check a time value stored in arrays. If a new values (time, intensity) are found, the Arduino then writes those inputs via PWM pins to the enabling pin the LED driver. See the chart for a less wordy explanation.Important if you have not played with LED before: To turn on the LED, a voltage larger than the forward voltage is applied. The LED (which is a special diode) turn from non-conductible (the internal resistor is very large) to conductible (the resistant is very small). The chip will allow whatever current on DC source to run through. If no heatsink is provided, the chip will be burnt out because of too much heat. You have less than 2sec to see this busting of LED chip. And limiting the current below the forward current is a MUST.Here is a good intro to LED light:", "title": "Control High-powered LED Panel by Arduino Real Time With Log Data, Luminosity Sensor, LCD Display", "url": "https://www.instructables.com/id/Control-High-powered-LED-Panel-by-Arduino-Real-Tim/", "section": "technology", "steps": [{"step": 1, "steps_text": "10W (cool-white) LED Chip ( https://goo.gl/hZLC1R), $13/10pcs.  Specs: Forward current (If): 900 mA, Forward voltage (Vf) (9-12V) which means the LED is turned on with an applied voltage somewhere in 9-12 V, and the current run through the chip should not exceed 900 mA. LED driver (300-3000mA):  https://goo.gl/nmx8La,  $10/board.  The board is step down voltage which means the input DC has to be larger than Vf of one chip or (x Vf when x of chips is wired together in series).  I wired there chips in serial and applied a DC 36 V for one bank. The light intensity is controlled by PWM on the enable pin via Arduino pin with the resistors to limit the back-wash current.  For this board, full output when the enabling pin is grounded, and zero with 5V reference. I would advise against wiring chips in parallel, except if you want to test the Ohm's law. Heatsink (or a block of metal).  This one comes with bolts and thermal gel (https://goo.gl/wT995c). It is a block of aluminum ($10/block).   I put 3 x 10 W chip on one block.  With the temperature room about 22-25 oC, the temperature from the block is about 50-55 oC. Arduino Mega: ($44/board) like this one (https://goo.gl/pvSMdc), you can find a generic board on Amazon, or other electronic outlets with about 1/3 of the price.  I use Mega, but Uno or Nano version should work (change pins for SD card). LCD display: like this one: https://goo.gl/TSZyis,  $6.99 Real-time Clock 1307 breakout, $9.90, https://goo.gl/NSv3UuSD card, $5.99: https://goo.gl/1tHZMm, and SD card: +$4 Luminosity sensor (give output as lux),$6.95 (https://goo.gl/8Mh4x3).  A photoresistor would work as a raw indicator DC supplier.  I used this one: Mean Well 36V, 350W (https://goo.gl/UY5BXK ), $50.90.  This one has a built-in fan controller.  It is really quite when I drew out about 4A for my system.  The DC source is depended on your LED panel.  It can be a wall adapter (12V, 2A) if you want to run 3x3W (LED) with LED driver.", "step_imgs": ["https://cdn.instructables.com/FJ5/DEG6/J9YJEEZC/FJ5DEG6J9YJEEZC.LARGE.jpg"], "step_title": "Step 1: Get the Parts"}, {"step": 2, "steps_text": "The wiring is rather simple. Only thing I would restate is to put the resistor to 5mm LED (220 ohm), and wires connected to GND and EN pins on LED driver. I used 4.7k ohm for that last two.Other independent libraries: RTClib.h, Adafruit_GFX.h, Adafruit_SSD1306.h, Adafruit_TSL2591.h. You can download them via Adafruit website or its Github.Here is the code. An easier way is to download .ino file and open it by Arduino IDE./*Control LED intensity by a timer Log data via a lux sensor By Binh Nguyen, May 13, 2016, update Update on Nov 11, 2017 (removing extra setup for TLS 2591 */ #include                                                          // Wire libary for I2C comunication #include                                                          // Date and time functions using a DS1307 RTC connected via I2C and Wire liRTC_DS1307 rtc;#include                                                           // Needed for SD libarary #include                                                            // SD card to store data#include                                                      //For OLED Display #include  #define OLED_RESET 4 Adafruit_SSD1306 oled(OLED_RESET);#include                                                     // For Luminosity sensor #include \"Adafruit_TSL2591.h\" Adafruit_TSL2591 tsl = Adafruit_TSL2591(2591);                              // pass in a number for the sensor identifier (for your use later) long lux2;                                                                   // store luminosity  const int chipSelect = 53;                                                 // need to figure out for Adafruit SD breakout//https://learn.adafruit.com/adafruit-micro-sd-breakout-board-card-tutorial/wiring                                                                             // CLK (52|13); DO (50|12); DI (51|11); CS (53|10) char logFileName[] = \"Light.txt\";                                       // modify logFileName to identify your experiment, for exampe PBR_01_02, datalog1 String dataString; long id = 1;                                                            //the id number to enter the log order float hour24 [] =    {0.0, 1.0, 2.0, 3.0, 4.0, 4.95,                                  5.20, 5.45, 5.70, 5.95,                        6.20, 6.45, 6.70, 6.95,                       7.20, 7.45, 7.70, 7.95,                        8.20, 8.45, 8.70, 8.95,                        9.20, 9.45, 9.70, 9.95,                       10.20, 10.45, 10.70, 10.95,                       11.20, 11.45, 11.70, 11.95,                       12.20, 12.45, 12.70, 12.95,                       13.20, 13.45, 13.70, 13.95,                       14.20, 14.45, 14.70, 14.95,                       15.20, 15.45, 15.70, 15.95,                       16.20, 16.45, 16.70, 16.95,                       17.20, 17.45, 17.70, 17.95,                       18.20, 18.45, 18.70, 18.95,                       19.20, 19.45, 19.70, 19.95,                       20.0, 21.0, 22.0, 23.0, 23.5, 24.0};                                                              //hour summer 2014 float intensity [] = {0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  //hour 0.0, 1.0, 2.0, 3.0, 4.0, 4.95,                       0.00, 0.00, 0.00, 0.00,      //     5.20, 5.45, 5.70, 5.95,                       0.00, 0.01, 0.02, 0.06,     //     6.20, 6.45, 6.70, 6.95,                       0.09, 0.13, 0.17, 0.22,     //     7.20, 7.45, 7.70, 7.95,                        0.26, 0.34, 0.37, 0.46,     //     8.20, 8.45, 8.70, 8.95,                       0.54, 0.67, 0.65, 0.69,      //    9.20, 9.45, 9.70, 9.95,                       0.77, 0.81, 0.90, 0.78,      //    10.20, 10.45, 10.70, 10.95,                       0.89, 0.76, 0.84, 0.90,     //     11.20, 11.45, 11.70, 11.95,                       0.87, 0.91, 1.00, 0.95,     //     12.20, 12.45, 12.70, 12.95,                       0.83, 0.79, 0.79, 0.84,     //     13.20, 13.45, 13.70, 13.95,                       0.82, 0.60, 0.48, 0.61,     //     14.20, 14.45, 14.70, 14.95,                       0.42, 0.42, 0.47, 0.42,     //     15.20, 15.45, 15.70, 15.95,                       0.39, 0.41, 0.37, 0.27,     //     16.20, 16.45, 16.70, 16.95,                       0.31, 0.33, 0.30, 0.32,     //     17.20, 17.45, 17.70, 17.95,                       0.25, 0.21, 0.18, 0.12,     //     18.20, 18.45, 18.70, 18.95,                       0.07, 0.04, 0.02, 0.01,     //     19.20, 19.45, 19.70, 19.95,                       0.00, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};       //     20.0, 21.0, 22.0, 23.0                      float timechecker; int pinLED = 9; int pinLEDX = 10;void advancedRead(void){             // More advanced data read example. Read 32 bits with top 16 bits IR, bottom 16 bits full spectrum             // That way you can do whatever math and comparisons you want!             uint32_t lum = tsl.getFullLuminosity();             uint16_t ir, full;             ir = lum >> 16;             full = lum & 0xFFFF;             long vis = full - ir;             long lux = tsl.calculateLux(full, ir);             lux2 = lux;             dataString += String(ir)+\",\";             dataString += String(vis)+\",\";             dataString += String(lux) +\",\";                          Serial.print(\"[ \"); Serial.print(millis()); Serial.print(\" ms ] \");             Serial.print(\"IR: \"); Serial.print(ir);  Serial.print(\"  \");             Serial.print(\"Full: \"); Serial.print(full); Serial.print(\"  \");             Serial.print(\"Visible: \"); Serial.print(full - ir); Serial.print(\"  \");             Serial.print(\"Lux: \"); Serial.println(tsl.calculateLux(full, ir));     } void unifiedSensorAPIRead(void){                     sensors_event_t event;                                                                 // Get a new sensor event             tsl.getEvent(&event);             //Serial.print(\"[ \"); Serial.print(event.timestamp); Serial.print(\" ms ] \");           // Display the results (light is measured in lux)             if ((event.light == 0) |                                                                // If event.light = 0 lux the sensor is probably saturated                 (event.light > 4294966000.0) |                                                        //if event.light is +/- 4294967040 there was a float over/underflow                 (event.light <-4294966000.0)) {                   Serial.println(\"Invalid data (adjust gain or timing)\");                  }                                          else{                  Serial.print(event.light); Serial.println(\" lux\");}       }                                                       void setup(){      Serial.begin(9600);                                                                           // Start Serial commnication      Wire.begin();      pinMode(pinLED, OUTPUT);      pinMode(pinLEDX, OUTPUT);                                       Serial.print(\"RTC is...\");          if (! rtc.begin()){             Serial.println(\"RTC:  Real-time clock...NOT FOUND\");            while (1);// (Serial.println(\"RTC:  Real-time clock...FOUND\"));           }      Serial.println(\"RUNNING\");           Serial.print(\"Real-time Clock...\");        if (! rtc.isrunning()){         rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));        }      Serial.println(\"WORKING\");                    Serial.print(\"SD card...\");                                                             // see if the card is present and can be initialized:       if (!SD.begin(chipSelect)){         Serial.println(\"Failed\");                                                         // don't do anything more:         return;       }      Serial.println(\"OK\");      Serial.print(\"Log File: \");        Serial.print(logFileName);        Serial.print(\"...\");        File logFile = SD.open(logFileName, FILE_WRITE);                                       // open the file. \"datalog\" and print the header         if (logFile){             logFile.println(\", , , , , , \");                                                  //indicate there were data in the previous run             String header = \"ID, Date Time, TimeCheck, % Ouput, IR, VIS, Lux\";             logFile.println(header);             logFile.close();             Serial.println(\"READY\");           }         else Serial.println(\"error opening datalog\");                                        // if the file isn't open, pop up an error:     if (tsl.begin()){                                                                          // Display some basic information on this sensor             Serial.println(\"Found a TSL2591 sensor\");}        else { Serial.println(\"No sensor found ... check your wiring?\");           //while (1);                                                                           //while (1) uncomment it to bypass the looping while.        }                                          tsl.setGain(TSL2591_GAIN_MED);                                                       // Setup time (duration) for intergration of light intensity, a long time for a lower light (darker)     tsl.setTiming(TSL2591_INTEGRATIONTIME_100MS);                                        oled.begin(SSD1306_SWITCHCAPVCC, 0x3C);                                                   // Setup OLED display     oled.clearDisplay();     delay(1000);     oled.setTextSize(1);     oled.setTextColor(WHITE);     oled.setCursor(0,0);     oled.println(\"Welcome...\");     oled.println(\"Light Control\");     oled.println(\"SD Card READY\");     oled.println(\"CLOCK READY\");     oled.println(\"LogFile READY\");     oled.display();     oled.clearDisplay();     id = 1;     delay(4000);    }void loop(){     dataString = String(id);    dataString += String(',');            DateTime now = rtc.now();     int houR = (int)now.hour();     float minutE = (float)now.minute();          timechecker = houR + minutE/60;     //Serial.print(\"Minutes/60, \");     //Serial.println(minutE/60);     float record;     int locator;     for (int i=0; i<100; i ++){         if (( hour24[i]-timechecker >=0) ){              record = intensity[i];              break;                             }                            }      Serial.print(\"Locator:\");      Serial.println(locator);      int lightout = record*255;           //the LED board controls the current to the MAX (set) value when ENABLE Pin is connecte to GND, and ZERO when ENABLE Pin to VNCC (5V)      analogWrite(pinLED, lightout);      int lightout2 = 255- lightout;       //flip the small LED so it is on the trend with the high-powered LED panel.      analogWrite(pinLEDX, lightout2);        Serial.print(\"Lightout, \");        Serial.println(lightout);        //delay(2000);      //Serial.println(\"Hardcode\");      //analogWrite(pinLED, 150);          String datE = String(now.year(), DEC)+\"/\";        //format date and time as yyyy/mm/dd hh:mm:ss     datE += String(now.month(), DEC)+\"/\";     datE += String(now.day(), DEC);     String timE = String(now.hour(), DEC)+\":\";     timE += String(now.minute(), DEC)+\":\";     timE += String(now.second(), DEC);     datE += \" \" + timE;             oled.setTextSize(1);     oled.setTextColor(WHITE);     oled.setCursor(0,0);     dataString += datE + \",\";     dataString += String(timechecker) + \",\";     dataString += String(record) + \",\";          advancedRead();             //get the value of light sensor          oled.println(datE);         //print out the value and status to LCD      oled.print(\"Time,hrs: \");     oled.println(timechecker);     oled.print(\"Output,%: \");     oled.println(record);     oled.print(\"LI: \");     oled.print(lux2);     oled.println(\" lux\");     oled.display();          File dataFile = SD.open(logFileName, FILE_WRITE);                         // open the file. note that only one file can be open at a time, so you have to close this one before opening another.     if (dataFile){                                                    // if the file is available, write to it:         dataFile.println(dataString);         dataFile.close();         Serial.print(\"Recording: \");         Serial.println(dataString);                                        // print to the serial port too:      }      else { Serial.println(\"error opening datalog file\"); }                // if the file isn't open, pop up an error:           oled.clearDisplay();     delay(300000);   //delay for 5 minutes    id ++;     dataString = \"\";  }--end of the code--", "step_imgs": ["https://cdn.instructables.com/F69/YEMF/J9YJEI6Y/F69YEMFJ9YJEI6Y.LARGE.jpg", "https://cdn.instructables.com/FAS/F9MM/J9YJEF7J/FASF9MMJ9YJEF7J.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 2: Let Wiring and Coding"}, {"step": 3, "steps_text": "1. Output by basic parameters on 128x64 OLED display:2. Logged data in text file that can be exported to speedsheet application (like Excel and LibreOffice Calc). Make the chart for presentation.", "step_imgs": ["https://cdn.instructables.com/FOQ/EEBG/J9YJEEZY/FOQEEBGJ9YJEEZY.LARGE.jpg", "https://cdn.instructables.com/FS0/NZ0X/J9YJEIQ1/FS0NZ0XJ9YJEIQ1.LARGE.jpg", "https://cdn.instructables.com/FAN/YX43/J9YJEJ5H/FANYX43J9YJEJ5H.LARGE.jpg", "https://cdn.instructables.com/FJ5/DUA7/J9YJEJ5K/FJ5DUA7J9YJEJ5K.LARGE.jpg"], "step_title": "Step 3: Outputs:"}, {"step": 4, "steps_text": "This is not a part of the tutorial but the graph of spectra is useful, especially when we are talking about colors wavelength, Also, a reactor for algae cultivation!Acknowledgement:I pursued this project while working on an advanced photobioreactor for algal cultivation. I would like to thank Dr. Bruce E. Rittmann at Biodesign Swette Center for Environmental Biotechnology, Arizona State Univesity and U.S. Department of Energy, Office of Energy Efficiency and Renewable Energy Targeted Algal Biofuels and Bioproducts, grant #: DE-EE0007093: \u201cAtmospheric CO2 Enrichment and Delivery (ACED),\u201d for the supports and the freedom to explore.", "step_imgs": ["https://cdn.instructables.com/FYJ/E5UU/J9YJEF85/FYJE5UUJ9YJEF85.LARGE.jpg", "https://cdn.instructables.com/FLF/DT2Q/J9YJEF6X/FLFDT2QJ9YJEF6X.LARGE.jpg"], "step_title": "Step 4: Bonus: Photobioreactor and How Light Spectrum Is Colorful!"}], "channel": "Arduino"}, {"category": "technology", "description": "Remote visualization of real-time sensor data.\nThis tutorial describes in detail how to use the free SensorMonkey service to push real-time sensor data from an Arduino to a webpage for visualization using Processing.js. No server-side coding or Ethernet shield is required. A standard, run of the mill Arduino will work perfectly. You'll also need a sensor to sample some values. I use an accelerometer, but anything will work (a potentiometer, a gyroscope, a tilt sensor, a temperature sensor, a light sensor etc.). If you don't have a sensor, it's still possible to follow the tutorial by sampling the floating input voltages on the Arduino's analog pins as a (somewhat) crude substitute.\nAfter configuring the Arduino to sample sensor values, I use SensorMonkey to publish the data live over the Internet in real-time (Disclosure: I co-founded the company developing SensorMonkey). Using SensorMonkey, I can access the data from any device connected to the Internet and use it to drive a real-time webpage. Proxies, firewalls and NATs can all be traversed. Best of all, it works with standard Arduino boards (Unos, Duemilanoves etc.) and does not require an Ethernet shield. Instead, I use free software called Bloom to network-enable the Arduino and connect it to SensorMonkey. In this tutorial, I visualize the data using Processing.js.UPDATE 26-06-2012: Non-Windows Users\nAs an alternative to Bloom for non-Windows users, I have uploaded a Processing sketch, named SensorMonkeySerialNet, to our GitHub account. This sketch is a serial-to-network proxy that also serves Flash Socket Policy files inline. It can be used instead of Bloom in\u00a0Step 3 for users running Mac OS or Linux.", "title": "Drive a Webpage in Real-time Using Arduino, SensorMonkey and Processing.js", "url": "https://www.instructables.com/id/Drive-a-webpage-in-real-time-using-Arduino-Sensor/", "section": "technology", "steps": [{"step": 1, "steps_text": "The following combination of hardware and software is required to complete this tutorial:\nHardware:\n- Arduino (I use an Uno but older boards such as a Duemilanove will work fine)\n- USB cable to connect Arduino to host computer\n- Analog sensor (I use a ADXL335 accelerometer)\n- Assorted wires to connect your sensor to the Arduino\nSoftware:\n- Arduino development environment (http://www.arduino.cc)\n- Free account on SensorMonkey.com (login with your existing Facebook account)\n- Bloom (serial port to TCP/IP socket redirector for Microsoft Windows)\n- Processing.js", "step_imgs": ["https://cdn.instructables.com/FVC/V3SZ/H2WERZPR/FVCV3SZH2WERZPR.LARGE.jpg", "https://cdn.instructables.com/FY0/XYM1/H2WERZQE/FY0XYM1H2WERZQE.LARGE.jpg"], "step_title": "Step 1: Gathering Materials"}, {"step": 2, "steps_text": "If you have not done so already, you should take the time to familiarize yourself with the basic operation of an Arduino by reading the Getting Started guide on the main Arduino website. In particular, make sure you have downloaded and installed the Arduino development environment and that you are able to upload sketches to the board. The Arduino will be assigned a serial port when connected to the host computer. If using Windows, you can determine the assigned serial port by opening Device Manager and expanding the Ports (COM & LPT) section. You should see the Arduino listed underneath (in my case, the Arduino has been assigned to COM8).\nI have connected my ADXL335 accelerometer to the Arduino as shown (image taken from\u00a0http://bildr.org). I am going to sample analog-to-digital (ADC) pins 0, 1 and 2 on the Arduino at regular intervals and write their values to the serial port. To do this, I upload the following sketch to the Arduino's microcontroller using the development environment:\nvoid setup() {\n\u00a0 Serial.begin( 9600 );\u00a0\u00a0\u00a0 // Open the serial port.\n}\nvoid loop() {\n\u00a0 unsigned int x = analogRead( 0 );\u00a0\u00a0\u00a0 // Read 10-bit x-axis accelerometer on ADC pin 0.\n\u00a0 unsigned int y = analogRead( 1 );\u00a0\u00a0\u00a0 // Read 10-bit y-axis accelerometer on ADC pin 1.\n\u00a0 unsigned int z = analogRead( 2 );\u00a0\u00a0\u00a0 // Read 10-bit z-axis accelerometer on ADC pin 2.\n\u00a0\n\u00a0 // Write synchronization bytes to serial port to act as starting markers for each 'packet'.\n\u00a0 Serial.write( 0xA5 );\n\u00a0 Serial.write( 0x5A );\n\u00a0\n\u00a0 // Write x-axis accelerometer to serial port as 16-bit unsigned integer in big-endian format.\n\u00a0 Serial.write( highByte( x ) );\u00a0\u00a0\u00a0 // Most significant byte (MSB).\n\u00a0 Serial.write( lowByte( x ) );\u00a0\u00a0\u00a0 // Least significant byte (LSB).\n\u00a0\n\u00a0 // Write y-axis accelerometer to serial port as 16-bit unsigned integer in big-endian format.\n\u00a0 Serial.write( highByte( y ) );\n\u00a0 Serial.write( lowByte( y ) );\n\u00a0\n\u00a0 // Write z-axis accelerometer to serial port as 16-bit unsigned integer in big-endian format.\n\u00a0 Serial.write( highByte( z ) );\n\u00a0 Serial.write( lowByte( z ) );\n\u00a0\n\u00a0 delay( 20 );\u00a0\u00a0\u00a0 // Add a delay of 20ms to give a sampling rate of approximately 50Hz.\n}\nThe ADC pins have a 10-bit resolution (0 to 1023 inclusive) so I encode them as 16-bit unsigned integers in big-endian format before sending them over the serial port. Depending on the sensor(s) you are using, you can choose to sample more or less of the ADC pins. In my case, the ADXL335 accelerometer measures acceleration along three orthogonal axes: x, y and z. Hence, I sample the three corresponding ADC pins: 0, 1 and 2 respectively.\nFinally, you can alter the sampling rate of the sketch by increasing or decreasing the delay as required. For sensors that do not change very often (e.g. a temperature sensor) you will likely want to increase the delay to sample at a slower rate. Setting it to 100 would sample 10 times per second (or 10Hz) for example.", "step_imgs": ["https://cdn.instructables.com/F7G/G58Q/H347FOT6/F7GG58QH347FOT6.LARGE.jpg"], "step_title": "Step 2: Connect Arduino and Upload Sketch"}, {"step": 3, "steps_text": "Before I can connect the Arduino to SensorMonkey, I need to map the serial port assigned to the device to a TCP/IP socket. To do this, I download and install Bloom from the SensorMonkey support page.\nBloom is a serial port to TCP/IP socket redirector for Microsoft Windows. It comes with a fairly comprehensive help manual (which I would encourage you to read), but the basic operation is very simple:\n- Run Bloom from the Windows Start menu\n- Configure serial port settings for the Arduino and choose a TCP/IP port for Bloom to listen on\n- Set a polling frequency to (approximately) match the sampling rate of the Arduino's sketch\n- Press 'Start'\nBloom will listen for incoming connections on the specified TCP/IP port. When a connection is accepted, Bloom will open the serial port and transfer data back and forth between the TCP/IP socket and the serial port, allowing SensorMonkey to connect to the Arduino as if it were a networked device with an Ethernet shield.\nI use the following settings:\n- TCP/IP port: 20000\n- Polling frequency: 50\n- Serial port: COM8\n- Baud rate: 9600\n- Data bits: 8\n- Parity bit: None\n- Stop bits: 1\n- Flow control: None\nThe choice of TCP/IP port is arbitrary (you can choose whatever you like, as long as it's in the range 1024 to 49151, inclusive, and not already in use). Also, please bear in mind that your serial port will be different depending on what your Arduino was assigned.\nFor operating systems other than Windows, you can download an alternative to Bloom (typically referred to as a serial-to-network proxy) from our GitHub account. The sketch, named SensorMonkeySerialNet, runs in Processing on Mac OS and Linux. Please follow the instructions in the project's README file.", "step_imgs": ["https://cdn.instructables.com/FM2/NSCX/H2WEXXWI/FM2NSCXH2WEXXWI.LARGE.jpg"], "step_title": "Step 3: Download and Install Bloom"}, {"step": 4, "steps_text": "You can login to SensorMonkey using your existing Facebook account by clicking the 'Login with Facebook' button in the top-right corner of the page.\nYou will be prompted to grant permission for the SensorMonkey application to access your Facebook account. Once you have done so, you will be assigned a personal namespace (a streaming 'sandbox' for your sensors) as well as public and private keys to access your namespace from within a webpage. You will need your public key for Step 6. You can find it by clicking the 'Namespaces' link at the top of the page.\nOnce logged in, you can access the web-based control panel through the 'Sensors' link at the top of the page. The control panel is where you will connect to the Arduino and publish sensor data live over the Internet.", "step_imgs": ["https://cdn.instructables.com/FP5/UEB5/H3BL0CW0/FP5UEB5H3BL0CW0.LARGE.jpg"], "step_title": "Step 4: Login to SensorMonkey"}, {"step": 5, "steps_text": "After logging into SensorMonkey and opening my control panel, I'm going to add an entry for the Arduino named \"My Arduino\". By clicking on the newly added entry, I can configure the connection parameters; namely, the IP address and port number where the device can be found.\nRecall from Step 3 that I am using Bloom to map the Arduino's serial port to TCP/IP port 20000 on my local machine. So, I enter a port number of 20000 and an IP address of 127.0.0.1 (the local loopback address).\nI also need to specify a format description file that tells SensorMonkey how to parse and interpret the data being sent by the Arduino. In Step 2, I presented the sketch used to sample the accelerometer that was compiled and uploaded to the Arduino's microcontroller using the development environment. To match the data sent by the sketch, I use the following format description file:\n<bytestream>\n\u00a0 \u00a0 <format endian=\"big\">\n\u00a0 \u00a0 \u00a0 \u00a0 <constant>A5</constant>\n\u00a0 \u00a0 \u00a0 \u00a0 <constant>5A</constant>\n\u00a0 \u00a0 \u00a0 \u00a0 <variable type=\"u16\">Accelerometer X</variable>\n\u00a0 \u00a0 \u00a0 \u00a0 <variable type=\"u16\">Accelerometer Y</variable>\n\u00a0 \u00a0 \u00a0 \u00a0 <variable type=\"u16\">Accelerometer Z</variable>\n\u00a0 \u00a0 </format>\n</bytestream>\nNote that I have specified big-endian format (<format endian=\"big\">) and have added variables representing the three axes sampled by the accelerometer: x, y and z. The type of these variables is \"u16\", which is short-hand for 'Unsigned 16-bit Integer'. Many different types of variables are supported; you can find more information on the SensorMonkey support page.\nThe main point to realize here is that you just need to specify a format description file that matches the data being sent by your Arduino over the serial port. Depending on the sensor(s) that you are using, you may need to add more or less variables to your format description file. Make sure to give them descriptive names so you know what each variable is measuring.\nAfter clicking 'Connect', I navigate to the 'Stream' tab, select the three accelerometer variables, choose a stream type of 'Public', and click 'Publish'. The sensor data is now being streamed live over the Internet as a public stream in my personal namespace.\nIn the next step, I will write a simple HTML webpage to connect to my namespace, subscribe to my stream, and visualize the data in real-time using Processing.js.", "step_imgs": ["https://cdn.instructables.com/F2V/ZW5W/H337L1RN/F2VZW5WH337L1RN.LARGE.jpg", "https://cdn.instructables.com/FI1/RC16/H2WETMYQ/FI1RC16H2WETMYQ.LARGE.jpg"], "step_title": "Step 5: Publish Sensor Data"}, {"step": 6, "steps_text": "In the final (and best!) part of this tutorial, I'm going to create a simple webpage to view the output from my Arduino that is now being streamed live over the Internet using SensorMonkey (I have downloaded the latest Processing.js library - 1.3.6 at the time of writing - and placed it in the same directory as the webpage). You'll need to edit the code below to match the variables being streamed by your Arduino (unless you have copied my accelerometer setup exactly):(Important! You must replace YOUR_NAMESPACE and YOUR_PUBLIC_KEY in the code below with those assigned to you when you login to SensorMonkey)\n--------------------------------------------------------------------------------\n<!DOCTYPE html>\n<html>\n<head>\n\u00a0\u00a0\u00a0 <title>Drive a webpage in real-time using Arduino, SensorMonkey and Processing.js</title>\n\u00a0\u00a0\u00a0 <script type=\"text/javascript\" src=\"http://sensormonkey.eeng.nuim.ie/socket.io/socket.io.js\"></script>\n\u00a0\u00a0\u00a0 <script type=\"text/javascript\" src=\"http://sensormonkey.eeng.nuim.ie/js/client.min.js\"></script>\n\u00a0\u00a0\u00a0 <script type=\"text/javascript\" src=\"processing-1.3.6.js\"></script>\n\u00a0\u00a0\u00a0 <style type=\"text/css\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 .sensor-name {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 text-align: center;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 width: 300px;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 canvas {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 border: 1px solid grey;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 </style>\n</head>\n<body onload=\"setTimeout( run, 100 );\">\n\u00a0\u00a0\u00a0 <div class=\"sensor-name\">Accelerometer X</div>\n\u00a0\u00a0\u00a0 <canvas data-processing-sources=\"Graph.pde\" id=\"AccelX\"></canvas>\n\u00a0\u00a0\u00a0 <div class=\"sensor-name\">Accelerometer Y</div>\n\u00a0\u00a0\u00a0 <canvas data-processing-sources=\"Graph.pde\" id=\"AccelY\"></canvas>\n\u00a0\u00a0\u00a0 <div class=\"sensor-name\">Accelerometer Z</div>\n\u00a0\u00a0\u00a0 <canvas data-processing-sources=\"Graph.pde\" id=\"AccelZ\"></canvas>\n\u00a0\u00a0\u00a0 <script type=\"text/javascript\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 function run() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var accelXGraph = Processing.getInstanceById( \"AccelX\" );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var accelYGraph = Processing.getInstanceById( \"AccelY\" );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var accelZGraph = Processing.getInstanceById( \"AccelZ\" );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 accelXGraph.setColor( 255, 0, 0, 100 );\u00a0\u00a0\u00a0 // Red.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 accelYGraph.setColor( 0, 128, 0, 100 );\u00a0\u00a0\u00a0 // Green.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 accelZGraph.setColor( 0, 0, 255, 100 );\u00a0\u00a0\u00a0 // Blue.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 1. Connect to SensorMonkey\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 2. Join namespace\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 3. Subscribe to stream\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 4. Listen for 'publish' and 'bulkPublish' events\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var client = new SensorMonkey.Client( \"http://sensormonkey.eeng.nuim.ie\" );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 client.on( \"connect\", function() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 client.joinNamespace( \"YOUR_NAMESPACE\", \"YOUR_PUBLIC_KEY\", function( e ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if( e ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 alert( \"Failed to join namespace: \" + e );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 client.subscribeToStream( \"/public/My Arduino\", function( e ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if( e ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 alert( \"Failed to subscribe to stream: \" + e );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 client.on( \"publish\", function( name, fields ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if( name === \"/public/My Arduino\" ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 accelXGraph.update( fields[ \"Accelerometer X\" ] );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 accelYGraph.update( fields[ \"Accelerometer Y\" ] );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 accelZGraph.update( fields[ \"Accelerometer Z\" ] );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 client.on( \"bulkPublish\", function( name, fields ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if( name === \"/public/My Arduino\" ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for( var i = 0, len = fields[ \"Accelerometer X\" ].length; i < len; i++ ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 accelXGraph.update( fields[ \"Accelerometer X\" ][ i ] );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 accelYGraph.update( fields[ \"Accelerometer Y\" ][ i ] );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 accelZGraph.update( fields[ \"Accelerometer Z\" ][ i ] );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 client.on( \"disconnect\", function() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 alert( \"Client has been disconnected!\" );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 </script>\n</body>\n</html>\n--------------------------------------------------------------------------------\nWithout going into too much detail (you can find more information about the JavaScript client API here) the basic workflow is as follows:\n- Import client\n- Connect to SensorMonkey\n- Join namespace\n- Subscribe to stream\n- Listen for 'publish' and 'bulkPublish' events\nTo graph the data, I'm using the following Processing.js sketch (save this to a file called Graph.pde and place it in the same directory as the webpage above):\n--------------------------------------------------------------------------------\nint xPos = 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Horizontal coordinate used to draw the next data point.\nint yMin = 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Minimum expected data value.\nint yMax = 1023;\u00a0\u00a0\u00a0 // Maximum expected data value.\ncolor c;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Stroke color used to draw the graph.\n// Sets the stroke color used to draw the graph.\nvoid setColor( int r, int g, int b, int a ) {\n\u00a0 c = color( r, g, b, a );\n}\nvoid setup() {\n\u00a0 size( 300, 200 );\n\u00a0 frameRate( 50 );\n\u00a0 setColor( 255, 0, 0, 100 );\n\u00a0 drawGrid();\n}\nvoid draw() {}\u00a0\u00a0\u00a0 // Empty draw() function.\nvoid drawGrid() {\n\u00a0 int h = height;\n\u00a0 int w = width;\n\u00a0\n\u00a0 background( 255 );\n\u00a0\n\u00a0 stroke( 127, 127, 127, 127 );\n\u00a0\n\u00a0 // Draw horizontal lines.\n\u00a0 line( 0, h / 4, w, h / 4 );\n\u00a0 line( 0, h / 2, w, h / 2 );\n\u00a0 line( 0, h * 3 / 4, w, h * 3 / 4 );\n\u00a0\n\u00a0 // Draw vertical lines.\n\u00a0 line( w / 4, 0, w / 4, h );\n\u00a0 line( w / 2, 0, w / 2, h );\n\u00a0 line( w * 3 / 4, 0, w * 3 / 4, h );\n\u00a0\n\u00a0 // Draw labels.\n\u00a0 fill( 0 );\n\u00a0 text( str( yMin ), 5, h - 5 );\n\u00a0 text( str( yMax ), 5, 12 );\n}\nvoid update( float data ) {\n\u00a0 // When we reach the edge of the screen, wrap around to the beginning.\n\u00a0 if( xPos >= width ) {\n\u00a0\u00a0\u00a0 xPos = 0;\n\u00a0\u00a0\u00a0 drawGrid();\n\u00a0 }\n\u00a0\n\u00a0 // Graph the data point and increment the horizontal coordinate.\n\u00a0 data = map( data, yMin, yMax, 0, height );\n\u00a0 stroke( c );\n\u00a0 line( xPos, height, xPos, height - data );\n\u00a0 xPos++;\n}\n--------------------------------------------------------------------------------\nIn your case, depending on the sensor(s) that you are streaming, you may need more or less graphs in your webpage. You can edit the Graph.pde file if you need to increase/decrease the size of the graphs, the range of data values that can be plotted, the frame rate etc. Just remember to include the Graph.pde file once for every variable that you want to plot (inside a <canvas> element) and name them accordingly (e.g. <canvas data-processing-sources=\"Graph.pde\" id=\"TemperatureSensor\"></canvas>). Then, you just need to get a reference to the graph (obtained by calling the Processing.getInstanceById() method) and use the update() function to plot new data points received in the \"publish\" and \"bulkPublish\" event handlers.That's it! I now have an accelerometer driving a webpage in real-time using Arduino, SensorMonkey and Processing.js. I can host the webpage on a public webserver and direct people to view the link on any device with a HTML5 compatible web-browser. Thanks for reading and look out for further instructables showing more advanced use cases and projects in the near future.", "step_imgs": ["https://cdn.instructables.com/FAP/INR5/H337L184/FAPINR5H337L184.LARGE.jpg"], "step_title": "Step 6: Graph Data Using Processing.js"}], "channel": "Arduino"}, {"category": "technology", "description": "The goal of this test plan is to determine whether a door is open or closed. This test plan will show you how to build a sonar sensor, create a program, calibrate the sensors, and eventually to find out if the door to the chicken coop in our school's garden is open or not. ", "title": "Sonar Test Plan", "url": "https://www.instructables.com/id/Sonar-Test-Plan/", "section": "technology", "steps": [{"step": 1, "steps_text": "Industries, Adafruit. \u201cHalf-Size Breadboard.\u201d Adafruit Industries Blog RSS,  www.adafruit.com/product/64.\u201cJumper Wires.\u201d Exploring Arduino, 23 June 2013,  www.exploringarduino.com/parts/jumper-wires/.Macfos. \u201cArduino Uno R3 with Cable.\u201d Robu.in | Indian Online Store | RC Hobby | Robotics, robu.in/product/arduino-uno-r3/.Nedelkovski, Dejan. \u201cUltrasonic Sensor HC-SR04 and Arduino Tutorial.\u201dHowToMechatronics, 5 Dec. 2017, howtomechatronics.com/tutorials/arduino/ultrasonic-sensor-hc-sr04/.You will need:Computer with Arduino and Excel SpreadSheetsUSB cableArduino Uno MicrocontrollerBreadboardSonar Sensor (HC-SR04)Arduino WiresRuler", "step_imgs": ["https://cdn.instructables.com/FTK/R9IT/JC6JX51O/FTKR9ITJC6JX51O.LARGE.jpg", "https://cdn.instructables.com/FA7/PSTR/JC6JX4VQ/FA7PSTRJC6JX4VQ.LARGE.jpg", "https://cdn.instructables.com/FUZ/N2HL/JC6JX4YK/FUZN2HLJC6JX4YK.LARGE.jpg", "https://cdn.instructables.com/F16/680C/JC6JX4XA/F16680CJC6JX4XA.LARGE.jpg"], "step_title": "Step 1: Materials"}, {"step": 2, "steps_text": "\u201cFritzing.\u201d Project \u2013 HC-SR04 Project, fritzing.org/projects/hc-sr04-project.Use the above image to help you follow how to connect the wires to the arduino.Make sure that: the wire on the VCC pin connects to the 5V the wire on the Trig pin connects to pin 8 the wire on Echo pin connects to pin 9 the wire on GND connects to Ground NOTE: You can connect the wires directly to the arduino instead of having wires in the arrangement above.", "step_imgs": ["https://cdn.instructables.com/FP3/2XFI/JC6JZAXU/FP32XFIJC6JZAXU.LARGE.jpg"], "step_title": "Step 2: Connecting the Circuit"}, {"step": 3, "steps_text": "This code reads a value from the Sonar sensor, duration, which represents how long it took for the sound to bounce off of an object and return back to the Sonar sensor. We will use this code to calculate the values presented from the echo, and then graph that information on an excel sheet in order to get the slope, and eventually the calibration curve, which we will use in the program later instead.", "step_imgs": ["https://cdn.instructables.com/FJ3/0LPQ/JC6K5CYI/FJ30LPQJC6K5CYI.LARGE.jpg"], "step_title": "Step 3: Creating the Program"}, {"step": 4, "steps_text": "The values we got above were by measuring with a ruler the distance between an object and the sensor, and we wrote down the value that showed up on the serial monitor. We measured by every .5 inches.Using the data from the excel spread sheet, create a scatter-plot graph in which the x-axis is duration in milliseconds and the y-axis is distance in inches.After creating the graph, create a calibration curve by clicking on the graph, and selecting Linear Trendline under the Layout in the Chart Tools section.Under Trendline options, select Linear, and select the option that says \"Display Equation on Chart\".The equation will show up and we will use that equation for future code to be able to determine how far an object is in inches.", "step_imgs": ["https://cdn.instructables.com/FE7/O33S/JC6JZB50/FE7O33SJC6JZB50.LARGE.jpg", "https://cdn.instructables.com/FZC/RO05/JC6K5DDF/FZCRO05JC6K5DDF.LARGE.jpg"], "step_title": "Step 4: Collection of Data and Calibration"}, {"step": 5, "steps_text": "We used the above code with the equation that we got from the calibration curve in the past slide. This equation converts milliseconds to inches.", "step_imgs": ["https://cdn.instructables.com/F54/M1QE/JC6K5CXR/F54M1QEJC6K5CXR.LARGE.jpg"], "step_title": "Step 5: Creating a New Code Using Our Equation"}, {"step": 6, "steps_text": "This code is the final code that will let us know whether the door is open or not, based on the distance the Sonar reads. For our test, we measured that if the Sonar read that the door was more than 14 inches away, that meant that the door was open, the Serial Monitor would then print \"Door is open.\"", "step_imgs": ["https://cdn.instructables.com/FVW/H1SF/JC6K5CY5/FVWH1SFJC6K5CY5.LARGE.jpg"], "step_title": "Step 6: Final Code!"}, {"step": 7, "steps_text": "Overall, the sensor was accurate. There were a few limitations.The few downsides we experienced were that the sensor read values in a cone shape infront of it, sensor was very sensitive,objects at short distances displayed strange values,and values beyond 14 inches were not accurate. We had to ensure that the sensor was at the same elevation as the object we wanted to measure the distance from, in this case, the door, but it served its function.", "step_imgs": [], "step_title": "Step 7: Results"}], "channel": "Arduino"}, {"category": "technology", "description": "This project was done as a final exam for a college class.  Both my lab partner, Chris and myself spent several weeks on this project and we're fairly happy with the results.The idea behind this project is to assist the visually impaired with getting around without the need for a big long cane that just gets in the way.  This device is compact and still allows the user to have use of their hands and without having to fold up and stow away a cane.This instructable will teach you how to create a device that uses an ultrasonic sensor to detect the distance of objects, and based on that distance, give an output of your desired intensity of vibration to help the user \"feel\" their surroundings using vibrations.  This project is fairly complicated and requires some background in circuitry, soldering, and coding.", "title": "Ultrasonic Sensory Device for the Visually Impaired (Arduino)", "url": "https://www.instructables.com/id/Ultrasonic-Sensory-Device-for-the-Visually-Impaire/", "section": "technology", "steps": [{"step": 1, "steps_text": "Toolssoldering ironwire cutters screwdriverlaser cutter (optional)a computer with the arduino programMaterialsarduino unoultrasonic sensor (we used an HC-SR04)haptic motorDRV2605L haptic driversmall Adafruit Perma-Proto boardassorted wires (solid core is preferred)", "step_imgs": [], "step_title": "Step 1: Materials and Tools"}, {"step": 2, "steps_text": "Locate in which position you want your mini controller to be on the board-DO NOT SOLDER THE CONTROLLER OR THE MOTOR YET, YOU WILL NEED THEM FOR SOFTWARE TESTING,YOU CAN DO THAT LATER ON.Based on the location you chose begin to solder the necessary wires to the board: one wire for the VIN, one for the GND, one for the SCL and one for the SDA (no wire is needed for the IN of the controller). VIN and GND will have both ends soldered, one side close to the controller and the other on the positive and negative parts of the board. Make sure to make the wires for SCL and SDA long enough to connect to the ARDUINO. For a better range, do not solder the ultrasonic sensor directly to the board, rather attach to long jumper wires that you will then solder. You will use the same wiring for the sensor as you did for the controller.  The wires for both the VCC and GND will have both ends soldered to the board, while for the Trig and Echo you will solder on long wires so that it may later on connect to the ARDUINO.Finally, solder on two more wires that ultimately connect the VCC/VIN of the controller and the sensor to the one 5V port of the ARDUINO, and one wire that will connect the GND of the controller and the sensor to one single GND port of the ARDUINO. Once everything is soldered on, connect SCL of the controller to port A5 and SDA to port A4 of the ARDUINO. Connect the Trig of the sensor to the DIGITAL 4 and Echo to DIGITAL ~5 of the ARDUINO.", "step_imgs": ["https://cdn.instructables.com/FUL/GSKN/J1GP3RME/FULGSKNJ1GP3RME.LARGE.jpg", "https://cdn.instructables.com/FWR/DLEC/J1GP3RM9/FWRDLECJ1GP3RM9.LARGE.jpg", "https://cdn.instructables.com/FRP/MCSG/J1GP3RGZ/FRPMCSGJ1GP3RGZ.LARGE.jpg", "https://cdn.instructables.com/F1Q/4JGW/J1GP3RMA/F1Q4JGWJ1GP3RMA.LARGE.jpg", "https://cdn.instructables.com/FM8/39J6/J1GP3RMC/FM839J6J1GP3RMC.LARGE.jpg", "https://cdn.instructables.com/F3F/ULSA/J1GP3RMB/F3FULSAJ1GP3RMB.LARGE.jpg"], "step_title": "Step 2: Step 1: General Hardware and Wiring"}, {"step": 3, "steps_text": "So, funny story, when we first began testing this code it worked perfectly.  But then, all of a sudden, the sensor only worked up to 50cm instead of 4m for no apparent reason.  So, due to time constraints, we made a separate version of the code (the one that says 0 to 50) just so that we could prove that our device worked, we were just having problems with our sensor.  So, that is why we included two versions of the code, one that works up to 4 meters and one that works up to 50 centimeters.There is one library that you will have to download and include in your code that contains all of the commands for the haptic controller.  You can find this on the adafruit website where you purchased the device.  All you have to do is download it and unzip it in to the libraries folder in your Arduino folder on your computer.  So, now I'll try to break down the code so you can better understand it.#include -These are the necessary libraries that you need to include in the code#include \"Adafruit_DRV2605.h\"Adafruit_DRV2605 drv;                       -This line just initializes the driver object basicallyint maximumRange = 400;                 -Sets the max range to 4 metersint minimumRange = 0;                      -Sets the minimum range to 0 meters long duration, distance;          -Makes variables for the duration and distance of the pulses from the sensorint distancegroup, measurecount;      const int TRIG_PIN = 4;           -Sets the trig pin of the sensor to the 4 slot on the arduino (can be changed)const int ECHO_PIN = 5;         -Sets the echo pin of the sensor to the 5 slot on the arduino (can be changed)void setup() {   pinMode (TRIG_PIN, OUTPUT);    -Sets the pins to the necessary settingsdigitalWrite (TRIG_PIN, LOW);Serial.begin(9600);   drv.begin();                                      -Starts up the driver and tells it to use library number onedrv.selectLibrary(1);  }uint8_t effect = 1;void loop() {               -The loop contains a few other voids that will be made below  measuredistance();    printdistance();     getdistancegroup();     playeffect();     drv.go();     delay(60);    }void measuredistance(){     -This section basically calculates the distance that the sensor is reading (in or cm) unsigned long t1;   unsigned long t2;   unsigned long pulse_width;  float cm;    float inches;  digitalWrite(TRIG_PIN, HIGH);     delayMicroseconds(10);    digitalWrite(TRIG_PIN, LOW);  while (digitalRead(ECHO_PIN) == 0);  t1 = micros();   while (digitalRead(ECHO_PIN) ==1);   t2 = micros();   pulse_width = t2 - t1;  cm = pulse_width / 58.0;   inches = pulse_width / 148.0;   distance = cm;                -You can set the device to measure in inches or centimeters}void printdistance() {  -This section creates groups for different distances and can be modified for your needsif (distance >= maximumRange || distance <= minimumRange)  {     Serial.println(\"Error: Out of Range\");  }    else   {    Serial.println(distance);  } } void getdistancegroup() {    if (0 <= distance && distance <= 30)    {      distancegroup = 1;    }       else if (31 <= distance && distance <= 70)    {      distancegroup = 2;    }        else if (71 <= distance && distance <= 100)    {      distancegroup = 3;    }       else if (101 <= distance && distance <= 200)    {      distancegroup = 4;    }  else if (201 <= distance && distance <= 300)    {      distancegroup = 5;    }       else if (301 <= distance)    {      distancegroup = 6;    } }void playeffect() {  -This section uses the above groups and plays different vibration effects based on the group  switch (distancegroup)   {   -This whole section is just a big switch statement case 1:      if (measurecount < 1)      {        measurecount++;        break;      }        drv.setWaveform(0, 16);  // play effect    -The second number here is where you put the number for your effect drv.setWaveform(1, 0);   // end waveform      Serial.println(\"Under 30 cm\");      measurecount = 0;      break;          case 2:      if (measurecount < 2)      {        measurecount++;        break;      }       drv.setWaveform(0, 15);  // play effect        drv.setWaveform(1, 0);   // end waveform      Serial.println(\"Under 70 cm\");      measurecount = 0;      break;           case 3:      if (measurecount < 4)      {        measurecount++;        break;      }       drv.setWaveform(0, 7);  // play effect        drv.setWaveform(1, 0);  // end waveform      Serial.println(\"Under 100 cm\");      measurecount=0;      break;            case 4:      if (measurecount < 4)      {        measurecount++;        break;      }         drv.setWaveform(0, 9);  // play effect         drv.setWaveform(1, 0);  // end waveform       Serial.println(\"Under 200 cm\");      measurecount=0;      break;            case 5:      if (measurecount < 9)      {        measurecount++;        break;      }       drv.setWaveform(0, 67);  // play effect        drv.setWaveform(1, 0);   // end waveform      Serial.println(\"Under 300 cm\");      measurecount=0;      break;            case 6:      if (measurecount < 9)      {        measurecount++;        break;      }       drv.setWaveform(0, 68);  // play effect        drv.setWaveform(1, 0);   // end waveform      Serial.println(\"Over 300 cm\");      measurecount=0;      break;  } }There is a chart that can be found on the adafruit website on the page for the microcontroller that has numbers for every vibration effect, so you can go through and test to find your desired effect.  We had it so that the vibrations get more intense and more alarming the closer something got to the sensor.Be sure to run plenty of tests to make sure that you have it exactly how you want it to work.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 3: Step 2: the Code"}, {"step": 4, "steps_text": "After testing, screw the device onto a hard base (we used acrylic but it doesn't matter what material you use). Due to the fact that we had a deadline, no external power source was added, so for a power source we simply connected a USB cable to a laptop. However, an external power source can be added fairly easily.To mount the device on the users arm/hand, we used an old fingerless glove and an elastic strap with velcro and ran the wires to where they needed to be. You can place the motor in a variety of different places, but we chose to tape it around the pinky finger because we felt that you could really notice the vibrations best in that spot.", "step_imgs": ["https://cdn.instructables.com/FTO/E0HA/J1GP3RMG/FTOE0HAJ1GP3RMG.LARGE.jpg", "https://cdn.instructables.com/F8M/RCKJ/J1GP3RMF/F8MRCKJJ1GP3RMF.LARGE.jpg", "https://cdn.instructables.com/FP7/1LIX/J1GP3RMH/FP71LIXJ1GP3RMH.LARGE.jpg", "https://cdn.instructables.com/F5T/EH7R/J1GP3RDN/F5TEH7RJ1GP3RDN.LARGE.jpg", "https://cdn.instructables.com/FXN/9ULU/J1GP3RDM/FXN9ULUJ1GP3RDM.LARGE.jpg"], "step_title": "Step 4: Step 3: Mounting"}, {"step": 5, "steps_text": "So, as I mentioned before, we had the problem with the range of the sensor.  When we first started testing it, it worked up to the intended 4 meters.  But then, seemingly out of the blue, it only worked up to 50 centimeters for whatever reason.  Our professor couldn't find any problems in our code, so we concluded that it was just the sensor.  However, we didn't have time to order a new one.  If you do find a problem in our code though, just tell us in the comments.Also, we seemed to have times where every once in a while the sensor would just stop working and it would stop sending distances to the arduino, so the whole system would just stop.  However, if we just hit the reset button on the arduino or uploaded the code again it would start working immediately.If anybody knows why these problems may be occurring, please let us know!  Thank you and enjoy!", "step_imgs": [], "step_title": "Step 5: Bugs and Such"}], "channel": "Arduino"}, {"category": "technology", "description": "I don\u2019t have any current source in my lab, and these are useful for testing multimeters for example. I was looking on ebay for a current source but I wasn\u2019t able to find an affordable one so I\u2019ve decided to build one using the REF200 from TexasInstruments. This should be a fairly easy build that uses few parts so anyone can do it.", "title": "Building a Precision Current Reference Using REF200", "url": "https://www.instructables.com/id/Building-a-Precision-Current-Reference-Using-REF20/", "section": "technology", "steps": [{"step": 1, "steps_text": "The video describes the entire build so I recommend watching the video first to get an overview of the project. Then you can come back and read the following steps for more detailed explanation. If you enjoyed the video don't forget to subscribe to my channel and maybe hit the like button.", "step_imgs": [], "step_title": "Step 1: Checkout the Video!"}, {"step": 2, "steps_text": "Here you can find a list with links to all the parts I used in the project. Feel free to adjust and make changes according to your own needs.Plastic Enclosure http://voltlog.com/y/jp146 4mm Banana Jack  http://voltlog.com/y/e71g0 Battery Charging Protection Module  http://voltlog.com/y/e71g0  3P4T Rotary Selection Switch  http://voltlog.com/y/e71g0  18650 Lithium Battery Cell http://voltlog.com/y/e71g0  SO-8 Adapter PCB  http://voltlog.com/y/e71g0 REF200 - you should get it from one of the big distrubuitors Digikey, Element14 or directly from TexasInstruments.As shipping these items from China to your location might take some weeks it is recommended to order them ahead.", "step_imgs": ["https://cdn.instructables.com/F8U/WGTT/IXLAL4UH/F8UWGTTIXLAL4UH.LARGE.jpg"], "step_title": "Step 2: Parts List"}, {"step": 3, "steps_text": "The heart of this circuit is the REF200 integrated circuit from TexasInstruments.This ic combines three circuit building-blocks on a single chip: two 100uA current sources and a current mirror. This makes it ideal and very simple to use in our project because we could use a single current source and get 100uA on the output, we could parallel the two current sources and get 200uA output, we could use a 100uA current source put it through the current mirror, get 200uA out and add it to the initial 100uA for a total 300uA output or we could also parallel the two current sources for 200uA, put that through the current mirror to get another 200uA which added to the initial 200uA would gives us an output of 400uA.I don\u2019t like having to replace batteries in my lab equipment so if we take a look at the REF200 datasheet we notice it can work with voltage from 2.5 up to 40V. That's quite a wide voltage range which makes it compatible with a single rechargeable lithium cell. The idea is to use an 18650 cell recovered from a broken laptop battery because it's free and it should should have over 2000mAh capacity which will last the current source for years but just in case the battery gets discharged I will also add one of these small lithium cell charger modules complete with protection circuitry. If you don't have any of these salvaged cells you can just purchase a new battery.", "step_imgs": ["https://cdn.instructables.com/FFE/ASMO/IXLAL5JN/FFEASMOIXLAL5JN.LARGE.jpg"], "step_title": "Step 3: How Does It Work?"}, {"step": 4, "steps_text": "First step was to wire everything up according to the schematic(attached in PDF format to this step). I will start by soldering the REF200 IC on it\u2019s small adapter pcb, next I will make the required connections on the rotary switch. I\u2019m also soldering some wires to the battery terminals, care should be taken here to avoid excessive heat being applied to the battery so I\u2019m always quick when soldering to batteries.I\u2019ve used eagle cad to draw a front panel for this enclosure just to get some markings where holes should be drilled and to make sure everything fits inside.Next I took care of the enclosure and drilled the required holes and cleaned them up a bit. Once I had the enclosure ready I started fitting all the parts inside. I used some double sided tape to hold the battery in place. Same with the battery charging module, it was secured with some double sided tape and a slot was made in the side wall of the enclosure to allow connecting a micro usb cable for charging the battery. I then made the final connections to the output terminals and everything is ready now for the first test.", "step_imgs": ["https://cdn.instructables.com/FHK/NCP2/IXLAL5OI/FHKNCP2IXLAL5OI.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 4: Working on the Enclosure & Wiring"}, {"step": 5, "steps_text": "Testing the current source was as simple as connecting it to a precision current meter, in this case the Keithley 197A. I got some pretty good results, less than one microamp measurement error and it was very difficult to tell if the meter was out or if the reference was out (mostly because I don't have a recently calibrated multimeter) but the REF200 has a spec sheet accuracy of plus or minus 0.5%.I'm pretty sure with how the project turned out and I will be using this piece of kit for testing all the other multimeters in my lab. I hope this inspires you to build your own. Don't forget to checkout my youtube channel for more interesting videos:https://www.youtube.com/c/voltlog", "step_imgs": ["https://cdn.instructables.com/FQT/1U0V/IXLAL5VK/FQT1U0VIXLAL5VK.LARGE.jpg"], "step_title": "Step 5: Testing"}], "channel": "Electronics"}, {"category": "technology", "description": "I work with the Public Lab community, and we've been developing DIY pollution measuring tools. The Homebrew Oil Testing Kit is an open source, Do-It-Yourself kit which attempts to make it possible to identify oil pollution by type. This means matching a suspected sample with a known sample of crude oil, motor oil, heating oil, or other petroleum-based contaminant using a homemade fluorescence spectrometer. A spectrometer enables you to precisely measure the colors of light emitted by carefully prepared samples when they are illuminated with strong ultraviolet light, as shown in the lead image.We're running a Kickstarter campaign to distribute a batch of these kits, but of course since it's open source, you can simply find the materials and make one yourself. Watch this video to learn a bit about our campaign, and about the Public Lab community:You'll need:protective latex or nitrile gloves cotton swabs some small glass bottles, like empty nail polish bottles, or plastic cuvettes (available on Amazon) mineral oil (from the pharmacy -- it's used as a laxative; also sold as \"baby oil\") a \"Blu-Ray\" or 405 nanometer laseran eyedropper a spectrometer: you can build one from a piece of DVD-R, a webcam, and a light-sealed box. Instructions and design files for several types can be found on the Public Lab website, and we are working on getting an Instructable posted too. This Instructable covers the use of a spectrometer to do a specific type of analysis.Many of these things may need to be sealed in plastic and thrown away if you use them to handle spilled oil or anything suspect which you find on the ground, so don't use your grandfather's heirloom eyedropper :-PA more detailed list plus links for where to buy things can be found at the bottom of the Public Lab Oil Testing Kit page.Collect, Scan, & Compare The process of testing for oils can be described in three overall steps;collecting samples of suspected oil or tar from the ground, and dissolving small amounts in mineral oil so they are transparent  illuminating the solutions with ultraviolet light -- presently using a 405 nanometer blue laser -- and recording the light spectrum with a DIY spectrometer, as shown in the diagram above comparing the spectrum to those of similarly prepared samples of known pollutant oils, as well as a negative controlHere I'll discuss and illustrate these steps one by one -- but keep in mind this process is always evolving. For a constantly-updated version of these instructions, see the Oil Testing Kit page on the Public Lab Wiki.", "title": "DIY Oil Pollution Testing", "url": "https://www.instructables.com/id/DIY-Oil-Pollution-Testing/", "section": "technology", "steps": [{"step": 1, "steps_text": "Locating samples Originally, we focused on tar balls which were washing up on US Gulf Coast shorelines following the BP oil spill, in part because the Public Lab community was founded during the spill. These ranged from hard black lumps to orange residue. But oil contamination takes many forms, from residue around a street drain, to a sheen or buildup on the surface of the water. Above you can see some examples. You could look at the banks of an urban waterway, or for the motor oil that collects by a street drain. Be sure to use gloves!Above images, left to right: dried oil on rocks in 2010, Louisiana coast by Cesar Harada CC-BY-NC-SA, oil residue in the ocean in 2010, Louisiana coast by Cesar Harada CC-BY-NC-SA, Oil tanker leak on tracks beside Mississippi River, by @marlokeno, swabbing a street grate by @warrenLabelingLabel sample bottles with the date, time, and location. If you also give it a unique number, any other information can be kept in a notebook next to that number, such as further notes on the location and its condition. Take a photo of the sample with your label, in the place you found the sample, for context.The second photo above is of a sample already dissolving in mineral oil, but typically we've collected relatively dry samples and dissolved them later. You can put a small amount into an empty sample jar or use the cue tips to put residue directly into mineral oil as in the next step.", "step_imgs": ["https://cdn.instructables.com/FEI/5A56/I0VP1ZA4/FEI5A56I0VP1ZA4.LARGE.jpg", "https://cdn.instructables.com/F3M/QBHG/I0VP20JW/F3MQBHGI0VP20JW.LARGE.jpg"], "step_title": "Step 1: Collecting Samples"}, {"step": 2, "steps_text": "Use a cotton swab or small brush, dipped in mineral oil, to break up some of the material and dissolve it in a small, square-sided glass jar of mineral or baby oil. Wear gloves before handling suspected pollutants. You may need to rub the sample for a while to get it to dissolve. If it does not dissolve, there may be more aggressive ways to dissolve it. Where possible, try not to put too much sand or other stuff in the jar. It's a good idea to keep extra samples (dry, as you found them, not in mineral oil) in glass jars, stored in a cool dark place, as there may be an opportunity to test them later with more expensive, official means.Seal the bottle tightly with the cap. You can then gently turn it over a few times to get the residue to dissolve -- it may take some time before the mineral oil takes on a distinct but faint yellowish hue. You may then have to wait for the sediment to settle out. You want the liquid to be quite transparent, with the chunky stuff settled to the bottom.Concentration One big issue is getting the correct concentration of sample dissolved. If it's too little, we may not be able to get it to glow under UV light. Too much and it could be too dark for the light to be visible in the bottle. Ideally we'd like to have the same concentration in each sample bottle, but determining this is very difficult as the samples may be mixed, so they can't easily be weighed. We recommend going by how dark they are -- try for a color similar to very dilute tea, as in the second image above. If you notice the laser dimming noticeably as it goes through the liquid, it's too dark, and you'll have to dilute it more. ", "step_imgs": ["https://cdn.instructables.com/F27/V9IR/I0VP20XP/F27V9IRI0VP20XP.LARGE.jpg", "https://cdn.instructables.com/FIQ/L0ML/I0VP210Q/FIQL0MLI0VP210Q.LARGE.jpg"], "step_title": "Step 2: Preparing Samples"}, {"step": 3, "steps_text": "Now that your sample is prepared, you may be able to get it to fluoresce or glow by shining an ultraviolet light through it. We have had good results using a blue/UV laser, a 405 nanometer laser which is the same as found in a Blu-Ray player. See the parts list at the beginning, or on this page, for where to buy one. Very strong UV LEDs could also work, but are not as bright, and getting enough light to the spectrometer is a challenge. LEDs are also not as narrow wavelength as a laser. Don't look at the laser too much, as it can hurt your eyes, even if you're not pointing it directly at your eye! Only turn it on while scanning, and look away.Note that the laser will have a purple-ish color by itself (as seen in the lead image at the top of the page) -- this is not fluorescence, but just scattering of the laser light. What you're looking for is any other color -- whitish, bluish, greenish -- which is not from the laser, but is produced in the material itself as it's excited by the UV light. To measure precisely the colors that are being produced, we will use a spectrometer.", "step_imgs": ["https://cdn.instructables.com/F2P/VQ3A/I0VP21UB/F2PVQ3AI0VP21UB.LARGE.jpg"], "step_title": "Step 3: Illuminate and Scan the Sample"}, {"step": 4, "steps_text": "Colored light is often a blend of different colors. A spectrometer is a device which splits those colors apart, like a prism, and measures the strength of each color. A typical output of a spectrometer looks like the above spectrum of the daytime sky, with the actual light spectrum at the top and the graph of wavelength (horizontal axis) and intensity (vertical axis) below.Your own spectrometerYou can build your own spectrometer from a piece of DVD-R, a webcam, and a light-sealed box. Instructions and design files for one can be found on the Public Lab website, and we are working on getting an Instructable posted too. What is fluorescence, and how do we use it to match oils?While there are many ways to use a spectrometer, in this case we're causing the samples to glow by exciting them with a high-energy UV light.When we scan the fluorescence from an oil sample, we can clearly see the laser color, or wavelength, which is only in a narrow range around 405 nanometers, to the left, as in the second image above. All the remaining light, to the right of that tall peak, is produced by the excited material in the sample. The shape of that curve can be matched against other samples to help us identify what ours is. You can often even see the difference with the naked eye, though you can't do a precise comparison. The third image above shows a Blu-Ray laser going through several different kinds of oils -- note the different colors they each emit!", "step_imgs": ["https://cdn.instructables.com/FTV/ALJO/I0VP226C/FTVALJOI0VP226C.LARGE.jpg", "https://cdn.instructables.com/F4W/278Z/I0VP226E/F4W278ZI0VP226E.LARGE.jpg", "https://cdn.instructables.com/F2I/XE7U/I0VP2F7W/F2IXE7UI0VP2F7W.LARGE.jpg"], "step_title": "Step 4: Spectrometry? Fluorescence?"}, {"step": 5, "steps_text": "Whether you use the Homebrew Oil Testing Kit , or one of the prototype designs we've recently published, the basics are that you need to illuminate your sample with a laser beam perpendicularly to the direction your spectrometer is pointing, and to align it so that you can see enough light using the software at SpectralWorkbench.org, which connects to your USB webcam. The illustrations above show a couple ways we've folded up or modified boxes to keep a spectrometer lined up with a sample container and a jar. The hard parts are getting the laser lined up with the slit, so the light actually goes into the spectrometer, and using a pretty sensitive webcam so that it can actually detect the light. One thing not shown as clearly above is that you should either turn the lights off or cover the box so that you don't detect ambient light from the room. The illustration shows scanning a control sample at the same time, but this may not be necessary if everything is consistent between scans. You'll want to see something like the third image above in the software.If you don't, but you can visibly see fluorescence (see below for examples), try moving the laser up and down a bit to get it to align. You want the curve to the left of the tall peak (which is the laser) to be mostly between 25% and 75% intensity, so it's not \"clipping\" by being too bright but you're getting enough light to see a clear shape amongst the noise. You should also use \"RGB mode\" (in the Tools section of a saved spectrum page) to check that none of the three channels is overexposed, as shown in the fourth image. We'll add an automated warning for overexposure, soon.Improve your techniqueOnce you get a basic scan, save and label it, but consider some of these techniques to improve your data collection:try to ensure the same concentration of contaminant in each sample bottletake several scans for each sample, and label them #1, #2 -- comparing them to ensure your technique is consistentscan multiple samples from the same sitesmooth your data using the technique described in this noteOnce you're confident that your sampling is consistent and rigorous, you're ready to start comparing the data you've collected.", "step_imgs": ["https://cdn.instructables.com/F9G/B3ZO/I0VP2FE8/F9GB3ZOI0VP2FE8.LARGE.jpg", "https://cdn.instructables.com/F1B/9H47/I0VP2FEM/F1B9H47I0VP2FEM.LARGE.jpg", "https://cdn.instructables.com/FDI/5CMK/I0VP2G9Y/FDI5CMKI0VP2G9Y.LARGE.jpg", "https://cdn.instructables.com/FRW/8L5K/I0VP2GAC/FRW8L5KI0VP2GAC.LARGE.jpg"], "step_title": "Step 5: Illuminate the Sample and Record Its Spectrum"}, {"step": 6, "steps_text": "When identifying an oil, we are hoping to measure the color of fluorescence of the blend of Poly-Aromatic Hydrocarbons (PAHs) in the sample. The best way to identify a sample would be to compare it to a selection of similarly-prepared known reference materials. For example, if you have unknown X, you could compare it to both: A) a known sample of crude oil and B) a known uncontaminated sample of material (perhaps soil) to see which it matches best.Which is it more like? Ideally, it should be compared to a range of possible references. For example, if it's possible the sample is heating oil or motor oil, you could compare it to similarly prepared samples of those as well. Some research has shown that vitamins A and E can produce fluorescence similar to petroleum products.Read over this detailed research note to see how to set up a comparison -- but keep in mind that since it was published, we've vastly improved noise reduction (smoothing) and comparison features as described in this note.Plot your samples and compare Add all your scans to a set, so they can be viewed together, and you can see the subtle color differences as graphed lines. Add the spectrum of your unknown sample and see which of the others it is closest to.Be sure your spectrometer is calibrated so that the spectra have wavelength units -- although if they're captured on the same device and you haven't moved it, even uncalibrated spectra can be aligned and compared.", "step_imgs": ["https://cdn.instructables.com/FLT/R1E9/I0VP2GYF/FLTR1E9I0VP2GYF.LARGE.jpg", "https://cdn.instructables.com/FQC/XI5G/I0VP2HLN/FQCXI5GI0VP2HLN.LARGE.jpg", "https://cdn.instructables.com/FB0/C7OC/I0VP2HM0/FB0C7OCI0VP2HM0.LARGE.jpg", "https://cdn.instructables.com/FYA/V8MM/I0VP2K9L/FYAV8MMI0VP2K9L.LARGE.jpg"], "step_title": "Step 6: Compare Your Scans"}, {"step": 7, "steps_text": "There are a lot of steps in this process, and it's still a prototype, so think about the following things to be more confident in your findings, or to help refine them to answer your questions adequately. There are thousands of people in the Public Lab community, so also consider posting your work there (requires a login) to solicit input and advice. Even if your work is not done, it's a great idea to share and solicit feedback on your plan before, during, and after you've done the work. You may be able to build on previous work on the website, and your work will help others who are seeking to perform similar tests.Positive and negative controlsThink critically about your testing and how it might have gone wrong. Could you have made mistakes, or is the match you've found between your unknown sample and your references not good enough? Could another material produce the same color spectrum as your suspected contaminant, and fool your test? (See this research on Vitamins E and A causing such false positives).Validate your resultsAn extra step that may give your work more credibility is to submit a few of your samples for analysis to a lab, or to use other tests to confirm your results. Alternatively, if you know other testing has occurred, you can try to extend its results by re-testing the same site or samples, correlating your results with the previous test, and performing your own tests over a larger area or at more sites, or over a longer time span. Variations There are many variations of the process which could be useful but are not essential. These include: collecting samples from a sheen on the surface of the water -- which may be difficult as sheens are extremely thin and spread outmeasuring fluorescence in-situ on the ground, without collecting or concentrating samples in a jar -- which could be difficult as it's very dilute and mixed with other things like water, dirt, or plant matterMany of these may be future goals of the project, but we are focusing on our primary use case of collecting contaminated soil or residue from the ground, dissolving it in mineral oil, and illuminating it with UV in a spectrometer.That's it for now!Thanks! This is far from a finished or mature technique, but we believe that a collaborative, open process is the best way to iterate and improve on it. Please offer suggestions for simplifying, lowering costs, or improving the validity of the tests, either here, or on PublicLab.org, where there are manymany people working to make pollution monitoring more accessible and cheaper. And have a great day!", "step_imgs": [], "step_title": "Step 7: Be Sure You Have It Right!"}], "channel": "Science"}, {"category": "technology", "description": "Monitoring digital circuits can be difficult at best. Sometimes it's nigh impossible. But the Digital Discovery makes it easier to monitor and troubleshoot complex digital circuits.In this Instructable, I will show how to monitor simple digital signals with a rather not-so-complex digital modulo 10k counter and 7-segment LED display.The code for the counter itself is written in Verilog and loaded onto a Digilent CMOD A7 bread-board compatible FPGA board. That being said, this is not a Verilog or FPGA tutorial. However the concepts behind the code will hopefully be explained enough so that you can use any other type of programmable chip and whatever language you are familiar with to follow along.The overall design and source code for this project is not my own but comes from the Verilog edition of Digital Design with some slight modifications to get it to work for this exact project. I will go over each individual logic block used in the design one at a time, and then tie them all together at the end.Once the code is defined and explained, I'll describe the external driver circuit for the LED display.Lastly, I'll go over how to use the Digital Discovery to monitor the signals.For this project you will need:- Digilent Digital Discovery.- Digilent Waveforms 2015 software.This is a free software download and is required to interface with the Digital Discovery.- Digilent CMOD A7.The A7 was chosen specifically because it has very few built-in peripheral devices on the board, i.e. no 7-segment LED display. As mentioned, any programmable chip and board will work for this.- Xilinx Vivado HLx tool suite. This is a free download that is compatible with Xilinx's family of FPGA chips. The A7 version I will be using uses the XC7A35T-1CPG236C chip.- 7-segment LED display. I used a common-cathode MSQ6941C, but a common-anode version will work with some design tweaks.- 4X NPN BJT transistors.I used 2N2222A, but this project won't be picky with a specific NPN version. These are used to control the cathode signals. The FPGA pins are not meant to drive high power loads, and while an LED might not seem like much, it's good practice to protect your chip FPGA by buffering the signal with a transistor. If you are using a common-anode display you will need to use PNP transistors on the anodes.- solderless bread-board and wires.Whatever works to make connections on the bread-board. Depending on your setup, you may need to use a couple of bread-boards.- 12X resistors.5X 1k\u03a9 resistors, one for each BJT base pin and one for the decimal point pin on the 7-segment display since it won't be used and can be driven low to keep it turned off.7X 150\u03a9 resistors, one for each segment anode pin on the display.", "title": "Monitoring Digital Circuits With the Digital Discovery", "url": "https://www.instructables.com/id/Monitoring-Digital-Circuits-With-the-Digital-Disco/", "section": "technology", "steps": [{"step": 1, "steps_text": "The first block we will define is a clock divider, which is then used to drive the counter block and the 7-segment block. The A7 system clock is 12 MHz, so if we define a minimum 20-bit bus and toggle the LSB with the system clock, we can pick and choose any bit n (n starting at 0) and get a 2n+1 factor of 12 MHz. So if we use the first bit we would get 12 MHz / 20+1 = 6 MHz. The 2nd bit gives us 12 MHz / 21+1 = 3 MHz and so on.Based on this, we will define 2 additional clocks using this divider. One will be driven from bit 15 to give us a 183 Hz clock and will be used by the 7-segment driver block as the segment refresh rate. You want to have each segment refresh at about 50 Hz, and since we are using 4 segments, we need \u2248 200 Hz to drive the segment refresh rate.The second clock will be taken from bit 20 and will give us a 5.7 Hz clock which will be used by the counter block to increment the value shown on the display. Using a lower bit value will increase the count rate by some integer multiple of 2, i.e. bit 19 would increment the count at 11.4 Hz.Here's the code:module clkdiv(\n    input wire mclk,\n    input wire clr,\n    output wire clk183,\n    output wire clk6\n    );\n    \n    reg [23:0] q;\n    \n    always @(posedge mclk or posedge clr)\n    \tbegin\n    \t\tif(clr == 1)\n    \t\t\tq <= 0;\n    \t\telse\n    \t\t\tq <= q + 1;\n    \tend\n    \n    assign clk183 = q[15];  //183Hz\n    assign clk6 = q[20];   //6hz\nendmodule", "step_imgs": [], "step_title": "Step 1: The Clock Divider."}, {"step": 2, "steps_text": "Next we define the block that will count from 0-9999 and then reset back to 0. This block works much like the clock divider block, but instead of picking off individual bits from the bus, we will export the entire bus.9999 in decimal = 0010 0111 0000 1111 in binary, so we need to define a 14-bit bus as the output. As long as the \"clr\" button is not pressed or the count is not 9999, q will increment by 1 for each clock pulse. The clock pulse used is the 5.7 Hz signal defined in the previous step, so the display will increment at that rate.Here's the code:module mod10kcount(\n    input wire clr,\n    input wire clk,\n    output reg [13:0] q\n    );\n    \n    always @(posedge clk or posedge clr)\n    \tbegin\n    \t\tif(clr == 1)\n    \t\t\tq <= 0;\n    \t\telse if(q == 9999)\n    \t\t\tq <= 0;\n    \t\telse\n    \t\t\tq <= q + 1;\n    \tend\nendmodule\n", "step_imgs": [], "step_title": "Step 2: The 10k Counter"}, {"step": 3, "steps_text": "The 10k counter block outputs a 14-bit binary value. The problem is that it is in binary, which is simple to use but doesn't convert straight over to decimal without some work.We can use hexadecimal digits to represent 4 binary digits, where one digit has the ability to accurately reflect the value of 4 binary digits representing the decimal values 0-15. With decimal, one digit can only accurately display up to \"9\", and then an additional digit is required to display the values 10-15. To do the conversion, we will use the double dabble, or shift-and-add-3, algorithm. I will leave it to you to verify that it works.The algorithm is as follows for an n-bit binary value:1) Shift the binary number left one bit.2) If n shifts have occurred, the BCD number is accurately represented in the Units, Tens, Hundreds, etc. columns.3) If the binary value in any of the BCD columns is greater than or equal to 5 after shifting, add 3 to that value in that BCD column. (Be sure to check the value and add accordingly for each column separately!)4) Go to 1).This is illustrated in the table below starting with the binary value for 255, or 1111 1111. Here's the code:module binbcd14(\n    input wire [13:0] b,\n    output reg [16:0] p\n    );\n    \n    reg [32:0] z;\n    integer i;\n    \n    always @(*)\n    \tbegin\n    \t\tfor(i = 0; i <= 32; i = i + 1)\n    \t\t\tz[i] = 0;\n    \t\tz[16:3] = b;\n    \t\t\n    \t\trepeat(11)\n    \t\t\tbegin\n    \t\t\t\tif(z[17:14] > 4)\n    \t\t\t\t\tz[17:14] = z[17:14] + 3;\n    \t\t\t\tif(z[21:18] > 4)\n    \t\t\t\t\tz[21:18] = z[21:18] + 3;\n    \t\t\t\tif(z[25:22] > 4)\n    \t\t\t\t\tz[25:22] = z[25:22] + 3;\n    \t\t\t\tif(z[29:26] > 4)\n    \t\t\t\t\tz[29:26] = z[29:26] + 3;\n    \t\t\t\tz[32:1] = z[31:0];\n    \t\t\tend\n    \t\tp = z[30:14];\n    \tend\nendmodule\n", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 3: The Binary to Binary-Coded-Decimal Converter"}, {"step": 4, "steps_text": "7-segment displays are pretty common and really easy to use. To display the value \"1\", we need to have two of the seven segments on and the other five off. This data is easily represented in binary, but requires some conversion from standard binary. Of course.For a good tutorial on 7-sement displays and how they work, check out the Digilent Learn site. The tutorial at electronics-tutorials.ws is another good option.The code contains a couple of case statements that determine which value to display and on which digit of the 7-segment display to put it.A 0-3 counter s takes the 5.7Hz clock as its trigger. The value of s is used to determine which anode is turned on as well as which 4 bits of the 16-bit binary input is used. The binary value of the digit is then converted to the 7-segment binary value that represents that digit.Normally you would drive the cathode value low and the anode value high in order to turn on the LED. But since we are using NPN BJTs, we need both cathode and anode values to be driven high in order to turn on the LED.Here's the code:module x7segbc(\n    input wire [15:0] x,\n    input wire cclk,\n    input wire clr,\n    output reg [6:0] a_to_g,\n    output reg [3:0] cath\n    );\n    \n    reg [1:0] s;\n    reg [3:0] digit;\n    wire [3:0] cen;\n    \n    assign cen[3] = x[15] | x[14] | x[13] | x[12];\n    assign cen[2] = x[15] | x[14] | x[13] | x[12] | x[11] | x[10] | x[9] | x[8];\n    assign cen[1] = x[15] | x[14] | x[13] | x[12] | x[11] | x[10] | x[9] | x[8] | x[7] | x[6] | x[5] | x[4];\n    assign cen[0] = 1;\n    \n    always @(*)\n    \tcase(s)\n    \t\t0: digit = x[3:0];\n    \t\t1: digit = x[7:4];\n    \t\t2: digit = x[11:8];\n    \t\t3: digit = x[15:12];\n    \t\tdefault: digit = 4'b0000;\n    \tendcase\n    \n    always @ (*)\n\t\tcase (digit) //gfedcba '1' = seg_on\n\t\t  \t0: a_to_g = 7'b0111111;\n\t\t  \t1: a_to_g = 7'b0000110;\n\t\t  \t2: a_to_g = 7'b1011011;\n\t\t  \t3: a_to_g = 7'b1001111;\n\t\t  \t4: a_to_g = 7'b1100110;\n\t\t\t5: a_to_g = 7'b1101101;\n\t\t\t6: a_to_g = 7'b1111101;\n\t\t  \t7: a_to_g = 7'b0000111;\n\t\t  \t8: a_to_g = 7'b1111111;\n\t\t  \t9: a_to_g = 7'b1101111;\n\t\t  \t'hA: a_to_g = 7'b1110111;\n\t\t  \t'hb: a_to_g = 7'b1111100;\n\t\t  \t'hC: a_to_g = 7'b1011000;\n\t\t  \t'hd: a_to_g = 7'b1011110;\n\t\t  \t'hE: a_to_g = 7'b1111001;\n\t\t  \t'hF: a_to_g = 7'b1110001;\n\t\tendcase\n\t\t\n\talways @(*)\n\t\tbegin\n\t\t\tcath = 4'b0000;\n\t\t\tif(cen[s] == 1)\n\t\t\t\tan[s] = 1;\n\t\tend\n\t\n\talways @(posedge cclk or posedge clr)\n\t\tbegin\n\t\t\tif(clr == 1)\n\t\t\t\ts <= 0;\n\t\t\telse\n\t\t\t\ts <= s + 1;\n\t\tend\n\nendmodule\n", "step_imgs": [], "step_title": "Step 4: The 7-segment LED Driver"}, {"step": 5, "steps_text": "Once you have each logic block defined, you can tie them all together in a top module. The connections between the external pins on the board and the internal logic blocks are defined here, as well as some internal wires to connect the blocks to each other as needed. There are also 3 led0_X  assignments that turn off the on-board RGB led built onto the A7. The 3 colors will be set at about 50% brightness by default because the pins will float if you don't drive those pins high in code. Unless you decide to use them, then do what you want.Here's the code:module mod10kcount_top(\n    input wire sysclk,\n    input wire btn,\n    output wire [6:0] seg,\n    output wire [3:0] cath,\n    output wire led0_r,\n    output wire led0_g,\n    output wire led0_b\n    );\n    \n    wire [16:0] p;\n    wire clr, clk6, clk183;\n    wire [13:0] b;\n    \n    assign clr = btn;\n    assign led0_b = 1;\n    assign led0_g = 1;\n    assign led0_r = 1;\n    \n    clkdiv U1 (\n    \t.mclk(sysclk),\n    \t.clr(clr),\n    \t.clk183(clk183),\n    \t.clk6(clk6)\n    );\n    \n    mod10kcount U2 (\n    \t.clr(clr),\n    \t.clk(clk6),\n    \t.q(b)\n    );\n    \n    binbcd14 U3 (\n    \t.b(b),\n    \t.p(p)\n    );\n    \n    x7segbc U4 (\n    \t.x(p[15:0]),\n    \t.cclk(clk183),\n    \t.clr(clr),\n    \t.a_to_g(seg),\n    \t.cath(cath[3:0])\n    \t);\n    \t    \nendmodule\nBelow are the constraint file definitions I used for the A7 board.# Clock signal 12 MHz\nset_property -dict { PACKAGE_PIN L17   IOSTANDARD LVCMOS33 } [get_ports { sysclk }]; #IO_L12P_T1_MRCC_14 Sch=gclk\ncreate_clock -add -name sys_clk_pin -period 83.33 -waveform {0 41.66} [get_ports {sysclk}];\n\n# LEDs\nset_property -dict { PACKAGE_PIN B17   IOSTANDARD LVCMOS33 } [get_ports { led0_b }]; #IO_L14N_T2_SRCC_16 Sch=led0_b\nset_property -dict { PACKAGE_PIN B16   IOSTANDARD LVCMOS33 } [get_ports { led0_g }]; #IO_L13N_T2_MRCC_16 Sch=led0_g\nset_property -dict { PACKAGE_PIN C17   IOSTANDARD LVCMOS33 } [get_ports { led0_r }]; #IO_L14P_T2_SRCC_16 Sch=led0_r\n\n# Buttons\nset_property -dict { PACKAGE_PIN A18   IOSTANDARD LVCMOS33 } [get_ports { btn }]; #IO_L19N_T3_VREF_16 Sch=btn[0]\n\n# 7-seg\nset_property -dict { PACKAGE_PIN U4    IOSTANDARD LVCMOS33 } [get_ports { cath[3] }]; #IO_L11P_T1_SRCC_34 Sch=pio[38]\nset_property -dict { PACKAGE_PIN V5    IOSTANDARD LVCMOS33 } [get_ports { cath[2] }]; #IO_L16N_T2_34 Sch=pio[39]\nset_property -dict { PACKAGE_PIN W4    IOSTANDARD LVCMOS33 } [get_ports { cath[1] }]; #IO_L12N_T1_MRCC_34 Sch=pio[40]\nset_property -dict { PACKAGE_PIN U5    IOSTANDARD LVCMOS33 } [get_ports { cath[0] }]; #IO_L16P_T2_34 Sch=pio[41]\n\nset_property -dict { PACKAGE_PIN U2    IOSTANDARD LVCMOS33 } [get_ports { seg[0] }]; #IO_L9N_T1_DQS_34 Sch=pio[42]\nset_property -dict { PACKAGE_PIN W6    IOSTANDARD LVCMOS33 } [get_ports { seg[1] }]; #IO_L13N_T2_MRCC_34 Sch=pio[43]\nset_property -dict { PACKAGE_PIN U3    IOSTANDARD LVCMOS33 } [get_ports { seg[2] }]; #IO_L9P_T1_DQS_34 Sch=pio[44]\nset_property -dict { PACKAGE_PIN U7    IOSTANDARD LVCMOS33 } [get_ports { seg[3] }]; #IO_L19P_T3_34 Sch=pio[45]\nset_property -dict { PACKAGE_PIN W7    IOSTANDARD LVCMOS33 } [get_ports { seg[4] }]; #IO_L13P_T2_MRCC_34 Sch=pio[46]\nset_property -dict { PACKAGE_PIN U8    IOSTANDARD LVCMOS33 } [get_ports { seg[5] }]; #IO_L14P_T2_SRCC_34 Sch=pio[47]\nset_property -dict { PACKAGE_PIN V8    IOSTANDARD LVCMOS33 } [get_ports { seg[6] }]; #IO_L14N_T2_SRCC_34 Sch=pio[48]\n", "step_imgs": [], "step_title": "Step 5: The Top Control Block"}, {"step": 6, "steps_text": "The analog circuit used to drive the display is really simple, but there is one thing that could make it slightly confusing. For LEDs to work the cathode must be more negative than the anode, so we should be sending a \"0\" signal to the cathode pins and a \"1\" signal to the anode pins. But the BJTs are in between what we have designated as the cathode pins in code on the A7 and the actual LED display cathode pins. NPN BJTs require a positive signal on the base pin in order to turn on, so the code requires a \"1\" to be output for both cathode and anode pins in order to turn on the LED. The BJT acts kind of like a... buffering inverter here I guess. When it receives a positive signal at the base, the connection across the collector and emitter pins is closed, connecting the LED cathode pin to \"0\" or GND.Anyway, here's the best schematic I could make. The LED display shown isn't a perfect match, but no schematic design program has every part ever made. The idea should be clear enough though. On the right are the labels for the pins that match the A7 board.Here's the circuit all put together.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 6: The External Display Driver Circuit"}, {"step": 7, "steps_text": "There are additional connection options for the Digital Discovery the Analog Discovery does not have, specifically the two PMOD compatible connectors on either side of the main body.For this project I'm going to stick with the main 32-pin connector and utilize pins 0-10. Pins 0-3 will monitor the 4 cathode signals while pins 4-10 will monitor the 7 anode signals. Simply plug the fly-wires into the bread-board to make the connections. Be sure to connect one of the many GND pins (\u2193 symbol on the body) on the Discovery to the circuit GND as well. Below I've labeled the A7 pins as well as the Discovery pins to prevent any confusion.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 7: Connecting the Digital Discovery"}, {"step": 8, "steps_text": "I'll be using the Logic Analyzer tool in Waveforms for this step. (Go here for a more in depth look at the Logic Analyzer tool and here for a collection of tutorials for all of the Waveforms tool available.)Let's break up the 11 signals we want to observe into two distinct groups, \"digits\" and \"segments\", and then define each group as a bus in the tool window.Segment A on the 7-segment display maps to bit 0 of the \"segments\" bus, with segment G mapping to bit 6. Digit 1 (leftmost) on the display maps to bit 0 of the \"digits\" bus, with digit 4 mapping to bit 3.We can observe the data live simply by clicking on the run button at the top. You can adjust the time base of the window to view more or less data in the window. Below you see a full minute of captured date in one window. At about -21 s the count goes from 999 to 1000 so you see the signal for digit 1 turn on. At +6 s I reset the counter. You can see the digits begin to turn on as they are added to the display as the count increments the tens (\u2248+7.5 s) and then hundreds (\u2248+23 s) places.The problem is that if I want to zoom in on this data we start to lose data integrity and it becomes harder and harder to correctly interpret.Let's record the data instead. This way we can zoom in or out and not worry about losing data clarity. Click on the button that says \"Screen\" in the \"Mode:\" box and select \"Record\".The \"Single\" button will change to \"Config\". Click on it to configure the record options.\"Samples\" lets you determine how many samples will be taken. The rate at which those samples are taken is set in the \"Rate\" box. The \"Base\" box lets you determine how long you will be able to record information. You can only set two of the three options, while the software will do its best to auto-set the third value based on your other two choices. Since this project is running pretty slow, let's go with 6,000,000 samples at 10 kHz. The Base box should auto-fill with 1 min. Click \"Start\" once you have the configuration set. You should see something like this:At about +8 s I reset the counter, so you can see all of the digits reset, then digit 4 is on while the count is 0-9, then digit 3 turns at about +10 s and digit 2 turns on at about +26 s.Since I recorded the data, when I zoom in you can clearly see the rising/falling edges of the data.In this image we can see the time it took for the FPGA chip to reset, retrieve the saved program file from flash memory, load it, and start counting again. The digit signal starts again and then very soon after the data for the segments starts up. If we zoom in even more we can start to pick out the actual data. Let's look at the data at +8.17 s, right before I reset the counter.You can see that in the \"digits\" bus, bit 3 is high, so digit 4 (the rightmost digit) is high, and therefore that digit is turned on. Moving up into the \"segments\" bus and starting with bit 0 (segment A) we can see that bits 0, 1, 2, 3, 5, and 6 are all high while bit 4 is low. So segments A, B, C, D, F, and G are all on while segment E is off. This pattern corresponds to the pattern for the decimal digit \"9\" and is displayed in the Ones place.Moving right to about +6 ms, we see that digits[2] is on, and segments[0, 1, 2, 3, 5, 6] are all high. This matches the previous pattern so we should also see a decimal \"9\" on the display in the Tens place.Moving right again to about +11 ms, digits[1] is on and segments[0, 1, 2, 3, 4, 5] are all high. This pattern is for the decimal digit \"0\", so we should see \"0\" in the Hundreds place.Lastly, at about +18 ms digits[0] is high and segments[0, 1, 2, 3, 6] are all high. This pattern corresponds to the decimal digit \"3\" and is displayed in the Thousands place.We can therefore conclude that the value of the counter when I reset it was 3099.At this point we're done with this project. By default the Digital Discovery can sample up to 200 million samples per second. The next step goes over how to use the High-Speed Adapter for the Digital Discovery to monitor signals at up to 800 million samples per second.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 8: Monitoring the Signals. Finally"}, {"step": 9, "steps_text": "The Logic Analyzer tool for the Digital Discovery has a sample rate of 200 MS/s. By adding the High Speed Adapter and using the included high-speed logic probes, we can increase the sample rate up to 800 MS/s. To do this, select the \"800MHz DIN 0..7\" option in the \"Inputs\" box above the acquisition window. The Digital Discovery will re-allocate the resources used to sample channels 8-23, limiting us to using channels 0-7.Since the speed of the CMOD A7 clock is only 12 MHz, I'm going to substitute in the Nexys 4 for this step, which has a core clock of 100 MHz. I really want to try and push the capabilities of the Digital Discovery. The program blocks are all the same but the code is adapted to be used on the Nexys 4. The Vivado project file is included as a zipped file.Using the 100 MHz clock to drive the 10k counter means that the 7-segment will be counting so fast that you'll never see the digits change. But if, in the program code, we tie the segment signals and one of the anode signals to several of the pins tied to the PMOD connectors JA and JB, we can use the HSA to observe these signals.Each high-speed probe comes as a twisted pair, one red and one black wire.When looking at the HSA, the topmost and bottommost rows of pins are all tied to GND (blue boxes) while the two innermost rows of pins correspond to pins 0-23 (red boxes).Simply connect the high-speed probes so that the black wire connects to GND and the red wire connects to the associated input port.Now here's the tricky part. All of the black GND wires are tied to the Nexys PMOD GND pins through a couple of jumper wires using a small bread-board power strip. The red wires are tied to the several pins on the PMOD connectors JA and JB. The heat shrink tubing on the probes won't allow for more than three probe wires to be placed next to each other on the PMOD header, so you have to get a little creative. Luckily there are a lot of pins to work with on the Nexys.Once we have all of the connections made we can get to collecting the data. We will need to use the record option again, so configure the settings as follows:Click on \"Start\" and you should get something like the following. Click here for a much clearer, higher resolution version.I added some cursors to highlight some timing blocks. You can see clear differences between the blocks when you look at the \"segments\" bus. If you look close at the \"digit\" signal at the top, you'll see that in the first block I have highlitghted it goes low. I have the anode signal to digit 4 (rightmost) connected here, and during this block we see that digit 4 is turned on. There are three more blocks where the other three digits have their chance to shine, but since I'm limited to only 8 signals if I want to utilize the full 800 MS/s rate, I could only pick one digit.By zooming in on the data right near the first cursor, we can really start to see what's going on. (high res)Looking at the \"segments\" line in the table you'll see a decimal value displayed which corresponds to the binary data shown below in the individual \"segments\" channels. Taking a look at the decimal value \"2\" we see that with 7 bits the binary value is \"0000010\". Remembering that for the Nexys-based code a \"0\" means that the segment is on, and then mapping the segments as \"GFEDCBA\", we see that only segment \"B\" is off. This is a decimal-valued \"6\".Looking at the next few decimal values we find that \"120\" displays a \"7\", \"0\" displays an \"8\", \"16\" displays a \"9\", \"64\" displays a \"0\", etc. We are cycling through all of the decimal values 0-9 in order and then starting over. Sounds like a clock. It's hard to tell in this view, but by adding a couple more cursors we can measure the distance between two instances of the same value and find that the time is 100 \u03bcs. This equates to 10 kHz, which is what we should be expecting for the Thousands place digit using a 100 MHz clock to drive the Ones place digit. When we consider that the Ones place digit is ticking at 100 MHz, then divide that value down by 10 kHz for the Thousands place digit to cycle 0-9, we see that the Thousands place digit is cycling 0-9 at 10 kHz.Now let's look at the data in the One's place. (high res)Take a second to look at the high resolution version. I added the cursors to make the data easier to read. From cursor 1 on the left to cursor 11 on the right is a spread of only 100 ns. At 800 MS/s, that comes out to only 800 samples in that time frame. So it looks like we succeeded in pushing the Digital Discovery's capabilities. But let's analyze what we see.The cursors I added are each separated by 10 ns. If we look at the decimal value displayed in the \"segments\" line where each cursor is placed, we see that the same pattern of 10 decimal values that we saw when we looked at the Thousands place is displayed, albeit with some added \"bonus data\". We get some noise in the signal when we have several channels change state all at once. Look between cursors 8 and 9. To change from \"121\" (binary \"1111001\") to \"36\" (binary \"0100100\") we need 5 values to change state. Each channel changes, but not all at the exact same time. If we look at all of the data, we'll see that the only \"bonus data\" we get is when the channels are changing states. But note that the correct data is present at the correct time and that there is no errant data on the channels, they just don't all change state at the exact same moment. This is due to propagation delays inherent to the trace routing on the Nexys 4 PCB itself. Some traces are slightly longer than others so the signal takes just a bit longer to get to the end. We don't often think about this because the projects we work on don't often deal with this time scale.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 9: Using the High Speed Adapter"}, {"step": 10, "steps_text": "The Digital Discovery is a superb tool that allows you to observe and record high-speed data. By simply dedicating more of the FPGA chip's resources to focus on digital-only applications, a whole world of possibilities opens up.As always, thanks for reading. If you have questions, please ask them in the comments below, though PMs are always welcome as well. You just never know when someone else has the same question and that way we can all learn and help each other get better. Have fun building!Also, please check out the Digilent blog where I contribute from time to time. Just click the image below.", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 10: That's It!"}], "channel": "Tools"}, {"category": "technology", "description": "Data Acquisition (DAQ) hardware provides simple interface to bring Analog/Digital signals in to your computer and the LabVIEW software is used to process the acquired signal. For example you can connect a thermocouple sensor to the DAQ module via analog input channel and with the help of LabVIEW VI read / display the current temperature. In this tutorial I will construct a data acquisition virtual instrument (VI) in LabVIEW for MiniLab1008 DAQ Module. The information provided here will facilitate the understanding of LabVIEW software and data acquisition hardware.  LabVIEW is a trademark of National Instruments Corporation (NI) and the data acquisition hardware we are using is from Measurement Computing (MCC).The cost of Minilab1008 USB DAQ Module is around $129See MCC site for more information on MiniLab1008 : http://www.measurementcomputing.com/See NI site for more information on LabVIEW: http://www.ni.com/labview/", "title": "MiniLab 1008 and LabVIEW", "url": "https://www.instructables.com/id/MiniLab-1008-and-LabVIEW/", "section": "technology", "steps": [{"step": 1, "steps_text": "The drivers provided with the Measurement Computing (MCC) DAQ modules do not\roffer direct control of the hardware from the LabVIEW software. We need Universal Library to communicate with the LabVIEW. See figure 1.1 for hierarchical communication link between LabVIEW and the MCC Minilab1008 DAQ.", "step_imgs": ["https://cdn.instructables.com/F06/GD9X/FJ6RWHG9/F06GD9XFJ6RWHG9.LARGE.jpg"], "step_title": "Step 1: Communication Link"}, {"step": 2, "steps_text": "There are two parts to a VI: the panel and the diagram. The panel resembles the front panel of an instrument and the diagram is where you make connections with various components. This VI will acquire the data from a specified channel and display it on front panel. There is no text programming involved in LabVIEW. The VI when complete should look like fig 1: ", "step_imgs": ["https://cdn.instructables.com/F1L/HH8T/FJ34CYIN/F1LHH8TFJ34CYIN.LARGE.jpg"], "step_title": "Step 2: Two Parts to a VI - Front Panel and Diagram"}, {"step": 3, "steps_text": "Click to start InstaCal software from Measurement Computing. This is necessary as it would allow the PC to detect the connected DAQ hardware.  \rClick on your desktop to start LabVIEW. \rClick NewVI to start a new VI application. \r", "step_imgs": [], "step_title": "Step 3: Detecting Hardware & Starting LabVIEW"}, {"step": 4, "steps_text": "For data acquisition to work we need to provide controls, functions and indicators in the VI. Controls allow us to change the value of parameters, indicators allow us to graph and chart data, and functions provide the processing or the input/output control of the acquired data. Step 1 - Adding Digital ControlExplore the Controls menu. Choose DIGITAL CONTROL from the Numeric window as shown in Fig 2. A field will appear on the panel, label it as \"Board #\".Repeat this 3 times by adding more digital control and label them as Sample Rate, Low Channel and High Channel. These controls will allow us to enter the numeric values for the Minilab1008 data acquisition board", "step_imgs": ["https://cdn.instructables.com/FD9/JZ32/FJ34CYIP/FD9JZ32FJ34CYIP.LARGE.jpg"], "step_title": "Step 4: Designing Front Panel"}, {"step": 5, "steps_text": "Step 2 - Adding Control for Error MessagesFor using the Error control, LabVIEW reads from a set of strings. From the String & Path Controls menu, as shown in Fig 3, select String Indicator and label it as Error Message. Remember this is a window for error messages relating the status of the hardware. ", "step_imgs": ["https://cdn.instructables.com/FVZ/YQB2/FJ34CYJO/FVZYQB2FJ34CYJO.LARGE.jpg"], "step_title": "Step 5: Designing Front Panel"}, {"step": 6, "steps_text": "Step 3 - Choosing Graph for plottingTo plot the acquired data, go to GRAPH menu as shown in Fig 4, select WAVEFORMGRAPH and label it as Display.NOTE: With manipulation of G objects, the front panel could look like as shown in Fig. 1.", "step_imgs": ["https://cdn.instructables.com/FLU/YVUT/FJ34CYJN/FLUYVUTFJ34CYJN.LARGE.jpg"], "step_title": "Step 6: Designing Front Panel"}, {"step": 7, "steps_text": "Click on the diagram part of the VI. You will notice another floating palette titled Functions. This\rpalette has a variety of functions and sub-VIs that control all aspects of the DAQ board or module and signal measurement and processing. If you have labeled all the numeric controls and indicators, then you will find their terminals on the diagram labeled appropriately. In case you forgot to label the numeric and strings just as you brought them into front panel it can be confusing. Use the right click mouse while selecting the terminal and choose \"Find Terminal\" from the menu. Alternatively, you can double-click on the terminal in the diagram and it will point to the control in the front panel. To get to the diagram, go to the Windows menu and select SHOW DIAGRAM. The diagram should look as shown in Fig. 5:\r", "step_imgs": ["https://cdn.instructables.com/FMJ/Y8UZ/FJ34CYJE/FMJY8UZFJ34CYJE.LARGE.jpg"], "step_title": "Step 7: Designing Diagram Panel"}, {"step": 8, "steps_text": "Change RepresentationTo change the numeric representation as shown in figure 5., right click on the numeric box and from the Representation menu change the numeric integer type as shown below:", "step_imgs": ["https://cdn.instructables.com/FG7/SI6U/FJ34CYJG/FG7SI6UFJ34CYJG.LARGE.jpg"], "step_title": "Step 8: Designing Diagram Panel"}, {"step": 9, "steps_text": "Step 1 - Adding Analog Input Function From Functions menu select MCC Icon and choose AlnScFg Input from Analog Input as shown in Fig 6NOTE: To turn on HELP, from the Help menu, choose Show Help . When the mouse is kept on any part of the diagram, a help window will show on the screen. For example the help for \"AInScFg\" is shown as in Fig 7.", "step_imgs": ["https://cdn.instructables.com/F25/L7E9/FJ34CYJD/F25L7E9FJ34CYJD.LARGE.jpg", "https://cdn.instructables.com/FPT/5S9T/FJ34CYJC/FPT5S9TFJ34CYJC.LARGE.jpg"], "step_title": "Step 9: Designing Diagram Panel"}, {"step": 10, "steps_text": "Step 2 - Add Signal Conditioning functions From the Functions menu select MCC and choose ToEng from Signal Conditioning as shownin Fig 8.Details of ToEng.VI is shown in Fig 9", "step_imgs": ["https://cdn.instructables.com/F1C/3KQX/FJ34CYJB/F1C3KQXFJ34CYJB.LARGE.jpg", "https://cdn.instructables.com/FOC/WTFY/FJ34CYJA/FOCWTFYFJ34CYJA.LARGE.jpg"], "step_title": "Step 10: Designing Diagram Panel"}, {"step": 11, "steps_text": "Step 3 - Add Error Message HandingFrom the Functions menu select MCC and choose ErrMsg from MISC (Calibration & Configuration) as shown in Fig. 10  Fig.11 shows the help for \"Err Msg\" function.", "step_imgs": ["https://cdn.instructables.com/F2N/4SHE/FJ34CYJ8/F2N4SHEFJ34CYJ8.LARGE.jpg", "https://cdn.instructables.com/F1Y/BWSX/FJ34CYJ7/F1YBWSXFJ34CYJ7.LARGE.jpg"], "step_title": "Step 11: Designing Diagram Panel"}, {"step": 12, "steps_text": "Step 4 - Numeric ConstantFrom the Functions menu select Numeric and choose Numeric Constant as shown in Fig 12.Note:'' Enter numeric value 1000 into the constant field. Repeat step 4 and enter value 0.The reason we are doing this is to provide an input to number of samples to collect and also toprovide an input to t0 (trigger time of the waveform). Please see figure 18 for more information.", "step_imgs": ["https://cdn.instructables.com/F8B/M80E/FJ34CYJ6/F8BM80EFJ34CYJ6.LARGE.jpg"], "step_title": "Step 12: Designing Diagram Panel"}, {"step": 13, "steps_text": "Step 5 - Ring Constant From the Functions menu select Numeric and choose Ring Constant as shown in Fig 13.Note: Enter Not Programmable text in the first constant field and then enter numeric value+-10V into the second constant field. To add a second field right click on the box and chooseAdd item after from the menu and then type +-10V.The reason we are doing this is to provide an input to the Range. This is used for collecting the A/D sample. The input voltage range for linear operation, single ended mode for MiniLAB1008 is\u00c2\u00b110Vmax.", "step_imgs": ["https://cdn.instructables.com/FUJ/CVG9/FJ34CYJM/FUJCVG9FJ34CYJM.LARGE.jpg"], "step_title": "Step 13: Designing Diagram Panel"}, {"step": 14, "steps_text": "Step 6 - Build WaveformFrom the Functions menu select Waveform and choose Build Waveform as shown in Fig 14.The reason we are building our own waveform is that we need to customize the x-axis scaling. Changing the X-axis to display Time would help us to visualize the graph in a meaning full manner. Once you insert the build waveform component drag the middle end to make it look as shown in the yellow box below:Note: Select the Position/Size cursor from the Tools palette in order to drag and increase the middle end.The help for Build Waveform is shown in Fig 15.", "step_imgs": ["https://cdn.instructables.com/F7A/FIA7/FJ34CYJL/F7AFIA7FJ34CYJL.LARGE.jpg", "https://cdn.instructables.com/FM2/3K4X/FJ34CYJF/FM23K4XFJ34CYJF.LARGE.jpg", "https://cdn.instructables.com/FCG/JVXE/FJ34CYJK/FCGJVXEFJ34CYJK.LARGE.jpg"], "step_title": "Step 14: Designing Diagram Panel"}, {"step": 15, "steps_text": "Final Step - Connecting the boxes At this point it is important to understand the tool bar. The tool bar is used for choosing different tools. Fig. 16 gives a tool bar description.While designing a diagram remember the following rules:For any Function or sub-VI the inputs to it are always to the left and the outputs are always to theright. To look at all the connections, go to the Help menu and choose \"Show Help\".With Help turned on, as you move your editing tool on a function/sub-VI the help screen will pop up. When the wire tool is placed over a function or a sub-VI, the terminals on the functions light up with the connections highlighted. This makes it easy to connect the wire to appropriate terminals.If the connections between two functions/sub-VIs are incompatible, then a dotted (-----) line will appear between the connections rather then a solid line. This means that the wire connection is carrying incompatible data (e.g. an array to a number or a cluster to an array). Check the connections again with the \"Help\" screen or by looking at Fig 18.Using the wire tool , connect the appropriate controls to the sub-VI as shown in Fig 18. Connect the graphing indicator on towards the end of your construction. When your implementation is complete, the tool bar will show the status of the VI. As said before if a connection is bad or is not appropriate, it will show on the diagram with a broken line. If the terminals are not connected appropriately, the tool bar will display the status as shown in Fig 17.", "step_imgs": ["https://cdn.instructables.com/FWT/19C9/FJ34CYJJ/FWT19C9FJ34CYJJ.LARGE.jpg", "https://cdn.instructables.com/FPL/L1WL/FJ34CYJI/FPLL1WLFJ34CYJI.LARGE.jpg"], "step_title": "Step 15: Designing Diagram Panel"}, {"step": 16, "steps_text": "Final Step On completion and if the wiring is correct, the diagram should look like the one shown in Fig. 18.There are some additional optional components and the wiring you see in the diagram:After connecting all the wires as shown in Fig.18, proceed to the front panel and fill in the appropriate information on the front panel as described below:Testing Low & High Channel as 0 for Channel control. Adjust your function generator to output 100 Hz, 2v pp sine wave signalDepending on the frequency of the input waveform, enter an appropriate sampling frequency number.The number that you enter should be at least twice the frequency of the input waveform.In the Count, put the same number as the Sample rate.After entering the appropriate information, click on the right arrow  as shown in fig.16 below to begin acquiring data.If the information entered was correct the collected signal will appear on the front panel.As you may have noticed, the data acquisition is done only at the time of clicking the right arrowTo do a continuous data acquisition click on the loop arrows and the data acquisition will continue until STOP button is pressed.THE ENDWritten by Tariq Naqvi", "step_imgs": ["https://cdn.instructables.com/FWT/19C9/FJ34CYJJ/FWT19C9FJ34CYJJ.LARGE.jpg", "https://cdn.instructables.com/FFW/55A6/FJ34CYJH/FFW55A6FJ34CYJH.LARGE.jpg"], "step_title": "Step 16: Designing Diagram Panel"}], "channel": "Software"}, {"category": "technology", "description": "Published on Aug 23, 2014This project will explain to you:Multimeter calibration span VS meter failure. Basic knowledge required to perform a meter test. General lab resources needed for a quick measurement test. Multimeter Reference Test Box.you can watch the movie in bellow link:you can continue to part 2 in below link:https://www.instructables.com/id/Multimeter-Referen...", "title": "Multimeter Reference Test Box Part 1", "url": "https://www.instructables.com/id/Multimeter-Reference-Test-Box-Part-1/", "section": "technology", "steps": [{"step": 1, "steps_text": "", "step_imgs": [], "step_title": "Step 1: "}], "channel": "Electronics"}, {"category": "technology", "description": "In this Instructable, a test plan was created to see if a sonar range finder is able to detect is a laptop is open or not. There will be instructions on how to create the sonar range finder, how to program, calibrate, and then test it. ", "title": "Sonar Range Finder", "url": "https://www.instructables.com/id/Sonar-Range-Finder/", "section": "technology", "steps": [{"step": 1, "steps_text": "In this test plan, you will need a couple items. The full Arduino is displayed above, but only a few things will be needed:- Arduino Uno Microcontroller- Laptop- Ruler- 4 1-stranded jumper wires- Sonar Range Finder- USB cable to connect the Arduino to the computer- Notebook", "step_imgs": ["https://cdn.instructables.com/FS5/G6D3/JR6OD92E/FS5G6D3JR6OD92E.LARGE.jpg"], "step_title": "Step 1: Gather Your Materials"}, {"step": 2, "steps_text": "Follow the images above to correctly connect the jumper wires to the correct pins:- On the sonar range finder itself, there are four prongs to place the wires. As seen in the first diagram, each prong and wire should correlate with a specific placement on the Arduino Uno Microcontroller.- The second picture shows the wires in their respective places (Due to an error, extra wires are also connected to the Microcontroller, but only focus on the ones that are part of the first diagram).", "step_imgs": ["https://cdn.instructables.com/FTR/Z7QZ/JR6OD96W/FTRZ7QZJR6OD96W.LARGE.jpg", "https://cdn.instructables.com/FU6/LPAF/JR6OD97F/FU6LPAFJR6OD97F.LARGE.jpg"], "step_title": "Step 2: Putting the Pieces Together"}, {"step": 3, "steps_text": "Follow the code above to properly program the Arduino. The input and output variables correlate to the pins and these are where the data is taken. Values taken from this data can be accessed using the viewfinder on the Arduino Editor, but they will look like random values since the voltage values have not been calibrated with inches yet. ", "step_imgs": ["https://cdn.instructables.com/F25/VQXT/JR6OD9HY/F25VQXTJR6OD9HY.LARGE.jpg"], "step_title": "Step 3: Programming"}, {"step": 4, "steps_text": "In order to turn the random range of variables into workable data, they need to be calibrated. To do this, the ruler and a notebook will be used. The chart above shows a range of sensor values at different inch values (at increments of 2 inches).To do this, place the sonar range finder at 0 inches on the ruler. Place the notebook on top of 2 inches as if it is a wall. Record the voltage values given. Move the notebook to 4 inches in the same position. Record the value again. Continue doing this until you have reached 12 inches. When you are done, put all of the values into a chart like the one seen above. ", "step_imgs": ["https://cdn.instructables.com/FB9/526V/JR6OD9TU/FB9526VJR6OD9TU.LARGE.jpg"], "step_title": "Step 4: Calibrating the Values"}, {"step": 5, "steps_text": "When making this graph, I averaged the range of values for each x-value (distance). The line of best fit can be seen on the graph. By inputting the table values into Excel, you are able to create a graph from the values. To do so, highlight the values you want to use and then select the line graph image to create a graph from these values. Then, place the line of best fit in by selecting a data point and selecting \"linear\" as an option to display on the graph. ", "step_imgs": ["https://cdn.instructables.com/FI7/KGQR/JR6ODA2R/FI7KGQRJR6ODA2R.LARGE.jpg"], "step_title": "Step 5: Creating the Calibration Line"}, {"step": 6, "steps_text": "By using the chart and graph, you are able to determine if the laptop is open or closed and how far it is as well! As could be seen in the first video, when the computer is closed, the sensor values are completely random and going into the high thousand values. They are flying randomly and do not correlate to any specific range of values. The second video shows the values when the laptop screen is open. When the sensor values are viewed, they are within a specific range and the distance to the sonar range finder could be seen as between 4 and 6 inches away. ", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 6: Testing It!"}], "channel": "Arduino"}, {"category": "technology", "description": "In 2012, Annelies Rollez, Cesar Vandevelde and Justin Couturon, designed a left hand cameragrip for Barts (Grimonprez) digital camera. We reviewed the design and parametrized it so it can be made in a flexible production proces. This way the left cameragrip can be custom-made to the handsize of the user and the type of camera at a reasonable price.We designed a simple system to measure parameters of the users camera. Moreover, we also measure the hand lenght of the user. This data is then imported in a CAD-model. It generates the necessary files to produce the parts with flexible production methods, such as 3d printing and lasercutting. We also tried to translate the original idea, a custom made ergonomic grip,  to a simple proces where the shape is 3d scanned. However it requiers specialized technology and knowledge to translate this raw data to a usable model. This raises the price of the grip substantialy. Future versions of software like Siemens NX promise automatic importing of raw scan data so maybe in the near future this will be viable concept.Original project blog", "title": "D4E1 Left Handed Camera Aid. Advanced Version.", "url": "https://www.instructables.com/id/D4E1-Left-Handed-Camera-Aid-Advanced-Version/", "section": "technology", "steps": [{"step": 1, "steps_text": "Purchase the required components;3 bolts; sunken with a rounded head M4x10 (DIN 7046-2, F, M4x10)  3 lock nuts; M4 (DIN985, 8, M4)  1 self tapping screw; rounded head (DIN 7049, A, 4,2x13)   1 2.5mm stereo Mini-jack (check camera for compatibility)   1 Miniature on/off switch (R1396 SPST) 1 Impulse switch on/off (532.000.007 V/DC 0.01A)   1 Camera screw (hama 15mm 5131)", "step_imgs": ["https://cdn.instructables.com/FJA/BT1V/JI0JXSU0/FJABT1VJI0JXSU0.LARGE.jpg", "https://cdn.instructables.com/F48/ITKM/JI0JXSTZ/F48ITKMJI0JXSTZ.LARGE.jpg", "https://cdn.instructables.com/FOW/5GV9/JI0JXSU1/FOW5GV9JI0JXSU1.LARGE.jpg", "https://cdn.instructables.com/FVZ/MBO5/JI0JXSU2/FVZMBO5JI0JXSU2.LARGE.jpg"], "step_title": "Step 1:  Standard Components - Aquisition of Materials."}, {"step": 2, "steps_text": "We begin by producing the measuring tool.print the 'meettools.ai' file onto paper or carboard and cutting these with scissors or and exacto knife. If you want a clean tool lasercutting is a better option. Fold the tool on the blue or engraved lines, apply glue or tape on the meeting edges. Open the 'matencamera.xls' file and follow the provided instructions.", "step_imgs": ["https://cdn.instructables.com/F9G/R6FV/JI0JXSU3/F9GR6FVJI0JXSU3.LARGE.jpg", "https://cdn.instructables.com/FZ6/UTJB/JI0JXSU4/FZ6UTJBJI0JXSU4.LARGE.jpg", "https://cdn.instructables.com/FOO/52QZ/JI0JXSRY/FOO52QZJI0JXSRY.LARGE.jpg"], "step_title": "Step 2:  Measuring Device and Input of Dimensions"}, {"step": 3, "steps_text": "In this part we will go trough the steps necessary to make, 3Dscan and utilise a custom handle.Shaping of the handle:Prepare the moddeling clay by kneading till it's soft. pre shaping it a bit.  Softly press the clay against the side of the camera and make the bottom flush with the camera.   Let the user grasp the handle completely.  Softly press the fingers into the shape, gripping the handle.  Check shape for extreme irregularities, smoothen details where desired.  3D scan the shape and save the file for later usePrepare 3D scan:Scan the custom handle using a 3D scanner.  For this prototype we utilised a smartphone app called SCANN3D, this is a subscription based app available in the google play store for android devices.  Before scanning apply lines along the surface and contours of the clay model, this to facilitate recognition points for the scanner.  Follow the tips as provided by the software and use it to make a scan with high detail, the \"ultimate\" scan setting.  Export the file in .STL formatImporting and modifying the 3D file:transforming raw 3D scans into workable 3D models is no easy feat, some self study will be required to be able to accomplish this. The fastest and easyest way is to contact a proffesional, these services cost around \u20ac150.Future versions of the Siemens NX cad software we use should enable this.Overview workflow:Import 3D file into meshlabs. (meshlabs is open source, you can find it here.  http://www.meshlab.net )  Cut away unnececary parts.  Close holes and gaps using the repair functions.  Apply first smoothing.  Export as .STL file.  Import this file into Siemens NX as a JT model.  Close up any remaining holes and gaps.  Scale the model according to reference sizes.  Smoothe the object multiple times before converting to an NX model.  Use 'offsetsurface' to gain a solid shape.  Apply tooling to the solid.", "step_imgs": ["https://cdn.instructables.com/F4S/BCAK/JI0JXSQF/F4SBCAKJI0JXSQF.LARGE.jpg", "https://cdn.instructables.com/F62/S5ND/JI0JXSQG/F62S5NDJI0JXSQG.LARGE.jpg", "https://cdn.instructables.com/F1K/DKQ9/JI0JXSQP/F1KDKQ9JI0JXSQP.LARGE.jpg", "https://cdn.instructables.com/F70/UCJ6/JI0JXSQQ/F70UCJ6JI0JXSQQ.LARGE.jpg", "https://cdn.instructables.com/F13/48PO/JI0JXSQZ/F1348POJI0JXSQZ.LARGE.jpg", "https://cdn.instructables.com/F24/Q95E/JI0JXSRC/F24Q95EJI0JXSRC.LARGE.jpg", "https://cdn.instructables.com/FCT/E1LR/JI0JXST6/FCTE1LRJI0JXST6.LARGE.jpg", "https://cdn.instructables.com/FQH/ZYAN/JI0JXSTH/FQHZYANJI0JXSTH.LARGE.jpg", "https://cdn.instructables.com/FTC/Q4X9/JI0JXSRD/FTCQ4X9JI0JXSRD.LARGE.jpg"], "step_title": "Step 3: Create the Custom Handle Model"}, {"step": 4, "steps_text": "Launch the Siemens NX CAD software suite and load the file 'assembly_simple.prt'.   Press CTRL + E to open the Expressions panel.   Press the 'update for external change' button to load the values and press OK.   Reload the 'Beugel' and the 'riembeugel' components in the assembly navigator to the left of the screen.right click > close > reopen part.   Save the Assembly; click 'File > Save > All'.   Export the 'handgreep' and 'knopcilinder' as an STL file; 'File > Export > STL'.Click the handle and specify the desired location and filename.Repeat step 7 for the 'knopcilinder' (model1.prt).   Open the 'lasercutdrawings.prt' file and update the dimensions by clicking the clock icon in the part navigator.    Export the handle AND knopcilinder as a DWG file; 'File > Export > STL'. Specify the desired file location and filename, export the file as a 2D/DWG/layout.", "step_imgs": ["https://cdn.instructables.com/FGX/PQI8/JI0JXSU7/FGXPQI8JI0JXSU7.LARGE.jpg", "https://cdn.instructables.com/FHO/0VOJ/JI0JXSU8/FHO0VOJJI0JXSU8.LARGE.jpg", "https://cdn.instructables.com/FHT/JT6C/JI0JXSUD/FHTJT6CJI0JXSUD.LARGE.jpg", "https://cdn.instructables.com/F01/XW9S/JI0JXSKN/F01XW9SJI0JXSKN.LARGE.jpg", "https://cdn.instructables.com/F53/6CBY/JI0JXSSS/F536CBYJI0JXSSS.LARGE.jpg", "https://cdn.instructables.com/F73/YX5N/JI0JXST4/F73YX5NJI0JXST4.LARGE.jpg", "https://cdn.instructables.com/F92/PKYL/JI0JXSLV/F92PKYLJI0JXSLV.LARGE.jpg", "https://cdn.instructables.com/F75/14LY/JI0JXSSJ/F7514LYJI0JXSSJ.LARGE.jpg", "https://cdn.instructables.com/FJI/53A8/JI0JXSM8/FJI53A8JI0JXSM8.LARGE.jpg"], "step_title": "Step 4:  Generate the 3D and Lasercut Files"}, {"step": 5, "steps_text": "1: Check if all the components are accounted for.3 bolts; sunken rounded head 3 lock nuts1 self tapping screw 1 2.5mm mini jack (or suitable model depending on camera) 1 miniature on/off press switch 1 Impulse switch 1 camera screw 3D printed handle 3D print 'knopcilinder' Metal 'beugel' lasercut Metal 'riembeugel' lasercut A piece of heat shrink tube and 3x20 cm's of fine electrical wire (1 black and 2 colored ones prefered). 2: Collect tools.Screwdriver matching the chosen screwhead type. Metal plate bending machine. (vise and hammer will work but won't give a clean result) Wirecutter Soldering Iron and wire Hotglue gun, or appropriate adhesive. 3: Bend the 'riembeugel' 90\u00b0 on the engraved line.4: Montage. Mount the 'riembeugel' in the handle with the self tapping screw. Mount the brace (bottom plate) onto the 3D printed handle with the 3 sunken bolts and lock nuts.5: Soldering. Cut up the wires into 10cm pieces, solder these wires onto the connections of the buttons as shown in the image. Finish with heat shrink. 6: Glue the Impulse switch into the 3D printed 'knoppen-cilinder' as shown. 7: assemble components. Slide the 'knoppencilinder' with the impulseswitch into the hole present on the handle. Make sure the wires run trough the guiding hole protruding into the cavity below.Press the Miniature switch into the 'knopcilinder' making sure the wires pass trough aswell.8: Solder the wiring onto the minijack plug as shown in the schematic.", "step_imgs": ["https://cdn.instructables.com/F3R/BNPL/JI0JXSRP/F3RBNPLJI0JXSRP.LARGE.jpg", "https://cdn.instructables.com/FDM/COUT/JI0JXSN6/FDMCOUTJI0JXSN6.LARGE.jpg", "https://cdn.instructables.com/FXJ/C5TL/JI0JXSNF/FXJC5TLJI0JXSNF.LARGE.jpg", "https://cdn.instructables.com/F3Z/1LRZ/JI0JXSSA/F3Z1LRZJI0JXSSA.LARGE.jpg", "https://cdn.instructables.com/FJ4/G525/JI0JXSNZ/FJ4G525JI0JXSNZ.LARGE.jpg"], "step_title": "Step 5:  Assembly"}, {"step": 6, "steps_text": "Open the latch and plug in the mini-jack. Slide the 'riembeugel' into the brace on the camera. Tilt the handle downwards locking in the 'riembeugel'. Tilt until the bottom brace hits the camera bottom. Screw in the camera screw fixating the bottom brace to the camera. Adjust the gap between the camera and handle untill it fits snuggly.This is adjustable using the top screw.", "step_imgs": ["https://cdn.instructables.com/FEE/SYUH/JI0JXSO5/FEESYUHJI0JXSO5.LARGE.jpg", "https://cdn.instructables.com/F9S/WFXG/JI0JXSOU/F9SWFXGJI0JXSOU.LARGE.jpg", "https://cdn.instructables.com/FD1/T3Z5/JI0JXSPW/FD1T3Z5JI0JXSPW.LARGE.jpg", "https://cdn.instructables.com/FPP/C8BD/JI0JXSOX/FPPC8BDJI0JXSOX.LARGE.jpg", "https://cdn.instructables.com/FCP/I16C/JI0JXSPI/FCPI16CJI0JXSPI.LARGE.jpg"], "step_title": "Step 6:  Mounting the Handle Onto the Camera."}, {"step": 7, "steps_text": "The required files to finish your cad model.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 7: CAD Files"}], "channel": "Assistive Tech"}, {"category": "play", "description": "For all of us out there that just needs to measure their rocket fuel right now and can't wait. Or if you're like me who can't imagine spending money on a sale you won't use 99.9999% of the time.  Here is how you can build one using your MacGyver skills and ordinary office supplies. ", "title": "How to Make a Gram Scale Using Office Supplies", "url": "https://www.instructables.com/id/How-to-make-a-gram-scale-using-office-supplies/", "section": "play", "steps": [{"step": 1, "steps_text": "Binder\rRuler\r2 sheets of paper\rstapler\rpaperclip\rstring\rtape\r2 large books\rcoins\r", "step_imgs": [], "step_title": "Step 1: Parts List"}, {"step": 2, "steps_text": "Wrap the spring around your ruler 3 times. Measure out an extra 5 cm (2 inches) then cut. If you have nylon string, be sure to heat the ends so they don't fray.\rTie the too ends together to make a loop,\rCenter this loop at the middle of the ruler.\rThis point will be your fulcrum, \rIf you hold the string the ruler should balance and sit horizontal. \rThe reason you wrap the string is to keep the ruler from slipping out when it tilts. \r", "step_imgs": ["https://cdn.instructables.com/FO3/YHDJ/F5R8IU4X/FO3YHDJF5R8IU4X.LARGE.jpg", "https://cdn.instructables.com/F80/81QT/F5R8IU53/F8081QTF5R8IU53.LARGE.jpg"], "step_title": "Step 2: Fulcrum"}, {"step": 3, "steps_text": "Partially open the binder and sit it on the desk standing up.\rBend out the paper clip, and clip it on to the top of the binder\rWith the paper clip bent out it should make a nice hook to attach items too. \rNow hook the string onto the binder. Mess with the string until the ruler wants to be horizontal when it stops moving. (In physics we call this a stable equilibrium.)  \rWhen you find your sweet spot tape it down.", "step_imgs": ["https://cdn.instructables.com/FY4/34T4/F5R8IU4W/FY434T4F5R8IU4W.LARGE.jpg", "https://cdn.instructables.com/FF7/BTD2/F5R8IU55/FF7BTD2F5R8IU55.LARGE.jpg"], "step_title": "Step 3: Building Your Stand"}, {"step": 4, "steps_text": "If you have a 3hole punch, then 3 hole punch both sheets of paper. If you do not, just poke a hole with a pencil when it comes time, at the end of this step.\rFold your paper in half length wise.\rFold about a cm, or half inch one the open end.\rStaple this end closed.\rThe side with the holes punched, that your top side,\rFold about a cm, or half inch on the bottom end,\rStaple this end closed also.\rNow you should have a nice pocket to put stuff in. with holes at the top end, If you don t have holes make two holes at the open end to place the string. \rBe sure to use the same number of staples on both sheets of paper. \r", "step_imgs": ["https://cdn.instructables.com/F1L/9UPX/F5R8IU51/F1L9UPXF5R8IU51.LARGE.jpg", "https://cdn.instructables.com/FI5/DGYE/F5R8IU50/FI5DGYEF5R8IU50.LARGE.jpg"], "step_title": "Step 4: Making Your Trays"}, {"step": 5, "steps_text": " Now cut about 43 cm (17 inches) of string, \rTread it through the hole on top, \rMake a loop using a square knot, or whatever knot you like just make sure it doesn't untie, and you have a loop that is about 42.5 cm in circumference. \rLoop and hang both \"trays\" at the far end of your ruler. Make sure they are equal distance apart.\rWhen you get it tape it down. \rMake sure the string hangs at a precise distance. If it doesn't you will not get a good reading.\rIn one of the photos the tray is hanging incorrectly, can you spot it?\r", "step_imgs": ["https://cdn.instructables.com/FV6/3G1A/F5R8IU4Z/FV63G1AF5R8IU4Z.LARGE.jpg", "https://cdn.instructables.com/FBJ/7UA1/F5R8IU4Y/FBJ7UA1F5R8IU4Y.LARGE.jpg"], "step_title": "Step 5: Hanging Your Trays"}, {"step": 6, "steps_text": "Place two large intelligent looking books under the binder to allow your scale some room to move.\rAnd your done.\rTrays like this measure unknown weight against a known weight. Most of us don't own 1, 5, or 10 gram masses. But we all have coins. And US coins have a weight tolerance to about a hundredth of a gram. Which is more than we need for this project. \rUS pennies are 3.1 grams, those printed after 1982 are 2.50 grams. \rQuarter weighs 5.67 grams\rDime 2.27 grams\rnickel 5.00 grams\rNow I don't know if the mass of the other coins are date dependent, like the penny. Because of this I prefer to use pennies.\rFrom here I'm sure you can figure out the rest, measure out your rocket fuel and mediate on your MacGyver skill. Have fun!\r(I don't know why this photo is slanted, it's really a feature)", "step_imgs": ["https://cdn.instructables.com/F7N/9DI3/F5R8IU4U/F7N9DI3F5R8IU4U.LARGE.jpg"], "step_title": "Step 6: Measure"}, {"step": 7, "steps_text": "You can get more precise readings, by using smaller string, long ruler, and making better measurements.  If you don't mind doing some math you can easily scale up this project to measure just about anything. By using Boom stick and measuring tape, instead of a ruler, plastic store bags as your \"trays\", and an unopened bottle of ketchup for your known mass(or what ever unopened condiments you prefer). Printed on the label of most foods is it's weight, just remember this is only an approximate weight. Just move your unknown mass and your bottle of ketchup back and forth along the boom stick until you find when they balance. Then remember m1 x d1=m2 x d2  mass times distance of item 1= mass times distance of item 2m1= mass of the unknown objectm2= mass of the bottle of ketchupd1= distance of the unknown mass to the center string(fulcrum)d2= distance of the bottle of ketchup to the center string(fulcrum)This method looks like crap, but it works. I used this method to measure items I was selling on eBay. ", "step_imgs": [], "step_title": "Step 7: Dig Deeper"}], "channel": "Office Supplies"}, {"category": "play", "description": "In this Instructable, the first in a series using the book How to Fossilize Your Hamster And Other Amazing Experiments for the Armchair Scientist as inspiration, we use a bar of chocolate to measure the speed of light. What you'll need: A bar of chocolate, actually, get three, that way you know you'll actually get to do the experiment! (The longer the bar of chocolate, the better) A microwave A metric ruler You Safety Glasses (not that this is dangerous, it just adds awesome factor to any experiment) -Bradley Powersbpowers.org", "title": "How to Measure the Speed of Light... Using Chocolate!", "url": "https://www.instructables.com/id/How-To-Measure-the-Speed-of-Light-Using-Chocola/", "section": "play", "steps": [{"step": 1, "steps_text": "You know you want to.  You don't have to smear it all over your face though.  In fact, I don't recommend it.", "step_imgs": ["https://cdn.instructables.com/FB8/ZKVP/FHEJ04AM/FB8ZKVPFHEJ04AM.LARGE.jpg"], "step_title": "Step 1: Eat Some Chocolate!"}, {"step": 2, "steps_text": "Remove the rotating tray thingy from your microwave, we don't want the chocolate to cook evenly.", "step_imgs": ["https://cdn.instructables.com/FQU/IPMN/FHEJ04AT/FQUIPMNFHEJ04AT.LARGE.jpg"], "step_title": "Step 2: To the Microwave!!!"}, {"step": 3, "steps_text": "Now, place the bar of chocolate in the microwave.  Turn on the microwave, and wait for pools of chocolate to form, then turn off the microwave.  It should take about 40 seconds.  I'll wait.  Don't overcook the chocolate, it doesn't smell so good.  ", "step_imgs": [], "step_title": "Step 3: Zap the Chocolate"}, {"step": 4, "steps_text": "Now, take out the chocolate, and measure from \"hot spot\" to \"hot spot\".  A \"hot spot\" is where the chocolate is starting to melt, or is more melted than the rest of the chocolate.  Write the measurement down.  Seriously.  Do it.", "step_imgs": ["https://cdn.instructables.com/FG4/92TG/FHEJ04BC/FG492TGFHEJ04BC.LARGE.jpg"], "step_title": "Step 4: Measure"}, {"step": 5, "steps_text": "Ok, now that we know the distance between hot spots, we'll use some math, and some science, and some more math to figure out the speed of light.  First, the distance that we measured represents the half-wavelength of the waves being emitted by the microwave (according to the book).  To find the wavelength of the microwaves, we multiply by two.  In my example, that gives us a wavelength of 7.628 cm * 2 = 15.256 cmNow, since the speed of light is equal to the wavelength times the frequency, we can figure out the speed of light.  But we don't know the frequency of the microwaves.  Apparently, most microwaves operate at 2.45 gigahertz, or 2,450,000,000 Hz.  So, we take the the product of the wavelength and the frequency:15.256 cm * 2,450,000,000 Hz =  37,377,200,000 cm/s which, given that we are doing this in a kitchen (and a small error our measurements are multiplied by 4,900,000,000), is shockingly close to the actual speed of light, which is 29,979,245,800 cm/s, or, as it is typically defined, 299,792,458 meters per second.  ", "step_imgs": [], "step_title": "Step 5: Now for the Mathy Stuff."}, {"step": 6, "steps_text": "All good scientists know that repeating an experiment is good for making sure your results are statistically relevant, so do it again.  And again.  Eat some chocolate.  Have Fun!\r", "step_imgs": ["https://cdn.instructables.com/FB8/ZKVP/FHEJ04AM/FB8ZKVPFHEJ04AM.LARGE.jpg"], "step_title": "Step 6: Iterate"}], "channel": "Pranks and Humor"}, {"category": "play", "description": "\nMake your own Steampunk Explorer Toy Set for your family and friends. It\u2019s the holiday season and my family LOVES to make gifts for one another. It's easy on the budget, it's sentimental, and it's fun to make! I hope you enjoy this tutorial. This project was inspired by my cousin Alejo who is an adventurer in spirit and loves to play make believe.\nI'm also selling some fun items on Society6:Iphone Skin \u00a0Iphone CaseArt Prints \u00a0\nEnjoy!Telescope was made with a Tiddle Winks game packaging. Essentially, you will need:\n- 1 long cardboard tube (similar to a toilet paper or napkin holder tube) * size can vary\n- 1 shorter cardboard tube smaller in size\u00a0 (size can vary)\n- 1 Kates Paperie shopping bag or 1 sheet of card stock\n- Measuring tape\n- Ruler\n- Glue gun\n- 1 medium sized long screw\n- 2 plastic caps that fit the end of the telescope (included in Tiddle Winks game)\n- Black, Copper, Silver, and yellow acrylic paints\n- Exacto knife\n- Cutting mat\n- Paint brushesSteampunk prints:\n- Laser printer\n- Blank white paper 8.5\" x14\" or 8.5\" x 11\"\n- Baking sheet\n- 2-3 breakfast tea bags\n- Small bowl\n- *Sketches or images that you want to\u00a0stain (photos, maps, structural plans, letters, etc.)\n*I have provided some illustrations to play with in this tutorial.\np.s. My lovely model is my good friend and co-worker, Ayaka Ito.", "title": "Steampunk Explorer Toy Set: Telescope and Steampunk Prints", "url": "https://www.instructables.com/id/Steampunk-Explorer-Toy-Set-Telescope-and-Steampun/", "section": "play", "steps": [{"step": 1, "steps_text": "\r\nBegin by looking for materials that resemble the shape of a telescope. I found a $12 Tiddly Winks game at Kate's Paperie. The long slender shape of the tube seemed perfect for the job. It also came with three smaller tubes and a variety of chips in a small bag. I did not use the chips, but I'm sure I'll find another use for them. The smaller tubes, however, turned out to be perfect for assembling the telescope's extension piece. The game also included caps for each tube. I kept these plastic inserts to create an eyepiece on one end of the telescope and a lens cap for the other. See photographs for reference.", "step_imgs": ["https://cdn.instructables.com/F57/3FV7/GHFK85XY/F573FV7GHFK85XY.LARGE.jpg", "https://cdn.instructables.com/FHB/HBSW/GHFK85XX/FHBHBSWGHFK85XX.LARGE.jpg", "https://cdn.instructables.com/F5M/6UKT/GHFK85Y8/F5M6UKTGHFK85Y8.LARGE.jpg"], "step_title": "Step 1: Telescope: Find Your Materials"}, {"step": 2, "steps_text": "Preparing Large Tube: \r\n1. Take the large tube and remove the black plastic caps from both sides.\r\n2. Take one black plastic cap and cut a large hole in the center with an Exacto knife.\r\n3. Insert the black plastic cap with circular cutout back into the tube.Preparing Smaller Tube:\r\nGlue two small tubes to create one longer tube. You will be gluing the two white caps together to connect the two tubes.\r\n1. Remove the white caps.\r\n2. Cut out the center of each white cap.\r\n3. Replace both white caps.\r\n4. Place Gorrilla Glue on the surface area of the white cap.\r\n5. White cap to white cap, fasten both tubes together. Now, you have your 2nd tube.Creating the eyepiece:\r\n1. Take the second black plastic cap from the large tube and cut out a circle from the center. (Note: The diameter of the cutout should be smaller than the 1st black cap. This cap will serve as the telescope's eyepiece.\r\n2. Place the this cap onto the smaller tube.Cutting a slit into your large tube:\r\nThis slit will be used to connect your larger tube to your smaller tube.\r\n1. Using your measuring tape, measure the length of the tube from the exposed edge to the edge of the black cap. Do not include the cap size in your measurement.\r\n2. Now, put your small tube aside. Get your large tube and mark a slit a .5\u201d away from the edge of tube. The slit should be on the opposite end of the plastic cap. The length of your slit should be .25\u201d less than your measurement.\r\n3. Once you have marked off your tube with a ruler, use your Exacto knife to make the cut.", "step_imgs": ["https://cdn.instructables.com/F4H/C8JX/GHFK85ZD/F4HC8JXGHFK85ZD.LARGE.jpg", "https://cdn.instructables.com/FZS/LQPL/GHFK85ZE/FZSLQPLGHFK85ZE.LARGE.jpg"], "step_title": "Step 2: Telescope: Preping the Tubes"}, {"step": 3, "steps_text": "\nIt\u2019s time to assemble the telescope. We will add detail first, then piece both tubes together. I will be recycling the Kate\u2019s Paperie shopping bag to add detail and create different textures.Adding textures:\nTime to create an industrial, steampunk look.\n1. Cut off the excess parts of the Kate\u2019s Paperie bag that you will not need. You want to have a flat blank sheet of paper without any creases. You will be using this sheet to create a variety of individual strips.\n2. With your measuring tape, measure the circumference of the large tube. This measurement will be the length of your strip. This strip will be used for decorating the end of your telescope. (See 1st photo for reference).\n3. Using your ruler, mark off the dimensions of your strip on to your paper. Use the measurement above for the length of your strip. And make your strip 1.5\u201d wide.\n4. Now, you are going to cover the smaller tube. With your measuring tape, measure the circumference of the small tube. This measurement will be the length of your strip.\n5. Using your measuring tape again, measure the length of the tube from the exposed edge to the edge of the black cap. Do not include the cap size in your measurement. This measurement will be the width of your strip.\n6. Using your ruler, mark off the length and width of your strip onto your card stock.\n7. Cut out your strips.\n8. Glue strips onto your tubes with a glue gun or another heavy duty glue.\n9. Now, you will create a strip to hide the raw edges of your slit. Create a narrow strip that is .5\u201d longer than the slit on your large tube.\n10. Make another strip from card stock with the same dimensions for the opposite side of the telescope. Place this piece on the opposite side of the slit to make your design look symmetrical.\n11. Glue these two strips to your telescope.Adding rivets:\n1. Heat up your glue gun.\n2. Around the edges, add beads of glue. Space the beads of glue evenly to create the illusion of rivets. As you drop a bead of glue into place, keep still for a few seconds for the glue to dry. It's easy for the glue to drip or loose it's shape if you move too quickly. You want the drops to look circular.\nAdd as much detail and texture to your toy as you like. I encourage you to also look around your house for more discarded materials that you can recycle for this project. Create different textures by attaching gears from an old watches and wires from old cell phone chargers.Piecing your telescope together:\n1. Slide the smaller tube into the larger tube. Slide this tube in as far as it can go.\n2. Once your telescope is in its collapsed state, positioned the way you want it.\n3. Insert a screw between the slit and towards the far end of the telescope. Do not screw in all the way. Once screwed in, you should be able use the screw to expand and collapse your telescope.", "step_imgs": ["https://cdn.instructables.com/FWZ/7A4L/GHFK861C/FWZ7A4LGHFK861C.LARGE.jpg", "https://cdn.instructables.com/F1G/EVGM/GHFK860I/F1GEVGMGHFK860I.LARGE.jpg", "https://cdn.instructables.com/F4H/WJ3C/GHFK860G/F4HWJ3CGHFK860G.LARGE.jpg", "https://cdn.instructables.com/FJC/Y9Z9/GHFK860F/FJCY9Z9GHFK860F.LARGE.jpg", "https://cdn.instructables.com/FDI/LOHG/GHFK860E/FDILOHGGHFK860E.LARGE.jpg", "https://cdn.instructables.com/FT3/RN91/GHFK862G/FT3RN91GHFK862G.LARGE.jpg", "https://cdn.instructables.com/F1K/KQ3U/GHFK862H/F1KKQ3UGHFK862H.LARGE.jpg", "https://cdn.instructables.com/FF4/5Q6B/GHFK862F/FF45Q6BGHFK862F.LARGE.jpg", "https://cdn.instructables.com/FWZ/7A4L/GHFK861C/FWZ7A4LGHFK861C.LARGE.jpg"], "step_title": "Step 3: Telescope: Assembling Your Telescope"}, {"step": 4, "steps_text": "\r\n\tPainting your telescope is very simple and, personally, my favorite part. You will need paint brushes and acrylic paints, as well as a surface that you can paint on.\r\n\t1. First, paint your telescope completely black. This will create an even coat for your telescope. Cover every nook and cranny!\r\n\t2. While you wait for your paint to dry, begin mixing your copper, yellow, silver acrylics together to get the shade of metal you desire. For this tutorial, I used one part copper, one part silver, and a dab of yellow to create a bright, metallic color. I suggest mixing enough paint that will cover the entire telescope because it\u2019s difficult to create the same hue twice.\r\n\t3. Once the first coat of paint has dried, begin painting your second coat with your metallic mix. Using a dry brushing technique, brush paint lightly over your toy with even strokes. Keep your strokes moving in one continuous direction. To achieve a rusted look, do not fill in all of the spots that your brush will inevitably miss. Let the black coat of paint peek through the second metallic coat. Use less paint where there are crevices to create depth.\r\n\t\u00a0", "step_imgs": ["https://cdn.instructables.com/FIK/XYX7/GHFK8648/FIKXYX7GHFK8648.LARGE.jpg", "https://cdn.instructables.com/FQO/I9X2/GHFK864A/FQOI9X2GHFK864A.LARGE.jpg", "https://cdn.instructables.com/FM4/3HXB/GHFK8649/FM43HXBGHFK8649.LARGE.jpg", "https://cdn.instructables.com/F31/YFM0/GHFK8647/F31YFM0GHFK8647.LARGE.jpg", "https://cdn.instructables.com/FKK/4O9Y/GHFK8646/FKK4O9YGHFK8646.LARGE.jpg"], "step_title": "Step 4: Telescope: Paint Your Toy"}, {"step": 5, "steps_text": "\nCreate your own steampunk influenced prints. In this tutorial, I have prepared a wanted poster, a blue print document, and stationary. Download these three illustrations and print them out at home. You can download them from my flickr, here:\nFor wanted poster: click here\nFor blue print: click here\nFor stationary: click here\n1. Print out all three posters at home. These prints were made to fit on 8.5\"x14\u201d paper. If you do not have 8.5 x14\u201d paper, use 8.5\"x11\u201d paper, select the option \u201cfit to media\u201d to print your posters a at reduced size. Also found in the print settings, select \u201ccrop marks\u201d with a .5\u201d border for easy trimming.\n2. Trim down each poster print with a .5\u201d border.", "step_imgs": ["https://cdn.instructables.com/FNX/LNBF/GHFK865C/FNXLNBFGHFK865C.LARGE.jpg", "https://cdn.instructables.com/F58/GM92/GHFK865B/F58GM92GHFK865B.LARGE.jpg", "https://cdn.instructables.com/FGN/1O9P/GHX7GCTF/FGN1O9PGHX7GCTF.LARGE.jpg"], "step_title": "Step 5: Steampunk Prints: Download Illustrations, Print and Trim"}, {"step": 6, "steps_text": "Staining:\r\n1. Fill a small bowl with water, heat up your water via. microwave for 1:30 min.\r\n2. Place two breakfast tea bags into your bowl of water. Let the tea bags sit in the bath for a couple of minutes.\r\n3. Once your water has changed colors, use a brush to stain your prints. Here, I used the tea bag as my brush. Your prints will become very fragile and easy to rip when wet, so brush over your prints gently. (Note: If your tea bag should bust, don\u2019t worry. Once your papers have dried completely, the tea remnants will come right off.)Adding texture:\r\n1. Rough up the edges while your prints are still wet. Rub your finger along the edges of your prints to create a worn and textured look.\r\n2. Add fold lines to the texture of your paper by gently folding your stained prints. Brush over the fold with your tea bag to accent the crease. Then, open up your paper to it\u2019s original state.\r\n8. Repeat steps 5-7 for each print.", "step_imgs": ["https://cdn.instructables.com/FWB/5UUR/GHX7BM5S/FWB5UURGHX7BM5S.LARGE.jpg", "https://cdn.instructables.com/FFL/F5JO/GHX7NTZU/FFLF5JOGHX7NTZU.LARGE.jpg", "https://cdn.instructables.com/FWU/OXF3/GHX7GCTI/FWUOXF3GHX7GCTI.LARGE.jpg", "https://cdn.instructables.com/F4U/VTF2/GHX7BM5T/F4UVTF2GHX7BM5T.LARGE.jpg", "https://cdn.instructables.com/FD6/JNGD/GHX7BM5V/FD6JNGDGHX7BM5V.LARGE.jpg", "https://cdn.instructables.com/FUI/U9BD/GHX772ML/FUIU9BDGHX772ML.LARGE.jpg", "https://cdn.instructables.com/FM1/T7IB/GHX7GCTK/FM1T7IBGHX7GCTK.LARGE.jpg", "https://cdn.instructables.com/FNS/U83Q/GHX772MM/FNSU83QGHX772MM.LARGE.jpg", "https://cdn.instructables.com/F0Y/YOV6/GHX772MO/F0YYOV6GHX772MO.LARGE.jpg"], "step_title": "Step 6: Steampunk Prints: Stain Your Prints"}, {"step": 7, "steps_text": "\r\nDone! Let your prints dry overnight.", "step_imgs": ["https://cdn.instructables.com/FFT/M4AP/GHX772MS/FFTM4APGHX772MS.LARGE.jpg", "https://cdn.instructables.com/FJF/3PVT/GHX7BM5Y/FJF3PVTGHX7BM5Y.LARGE.jpg", "https://cdn.instructables.com/FAR/IQTH/GHX7NU4W/FARIQTHGHX7NU4W.LARGE.jpg", "https://cdn.instructables.com/FQP/LRMP/GHX772N6/FQPLRMPGHX772N6.LARGE.jpg", "https://cdn.instructables.com/FV9/4124/GHX772N7/FV94124GHX772N7.LARGE.jpg", "https://cdn.instructables.com/FAF/Y0C0/GHX7NU5K/FAFY0C0GHX7NU5K.LARGE.jpg", "https://cdn.instructables.com/FRC/7RFT/GHX772NA/FRC7RFTGHX772NA.LARGE.jpg", "https://cdn.instructables.com/FLY/TLOK/GHX7BM65/FLYTLOKGHX7BM65.LARGE.jpg", "https://cdn.instructables.com/F9Q/JX3D/GHX7BM66/F9QJX3DGHX7BM66.LARGE.jpg", "https://cdn.instructables.com/F3P/LCL8/GHX7GCTT/F3PLCL8GHX7GCTT.LARGE.jpg", "https://cdn.instructables.com/F2V/6GO4/GHX7NUBB/F2V6GO4GHX7NUBB.LARGE.jpg"], "step_title": "Step 7: Steampunk Prints: Let Your Prints Dry"}, {"step": 8, "steps_text": "\nOnce dry, add your own personal touch. Use the stationary to write a letter, create a story about the steampunk robot, or make a treasure map of where to find him.\nThank you for reading my tutorial! I had so much fun making this for you. If you have an imagination and are interested in repurposing materials to make new and interesting things, I would love to hear from you. For more steampunk fun, please see my Steampunk Mr. Potato Head tutorial on instructable.com.\nI'm also selling some fun items on Society6:Iphone Skin\u00a0Iphone CaseArt Prints \u00a0\nEnjoy!\nIf you would like to see more photos of my work, please visit:http://www.flickr.com/photos/saritamarianyc/collections/72157624354891437/http://www.flickr.com/photos/saritamarianyc/sets/72157624366542441/\nand my site, here:http://www.amongmadpeople.com\nThank again! Happy\u00a0Crafting and have a Happy New Year!", "step_imgs": ["https://cdn.instructables.com/FMR/78EG/GHX7NUEE/FMR78EGGHX7NUEE.LARGE.jpg", "https://cdn.instructables.com/FN5/0VXP/GHX7BM70/FN50VXPGHX7BM70.LARGE.jpg", "https://cdn.instructables.com/FLE/VPM4/GHX772OI/FLEVPM4GHX772OI.LARGE.jpg", "https://cdn.instructables.com/F2E/SER7/GHFK85WC/F2ESER7GHFK85WC.LARGE.jpg", "https://cdn.instructables.com/FWI/L5K2/GHFK85W8/FWIL5K2GHFK85W8.LARGE.jpg", "https://cdn.instructables.com/FP8/YZ5A/GHX7NUEO/FP8YZ5AGHX7NUEO.LARGE.jpg", "https://cdn.instructables.com/FSA/YM8Y/GHFK85WA/FSAYM8YGHFK85WA.LARGE.jpg", "https://cdn.instructables.com/F9C/OR5U/GHFK85W9/F9COR5UGHFK85W9.LARGE.jpg"], "step_title": "Step 8: Steampunk Toy Set Complete! Now, Create Your Own Adventure."}], "channel": "Toys"}, {"category": "technology", "description": "A data logger is similar to an oscilloscope, but is used to register data over relatively long periods of time, typically a minimum of many hours or days, instead of a few microseconds. Data loggers can be standalone devices, with their own built in interface (keypads, displays, etc.), or like the Analog Discovery 2, which connects to your computer to record the data via the Waveforms 2015 software. Either way, they can be powerful data collection tools. They are also very simple tools with very few \"moving parts\" so to speak, so this I'ble will be short and sweet.For this Instructable you will need:-Analog Discovery 2*-Waveforms 2015 software- a computer with USB port to run the software*You may also use the original Analog Discovery or the Electronics Explorer Board with Waveforms 2015. There are some slight differences in functionality between the AD1, AD2, and EEBoard, but nothing that will prevent you from following along if you have one of the other tools.", "title": "Using the Data Logger With the Analog Discovery 2", "url": "https://www.instructables.com/id/Using-the-Data-Logger-With-the-Analog-Discovery-2/", "section": "technology", "steps": [{"step": 1, "steps_text": "If you want some help getting your AD2 set up and calibrated, or installing Waveforms 2015, check out this quick start I'ble collection.Once you have your AD2 and Waveforms 2015 all set up, open the Data Logger by clicking on the \"Logger\" button.This will open the Data Logger window.Along the top you'll see the \"File\", \"Control\", and \"Window\" options.Under \"File\" you'll see several options.You can \"Save\" the current data logger settings, or \"Open\" a previously saved project. \"Export\" lets you save the current data logger preview plot data, either as an image of the window in most common formats, e.g. *.bmp, *.jpg, *.tif, etc., or as a data file with the plot window information in either *.csv, *.txt, or *.tdms formats. \"Close Logger\" will close the data logger window. This will not clear the current settings as long as you don't close Waveforms 2015 completely. Just click on the \"Logger\" button again and the window will pop back open with all of the same settings.Under \"Control\", you have access to the tool's Run and Stop commands.\"Window\" lets you switch between any tool windows currently open, the Waveforms 2015 welcome window, or the Help window.Below that, you'll find the data logger controls, both for the channel grid as well as for the plot.All of the channels are loaded into the grid by default, but you can add more instances of the same channels by clicking  .Click   to either delete a single highlighted channel or clear the entire grid.With a channel highlighted, click   to edit the channel, which gives you two option tabs. You can change the channel to observe a different data parameter by clicking the \"Item\" tab.Clicking on the \"Function\" tab allows you to set your own math channel using some basic math functions and one of the 6 predefined channels as a starting point. lets you add minimum and maximum parameters to the grid. These reflect the min/max values currently observable in the data window.Click   to run the data logger. Once the tool is running, this button becomes  , which will stop the data logger. and   determine the sample rate, and by extension how much data/time the plot window will display. By adjusting the two parameters, you can vary the data sample rate from 1 sample every 100 ms for a total of 1 s, all the way up to 1 sample every 1 min for a total of 86,400 mins, which comes out to 60 days.An alternate way to adjust the time/sample rate is provided by clicking  . You can adjust the total number of samples, which will use the value in the \"Update\" box and auto-adjust the time value in the \"History\" box to fit that many samples at the determined rate. You can also adjust the offset, range, and attenuation for C1 and C2. provides another way to export the plot window data as mentioned before.Click   to clear all plot data from the window. Unless you save the data first, it will be unrecoverable. displays the RMS frequency and auto-adjusts according to the value set in the \"Update\" box.The Data Logger tool makes use of the same input channels as the Oscilloscope tool. These are labeled \"1 +/-\" for C1 and \"2 +/-\" for C2 on the AD2 30-pin header. Use of the Data Logger will lock out the Oscilloscope tool.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 1: The Data Logger"}, {"step": 2, "steps_text": "As you can see the Data Logger on the Analog Discovery 2 is a simple to use tool that can collect a significant amount of data, and is also widely adjustable to meet the time requirements of many different systems.As always, thanks for reading. If you have questions, please ask them in the comments below, though PMs are always welcome as well. You just never know when someone else has the same question and that way we can all learn and help each other get better. Have fun building!Also, please check out the Digilent blog where I contribute from time to time.", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 2: That's It!"}], "channel": "Tools"}, {"category": "technology", "description": "Have you ever dreamed of making speed measurements of your crossbow, bow or airgun projectilze?And didn't have any instrument to do that, I have a useful tip for you !After the audio recording of your shoots, open your sound file with Audacity (you may also use audacity to record) :http://audacity.sourceforge.net/?lang=enThe theory is simple : calculate the speed of your projectile by measuring the time between the  shot and the sound produced by impact on target. When I tried the  target was at 10 meters away from me.On this picture, you can see my two shoots, let's make the measurement for the second (it seems to be faster) !", "title": "Projectile Speed Measurement (for Free)", "url": "https://www.instructables.com/id/Projectile-speed-measurement-for-free/", "section": "technology", "steps": [{"step": 1, "steps_text": "First you have to highlight  the two interesting moments (sound of the shot and the sound of the  impact), you can do it by using the selection tool in the tollbar. Once  the zone is selected, you can make zoom on it.", "step_imgs": ["https://cdn.instructables.com/FX4/MKJU/HURHTGHY/FX4MKJUHURHTGHY.LARGE.jpg"], "step_title": "Step 1: Highlight"}, {"step": 2, "steps_text": "Once the zoom is done, you can adjust the selected zone from the begining of the launch to the begining of the impact. Clic on duration in \"begining of the selection\" to have a value in seconds corresponding to the time of flight of the projectile.", "step_imgs": ["https://cdn.instructables.com/FF7/E8LJ/HURHSQM5/FF7E8LJHURHSQM5.LARGE.jpg", "https://cdn.instructables.com/F2E/MEQD/HURHSQM7/F2EMEQDHURHSQM7.LARGE.jpg"], "step_title": "Step 2: Measurement of Duration"}, {"step": 3, "steps_text": "So, now we have the time and the distance. Let's calculate the speed !!!The speed is just a distance by a time like kilometers per hour or miles per hour. Basicly the formula for the speed is :V = D/T With :- V as speed in meters by second (m/s).- D as distance in meters (m).- T as time in seconds (s).Remember, in my case I was at 10 meters from the target. We can read the time elapsed between the shot and the impact : 0.333 seconds then V = 10/0.333 = 30.03 m/s almost 108 km/h !It could be funny to calculate kinetic energy ! Let's do it :Ec = 0.5 * m * V\u00b2 With :- Ec as kinetic energy in Joules (J)- m as mass in kilograms (kg).- V as speed in meters by second (m/s).In my case the arrow's mass is 30 grams then : Ec = 0.5 * 0.030 * 30.02\u00b2 = 13.52 J ! Not bad !I am using units from international system, you are free to use others units to have your speed result in FPS for instance ...Have a value is better than having nothing. This method allows you to calculate an average speed on X meters. The maximum speed reached by your projectile is highter than the value you may found.", "step_imgs": [], "step_title": "Step 3: Some Maths !"}, {"step": 4, "steps_text": "For the aquisition, if you can use good quality microphone, do it for sharper variations. Personnaly I use my netbook's microphone, it works not bad. You can also increase the gain of your microphone in the parameters of your operating system.The sampling is made at 44 kHz (Hi-Fi quality), it gives a precision around 22,7 \u00b5s ! It is probably possible to increase the sampling rate.Make a good zoom allows you to make a good measurement. Be accurate in the selection and in your calcutions.Another thing you can do is to subtract the time that sound makes for come from the target. In my case, I was at 10 meters from the target and my laptop too. The speed of sound is almost 340 m/s. v = d/t then t = d/v ...So it takes 10/340 = 0,029 seconds for the sound to come from the target !Here we can subtract this value to 0.333, we found 0.304 sWe can remake the calculation for the arrow's speed : V = 10/0.304 = 32,89 m/s almost 118 km/h !And for kinetic energy : 16,23 J !To conclude, I hope this method could help you to increase the power of your stuff or adjusting your parameters ... Hope this instructable will be helpful.Thanks for your reading :)Don't hesitate to contact me to report some mistakes or for some questions !Best regards.", "step_imgs": [], "step_title": "Step 4: How to Be More Accurate ?"}], "channel": "Science"}, {"category": "technology", "description": "The following information is a single lesson in a larger Tinkercad project. Check out this and more projects on Tinkercad.Return to Previous Lesson: Ruler - Measuring LengthsLesson Overview:Now we're going to make a cup!", "title": "Measuring Cup - Measuring Volumes", "url": "https://www.instructables.com/id/Measuring-Cup-Measuring-Volumes/", "section": "technology", "steps": [{"step": 1, "steps_text": "In this lesson, we're going to learn how to make a tool for measuring volume! Volume is how much space an object takes up. An object that has length and width and height is taking up volume\u2026like the objects in Tinkercad!  However, volume measures are often for materials that don't have a uniform shape like liquids, powders, grains, and pebbles.InstructionsContinue to the next step.", "step_imgs": [], "step_title": "Step 1: Introduction"}, {"step": 2, "steps_text": "We are going to start using a cylindrical volume of 20ml as an example. In Steps 7 and 8, you have the tools to create the volume of your choice.Work with your class to create a set of volumes!InstructionsDrag out a cylinder to the Workplane.Size it as per your desired calculations, and make it a hole. My 20ml volume will be a cylinder that is 30mm in diameter and 30mm tall along the Z axis.Continue to the next step.", "step_imgs": ["https://cdn.instructables.com/F81/YSEM/IRHV3QPO/F81YSEMIRHV3QPO.LARGE.jpg"], "step_title": "Step 2: Creating the Volume for Your Measuring Cup"}, {"step": 3, "steps_text": "We're going to print the cup facing down to make 3D printing the handle easier.In this step, we are creating the cup around our volume.InstructionsDuplicate your shape and make it solid again.Grow the object by 6mm along the X and Y axes and 3mm along the Z axis.Center the two cylinders along their X and Y axes but to their lower Z axis limits.Continue to the next step.", "step_imgs": ["https://cdn.instructables.com/FJ8/35Y7/IRHV3QPF/FJ835Y7IRHV3QPF.LARGE.jpg"], "step_title": "Step 3: Creating the Vessel"}, {"step": 4, "steps_text": "Now we'll create a simple handle that has enough room for some text describing the volume.InstructionsDrag out a Round Roof and align it so that it extends out from the center off the cylinders.Grow the round roof until it extends roughly 4cm from the side of the cylinder. Because every volume is different, the length of this object will be different for everyone.Shrink the round rood to 5mm tall along the Z axis.Drag out a Hemisphere, shrink it to 5mm tall along the Z axis, and align it to the end of the round roof so that it creates a smooth tangent.Continue to the next step.", "step_imgs": ["https://cdn.instructables.com/F0N/LAS3/IRHV3QON/F0NLAS3IRHV3QON.LARGE.jpg"], "step_title": "Step 4: Create the Handle"}, {"step": 5, "steps_text": "A measuring instrument is no good if it's not labeled! So we're going to do that, now.Tinkercad has number and letter shapes, but it only has upper case letters. Why is this important? Because ML doesn't mean Milliliters, it means MEGALITERS! We don't have the time to make a measuring cup that big!So to make a label with lowercase letters, we're going to use the Text Shape Generator in the Shapes menu.InstructionsDrag out the Text Shape Generator under the Tinkercad collection.Choose the font \"Arimo\" and type out the volume you have chosen.Mirror the text so it can be read from the bottom.Continue to the next step.", "step_imgs": ["https://cdn.instructables.com/FVI/8WYZ/IRHV3QNU/FVI8WYZIRHV3QNU.LARGE.jpg"], "step_title": "Step 5: Create the Label"}, {"step": 6, "steps_text": "Now we just need to put the label on our handle!InstructionsProportionally scale the text until it is 10mm tall along the Y axis and then shrink the text along the Z axis until it is 1mm tall.Align the text to the handle's center along the Y axis and nudge the text in to position along the X axis.Select all the objects and group them.Continue to the next step.", "step_imgs": ["https://cdn.instructables.com/F7E/M1JE/IRHV3QNT/F7EM1JEIRHV3QNT.LARGE.jpg"], "step_title": "Step 6: Positioning the Label"}, {"step": 7, "steps_text": "The metric system was designed around a volume of water in a 1cm cube. This volume was named the Milliliter (ml).The volume of a cube is the area (length times width) of a sides multiplied by its height, or x^3.However, in this lesson, we want to find the dimensions of a cube from a known volume. Instead of cubing a side, we can take a cube root of a volume. For example, a liter is a cube with 10cm sides :10=\u221b(1000)Both Apple OSX and Microsoft Windows come with calculators with the cube root function.InstructionsContinue to the next step.", "step_imgs": ["https://cdn.instructables.com/FVB/2NHH/IRHV3QNS/FVB2NHHIRHV3QNS.LARGE.jpg"], "step_title": "Step 7: Calculating the Volume of a Cube"}, {"step": 8, "steps_text": "Like with a cube, we calculate the volume of a cylinder by multiplying the area of a side by its height. Finding the volume of a cylinder is challenging because its sides are circles. Fortunately, thousands of years ago, we found a number that helps us, and that number is 'pi' or '\u03c0'.Pi is the ratio between the diameter of a circle and its circumference. The formula for the area of a circle is:Area=pi*d^2/4If we make the height and the diameter the same, this is easy to solve, we simply raise the square to a cube:Volume=pi*d^3/4But what if we know the volume and want to figure out the diameter and height? We solve for diameter:d=\u221b((4*Volume)/pi)So if you want a cylindrical volume of 1L (or 1000cm3), your diameter and height should be:~10.9cm=\u221b((4*1000)/pi)InstructionsContinue to the next step.", "step_imgs": ["https://cdn.instructables.com/FY7/E54U/IRHV3QNR/FY7E54UIRHV3QNR.LARGE.jpg"], "step_title": "Step 8: Calculating the Volume of a Cylinder"}, {"step": 9, "steps_text": "Congratulations, you've completed Lesson 2 of Making Your Own Measurement Tools! Well done! Now let's try printing your measuring cup.No matter how you orient this object, there will be overhangs. Therefore, during the building process, we built it in the orientation that has the least overhangs.If you make a larger volume, it may make sense to flip the object over if you think the handle would require less support material than supporting the bottom of the cup.InstructionsFrom the Design menu, click \"Download for 3D Printing.\"Click the button labeled \"STL.\"When your browser has completed downloading, load the file into your 3D printer software.This object has some overhangs, so make sure to enable \"Support Structure\" in your 3D printer software.Print!In the next lesson you will learn to make a protractor!Next Lesson:Protractor - Measuring Angles", "step_imgs": [], "step_title": "Step 9: Printing"}], "channel": "3D Printing"}, {"category": "technology", "description": "This is a simple project for a weather station.Initially it reads temperature, pressure and humidity. Next step is to measure wind direction and after that wind speed.The base of the project is a Raspberry PI A+ which was chosen by its small consumption, since the idea was that the weather station being powered by solar power.The OS is raspbian distro, with some off the shelve python libraries.Main program was written in Python.Weather station uploads all data to www.wunderground.com every 2 minutes.", "title": "Weather Station Based on Raspberry Pi", "url": "https://www.instructables.com/id/Weather-station-based-on-Raspberry-Pi/", "section": "technology", "steps": [{"step": 1, "steps_text": "For the completion of the project we will need the following :Raspberry Pi A+ (It is possible to use any model)Temp/Pressure sensor Bosch BMP180Temp/Humidity sensor HTU21DWireless adapterSD card10W Solar panel7.2 Ah 12V batteryGeneric 12V solar controler/charger5V regulator 7805Bits and bogs needed", "step_imgs": ["https://cdn.instructables.com/FPX/VX5O/I7KB241V/FPXVX5OI7KB241V.LARGE.jpg", "https://cdn.instructables.com/FN5/WUDZ/I7KB244V/FN5WUDZI7KB244V.LARGE.jpg", "https://cdn.instructables.com/F1G/ZVTT/I7KB244W/F1GZVTTI7KB244W.LARGE.jpg", "https://cdn.instructables.com/FXZ/HRRH/I7KB2453/FXZHRRHI7KB2453.LARGE.jpg"], "step_title": "Step 1: Hardware Description"}, {"step": 2, "steps_text": "I will not waste time explaining how to install raspbian on a Rpi. I assume that whoever wants to build this project is profficient enough in these matters. Anyways the link for the distributions is  http://www.raspberrypi.org/downloads/Since i own a few Rpi's , i already have na SD image ready to roll with wireless conectivity, so it was just a question of rewriting it to a new card.If you do not have such a \"backup\" it is probably better for you to use a B+ or other model with ethernet, and setup everything using one of many tutorials available. A good tutorial for setting up Rpi is http://www.raspberrypi.org/help/quick-start-guide/A good one for wireless is http://www.raspberrypi.org/documentation/configuration/wireless/If everything went alright you should have now a Rpi with wireless internet access.You still need to have your Rpi ready to use I2C protocol.A good one is https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c", "step_imgs": [], "step_title": "Step 2: Setting Up the Basics "}, {"step": 3, "steps_text": "After you set up your Rpi, there are a few pieces of software needed for us to be able to read the used sensors.I did all using Rpi \"Headless\" and using command lineI used Adafruit library for the BMP180, just follow the link to install it https://learn.adafruit.com/using-the-bmp085-with-raspberry-pi/using-the-adafruit-bmp085-python-libraryWe also need Pigpio library for Reading the humidity sensor. You can download from http://abyz.co.uk/rpi/pigpio/download.html and follow installation instructionsAfter that you have to make sure that whenever you reboot the Rpi, Pigpio is also loaded. I did this by adding the following line to /etc/rc.local sudo pigpiodIn my case this is enough but this depends on where you have installed pigpio. If you run into problems, just put the whole path for the file and you should be ok.The presented tutorials are pretty straightforward but if you need any help i'm here :D", "step_imgs": [], "step_title": "Step 3: Setting Up Other Software"}, {"step": 4, "steps_text": "I got both sensors from Ebay, since it's easier (and cheaper) to get ready made small boards with the sensors already soldered that to do them by yourself. If you search Ebay for BMP180 and HTU21D you will find them for sure.These are I2C sensors which are very easy to communicate with. The I2C protocol allows you to connect several sensors in paralell and communicate with each of them because each has a unique address.I got both soldered together with some skill , matching all signals as seen on the pictures.The sensors will need +3.3V, GND, SDA and SCL signals from the Rpi.You can use any wiring you like, but a 4 wire cable (telephony) is probably a nice idea.", "step_imgs": ["https://cdn.instructables.com/FX4/SQRM/I7KB2441/FX4SQRMI7KB2441.LARGE.jpg", "https://cdn.instructables.com/FNQ/6L6M/I7KB4F4D/FNQ6L6MI7KB4F4D.LARGE.jpg"], "step_title": "Step 4: Setting Up the Sensors"}, {"step": 5, "steps_text": "Main program is temp-monitor.pyYou should have python installed , if not, just follow  http://raspberry.io/wiki/how-to-get-python-on-your-raspberrypi/The first part of the program shows the libraries needed.import Adafruit_BMP.BMP085 as BMP085import smbusimport osimport sysimport getoptimport sqlite3import mathimport pigpioimport timeFollowing the program we have 2 functions that will read humidity. Read_temperature is a function that will read the temperature of the HUT21D for compensation when calculating the relative humidity. It is necessary for the following function read_humidity.There is a few calculations inside these functions, but this is all according to the sensors datasheet. Not importante stuff, but you cam always check them if you like BMP180 http://www.vssec.vic.edu.au/media/41229/BMP180-datasheet.pdfHTU21D http://www.meas-spec.com/downloads/HTU21D.pdfThe cmd variable is responsible for sending the data to www.wundergroud.com using curl. This website provides some really nice stats and graphs. You need to register (it's free) an account to upload the data. After that you will have an ID and a password which you sould change in the cmd variable as showncmd = \"curl \"+\"'http://weatherstation.wunderground.com/weatherstation/updateweatherstation.php?ID=&PASSWORD=&dateutc=now&tempf=\"+str((temp*1.8)+32)+\"&humidity=\"+str(round(humidity,2))+\"&baromin=\"+str((pressure/100)*0.0295299)+\"&action=updateraw\"+\"'\"You then have to change again /etc/rc.local and insert a line for the program to start when the Rpi is rebooted :sudo python /usr/lib/cgi-bin/temp-monitor.py &The & symbol is important because it will put your program into memory and releasing the command line to be used.UPDATEFor the curious minds, temp-monitor-online.py is the current program i'm using, with readings for temperature, pressure, humidity, dew point, wind speed and direction  and uv and insolation.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 5: Main Program"}, {"step": 6, "steps_text": "So if you have all sorted out and working well it's time to put your weather station outside.I chose to feed my Rpi using a solar powered system, using 3 3,5W modules bought on Ebay.The modules output 6V, so 3 modules in series will give us 18V, which is the standard for a 12V solar system.You can arrange them as i did and you will end up with a pretty nice small panel capable of running the system.Probably you are thinking that 10W and a 7,2Ah battery is a bit much for the Rpi, but since i am in Ireland, i am expecting to run a few days without sun, so...", "step_imgs": ["https://cdn.instructables.com/F4J/JFKL/I7KB244X/F4JJFKLI7KB244X.LARGE.jpg", "https://cdn.instructables.com/FT9/QE3H/I7KB2452/FT9QE3HI7KB2452.LARGE.jpg", "https://cdn.instructables.com/FH2/AAGP/I7KB4F3N/FH2AAGPI7KB4F3N.LARGE.jpg", "https://cdn.instructables.com/FSS/T5K0/I7KB4F3O/FSST5K0I7KB4F3O.LARGE.jpg"], "step_title": "Step 6: Building Up the Solar Panel"}, {"step": 7, "steps_text": "I have made the solar shield from discardable plastic plates and 2 cm pieces of plastic tube. I will not go much into this since there are many ways to do this. The important thing is that the sensors are protected from wind and direct sunlight.If you would like more details i can update with more information.", "step_imgs": ["https://cdn.instructables.com/F05/83J0/I7KB4F33/F0583J0I7KB4F33.LARGE.jpg", "https://cdn.instructables.com/FQ1/HKTF/I7KB4F35/FQ1HKTFI7KB4F35.LARGE.jpg"], "step_title": "Step 7: The Solar Shield"}, {"step": 8, "steps_text": "With everything in place it's time to connect things.If you have a solar charger with a load output, it's a good idea to use it, since usually there is a way to turn it on/off. Since we are using a 12V battery, we will need a 7805 regulator to reduce to 5V for the Rpi. If you look to the 7805 with the markings facing to you, the left pin is the input(connect it to 12V) , the middle one is GND, and the right one is the output (5V).You can connect your 5V to the usual Rpi connector or directly to its header, in this case, pin 2 or 4.The solar charger has connections for the battery and for the solar panel. Make sure that you connect always the battery in the first place.It's time to connect the I2C, which are pins 3 and 5 (SDA and SCL) and pins 1 and 9 (+3.3V and GND)Power up the Rpi, check that everything is running well and close your box :D", "step_imgs": ["https://cdn.instructables.com/FF7/J4AI/I7KB5CH2/FF7J4AII7KB5CH2.LARGE.jpg", "https://cdn.instructables.com/FCZ/K807/I7KB4F1T/FCZK807I7KB4F1T.LARGE.jpg", "https://cdn.instructables.com/FWF/BZ0P/I7KB4F1X/FWFBZ0PI7KB4F1X.LARGE.jpg"], "step_title": "Step 8: Everything Connected"}, {"step": 9, "steps_text": "This is my first tutorial so please excuse me for anything that you do not like.I appreciate comments and improvements.This is a basic setup and will be improved with a few more sensorsI leave you with the link of my weather stationhttp://www.wunderground.com/personal-weather-station/dashboard?ID=IWICKLOW13Enjoy", "step_imgs": [], "step_title": "Step 9: Final Thoughts"}, {"step": 10, "steps_text": "It's been a while since the creation of this instructable and things got some improvement.The weather station runs and uploads now both wind speed and direction. I will now show you how the wind direction is working. It is also reading and uploading UV \u00edndex.There are a few projects around that use a setup of reed swicthes to get the wind heading. I always thought that it does a pretty simple solution, but nowadays with digital compasses it seems more appropriate to use one of these small devices. Also, since my objective was to run all sensors on I2C bus, i was sure that i could find one that would fit in this type of bus. So i did.I am using a HMC5883L, which is a 3 axis digital compass, using I2C bus. You can find ready soldered modules on ebay as cheap as 1 euro. Just search and you'll find them for sure.One piece of advice with this sensor. I believe that this kind of sensors are quite sensitive, since i managed to kill one. After a few days of getting wrong indications from it, i got a new one and all sorted out. Just be careful , don't drop it too many often.The other importante part that i used is called a slip ring. What is a slip ring? It's a small device that allows you to have a rotating axis and connections at the same time. There are several parameters that define such device. One is the number of ways(or wires) and other is the rated current accepted through the wires. Since we are only Reading sensor, and in this case I2c, we will need 4 wires and the current is as low as you can get.I got a 6 wire , low current which happened to have the axis diameter the same as the inner measure of some plastic tubing that i used to build the vane.The various pictures show how i managed to build the thing. It's not pretty but it dows the job. SOFTWAREIt's a pretty simple thing to read from the HCM. I took a few looks on the datasheet, made some research in the web, and i got to these code lines to put it working :def write_byte(address,adr, value):    bus.write_byte_data(address, adr, value)- Procedure to write data in a specific address of the I2C bus.def median(lst):    lst = sorted(lst)    if len(lst) < 1:            return None    if len(lst) %2 == 1:            return lst[((len(lst)+1)/2)-1]    else:            return float(sum(lst[(len(lst)/2)-1:(len(lst)/2)+1]))/2.0- This is a procedure for getting the average number of a list of readings. It will be neededwrite_byte(0x1E,0, 0b01110000) # Set to 8 samples @ 15Hzwrite_byte(0x1E,1, 0b00100000) # 1.3 gain LSb / Gauss 1090 (default)write_byte(0x1E,2, 0b00000000) # Continuous samplingscale = 0.92x_offset = 45y_offset = -82- Needed declarations for the sensor. The first 3 lines set up sample readings and gain. The fouth sets the scaling. The 2 last ones are values to tune up the sensor Reading. They may vary from sensor to sensor, but most of the times they do not affect much the Reading.def get_heading(): x_out = (read_word_2c(0x1E,3) - x_offset) * scale y_out = (read_word_2c(0x1E,7) - y_offset) * scale z_out = (read_word_2c(0x1E,5)) * scale bearing  = math.atan2(y_out, x_out)  if (bearing < 0):  bearing += 2 * math.pi if ((math.degrees(bearing) + 90) < 360 and (math.degrees(bearing)+90) > 90):  heading = math.degrees(bearing)+90#  print round(heading,0) elif math.degrees(bearing)+90 == 360:  heading = 0#  print round(heading,0) else:  heading = math.degrees(bearing)-270#  print round(heading,0) return heading- This is the main reading procedure. It gives you the heading of the vane in degrees from 0 to 359So now that we have all declarations and procedures, the only missing past is insert the next code into the main program :dir = 0 lista = range(500) print('Reading 500 times wind direction separated by 10mS each for smoothing final reading ...') for dd in range (0, 500):  lista[dd] = get_heading()  time.sleep(0.01) direction = median(lista) print('Done !') print('Wind dir is ',direction)I found that doing just one reading would result in huge variations in the direction, so what we are donig here is taking 500 measurements separated by 10mS each, and outputting the average of all values. All print lines can be deleted since they only serve for debugging purposes.Do not forget to update the upload line to wunderground, now we have more data, so you have to put in windir=direction, in my case.Cheers, folks!", "step_imgs": ["https://cdn.instructables.com/FLL/TIGV/I7KB2454/FLLTIGVI7KB2454.LARGE.jpg", "https://cdn.instructables.com/FAI/4QBE/IATH6ZH2/FAI4QBEIATH6ZH2.LARGE.jpg", "https://cdn.instructables.com/FJB/4OM8/IATH6ZIW/FJB4OM8IATH6ZIW.LARGE.jpg", "https://cdn.instructables.com/FFK/GCXC/IATH6ZKC/FFKGCXCIATH6ZKC.LARGE.jpg", "https://cdn.instructables.com/FXJ/GL2A/IATH6ZLS/FXJGL2AIATH6ZLS.LARGE.jpg"], "step_title": "Step 10: Project Update 1 - Wind Direction"}, {"step": 11, "steps_text": "Hi folksStill waiting for the new slip rings from China, hope i'll get them in a couple of weeks, and then as promissed i will update with the howto of wind direction and wind speed.I've made some changes on the main program which you can download. The reasons for this are:If one of the sensors get disconnected accidentally from the I2C bus, the program will crash. So i've made 4 new test functions which will test if the sensors are really connected, and if not, the program assumes the value 0 for the respective sensor. This can be changed at your will.I'm using a cron job to run the program each 5 minutes instead of being running all the time. This actually makes a lot more sense, since you now don't have a program running 24/24 wasting resources and prone to crash. You can also change the 5 minute to whatever you like. I find easy to setup cronjobs with the aid of a GUI program called gnome-schedule. If you do not have it installed, just do sudo apt-get install gnome.schedule to do it.After that you just add a new recurrent cron job, give it some sort of name and setup the run command as sudo python temp-monitor.py. After that you just need to setup your time interval , save the task and reboot .Thanks for the interest", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 11: Project Update 2 - New Software"}], "channel": "Raspberry Pi"}, {"category": "technology", "description": "This guide will teach you how to connect your HC-SR04 ultrasonic sensor to your Arduino UNO and how to calibrate it to measure distance.", "title": "Arduino UNO: Complete Ultrasonic Sensor Guide (HC-SR04)", "url": "https://www.instructables.com/id/Arduino-UNO-Complete-Ultrasonic-Sensor-Guide-HC-SR/", "section": "technology", "steps": [{"step": 1, "steps_text": "Connect your ultrasonic sensor to the Arduino UNO as shown in the diagram. The HC-SR04 has four pins which should be connected as follows:Ultrasonic VCC \u2192 Arduino 5VUltrasonic GND \u2192 Arduino GNDUltrasonic Echo \u2192 Arduino digital pin (2 is used for this tutorial)Ultrasonic Trig \u2192 Arduino digital pin (4 is used for this tutorial)", "step_imgs": ["https://cdn.instructables.com/FFN/08HS/JR6OG1GR/FFN08HSJR6OG1GR.LARGE.jpg"], "step_title": "Step 1: Wiring Your Sensor"}, {"step": 2, "steps_text": "Note: Due to a bug in Instructables, please click on the external link to the code in order to copy it correctly. Otherwise, you may see some missing spaces.Look through the following code labelled ultrasonic_callibration.ino to see how to print the duration of your ultrasonic sensor's pulses. Another term for this duration is the period of each pulse. The period is the amount of time between the sensor sending out and receiving a pulse.To view the period of each pulse, open the Serial Monitor (Ctrl+Shift+M). We will use these values to find a correlation between the period (in microseconds) and the distance to the object the ultrasonic sensor is facing (in any unit of distance you choose).Create a new Google Sheets document. Microsoft Excel works too, but for this tutorial we will be using the former. Create two columns: the first will be for pulse duration, and the second will be for distance. Place a ruler on top of a horizontal flat surface with the end that reads zero perpendicular to a vertical flat surface. Consider, for example, a tabletop and a hardcover book. Choose intervals along the ruler at which you will be placing your ultrasonic sensor such that it is facing and parallel to the vertical flat surface.Tip: Choose a small interval that spans the entirety of your ruler. The more data points you have, the more calibrated your ultrasonic sensor will be.Start your ultrasonic sensor closest to the vertical surface and turn it on. Record the period of the pulse in the first column of your Google Sheet, then record the ultrasonic sensor's distance along the ruler for that pulse. Increment the ultrasonic sensor's position by your interval and repeat steps four and five until you have a fair number of data points. In a cell in your Google Sheet, type =LINEST(. You will be prompted for a range of known_data_y. Select the second column containing your distances. Add a comma, then select the first column containing your periods when prompted for the known_data_x. Add a comma and type true, then add a closing parenthesis and hit Enter. Continue on to the next step.", "step_imgs": [], "step_title": "Step 2: Calibrating Your Sensor"}, {"step": 3, "steps_text": "Note: Due to a bug in Instructables, please click on the external link to the code in order to copy it correctly. Otherwise, you may see some missing spaces.Reference the attached code for this final step. In the method called microsecondsToDistance, set the variables m and b to the value that appeared in the cell where you typed the formula and the value in the cell to its right, respectively.Upload the code to your Arduino UNO and you should be all set! Try measuring distances along the ruler to see if they match what you expect.", "step_imgs": [], "step_title": "Step 3: Measuring Distance"}], "channel": "Arduino"}, {"category": "technology", "description": "Being a A+ student in Physics in my college didn't come from anywhere but my own strategy and hard work. During my basic physics classes i was bored and seemed a miss step in my career but then i found a easy way , a secret method actually  to like, love and get the most in physics. So here i am to help you get started with physics and become a A+ student at it. Also for the secret, its somewhere in the texts beyond. Physics :It is what help us to understand our world better and to use this understanding for the benefits of people and environment. It involves the wide range of ideas and areas of investigations. It plays and important part in the the home, leisure, medicine and communication. As with science it involves observations and experiments which are used to discover the relationship between things. Who are the physicist ? They try to make sense of relationships by developing theories and models. These theories are able to predict further behavior which can then be tested by experiments. Physical quantities / Metric system  Note:  Some people may think physics is really hard and confusing , that's right it is and that's what i still think, but remember its like a challenge and you need to refer this to real life situations and fight it to beat it. Just think it as a video game where you have evil bosses as formulas and equations and you are the ultimate formula killer etc.... have fun with something and you will learn. You know how i used to study ? . Well basically i wrote down a couple of problems in each A4 paper and then act as i am a super genius that is sent to earth to crack the most difficult equation. Then i used to make sounds say words and then solve and fall asleep. the next morning when it was exam time and the same kind of question appeared i was like \" wow , it's time for super genius kid\" hahah...sounds funny no ? ...but guess what i scored 20/20 in that exam , see what i mean ?...System international Units -  It is the standard system of units to measure all physical quantities , in other words the units in which the answer you write is gonna be in.Length - Meter (m)Mass - kilograms (kg)Time - Seconds (s)current - Ampere (a)Temperature - kelvin  (K)Intensity - Candela (Cd)Amount of substance - Mole (Mol)   Standard Prefix Multiplier Tera - 10 * 12 ( * = power of)Giga - 10 * 9Mega - 10*6Kilo - 10* 3Centi - 10*-2Milli - 10*-3Micro- 10*-6Nano - 10*-9Pico - 10*-12Peta - 10 *15Femto - 10* -15Exapmle 1 : 10 pM ----> M10 x 10 * -12 m   = This how you convert Pico Meter to Meter ", "title": "Physics : Learn Physics the Fastest Way", "url": "https://www.instructables.com/id/Introduction_6/", "section": "technology", "steps": [{"step": 1, "steps_text": "It is some thing we have learned in junior college or secondary schools, In physics definition it is the distance from one point to another , take a look at the diagram to get a feeling of what ii am talking about. To find length we basically measure with a ruler , a meter ruler, and ever if it's really long use a Mileometer. That's  basically really easy and you don't need much to understand here.  Area it is the amount of surface for an object. For regular shapes we use formula for each shape and for irregular shapes we use grids and the count out the number of grids inside the figure. Thats the final area of that shape. VolumeIt is the amount of space a object takes up. The volume of regular objects are calculated by using formula's and of irregular are is found by displacement of water. Some example of formula's to calculate volume are :Cube - l2Cuboid - L x w x hPrism - Base area x height Cylinder - TTr2 x heightCone - 1/3 TTr2 x heightPyramid - 1/3 base area x heightSphere - 4/3 TTr3Volume of irregular object The volume of irregular objects can be found by using displacement method, for smaller objects a cylinder can be used but for larger objects we use a special equipment called the Eureka Can..Experiment time. Get a old cylinder can like a tin or a measuring cylinder if you have one. Choose the different types of objects you wanna find the volume of and then fill the cylinder with water of about 250 ml or 150 ml. Place the object in the water and then note down the new volume reading on the cylinder. Formula  =  Final Measuring - Initial measuring                       your new measure - 250 or 150 explore more ways and try to make your own formula to find other ways to find volumes of objects. ", "step_imgs": ["https://cdn.instructables.com/FVJ/6D0P/FSSIUXR9/FVJ6D0PFSSIUXR9.LARGE.gif", "https://cdn.instructables.com/FXQ/5EH6/FSSIUXYA/FXQ5EH6FSSIUXYA.LARGE.gif"], "step_title": "Step 1: Length"}, {"step": 2, "steps_text": "Mass and weight are something which are always confused with people. Mass is the quantity of matter in an object while the weight refers to the gravitational pull on that object.  Some one asks you what is you weight ? you would answer \"ohh...my weight is 71 kg \", say that to a physics teacher or someone who knows it and they would laugh at you. Why  ? because That means your 7.1 heavy or kg. Now let me explain. Mass never change and if your mass is 71 kilograms then the weight is basically your mass multiplied by the gravity (10) which gives you the actual weight on earth. So that means even if you are on the moon you would use the mass on earth which is 71 kilograms multiplied by the moons gravity. Mass Is how much Matter is in an object. It depends on the object size and the material it is made up of. Unit is in Kilograms (Kg). remember mass never changes , so if your mass on earth is 710 N and on moon will mass the same 710 N.WeightIt is the gravitational pull on an object it is depended on the objects size and what it is made up of. Basically it means how much the power is used by the earths magnet to pull you.  Units is Newtons (N). To calculate weight : W = Mass x Gravity pull         where Gravity is = 10m/s2So next time when someone ask you weight tell them that it's 710 or whatever Newtons and they will be shocked wondering what that it and how them that you know physic. ", "step_imgs": ["https://cdn.instructables.com/FTW/PA9W/FSSIUXTK/FTWPA9WFSSIUXTK.LARGE.gif"], "step_title": "Step 2: Mass and Weight"}, {"step": 3, "steps_text": "Rules of Significant figures1.  All zero digits placed in between non- zero digits are significant figures. e.g - 101 - 3 s.f2. All non- zero digits are significant e.g - 1234 - 4 s.f3. Zero placed after decimal place and before non zero digit are not significant.e.g. - 0.01 - 1 s.f4. Zeros placed after non zero digit behind the decimal points are significant. e.g - 0.010048 - 5 s.f5. Zeros at the end of a number are significant only if they are indicated to be so through the use of scientific notation. e.g - 8200 - may have different significant figures.   (i) 8.2 x103 = 2 s.f", "step_imgs": ["https://cdn.instructables.com/F6D/XPF4/FSSIUXVX/F6DXPF4FSSIUXVX.LARGE.gif"], "step_title": "Step 3: Significant Figures"}, {"step": 4, "steps_text": "Ok ,this is the end of chapter one of this instructable but i will be back with chapter 2. I hope you have learned some tricks and tips on physics and some basic skills of physics. Next instructables will be more in depth with measurement errors, different types of measuring instruments, Drawing graphs etc. Until then please rate the instructable only at instructables.com. ", "step_imgs": ["https://cdn.instructables.com/FW2/DSWQ/FSSIUXXZ/FW2DSWQFSSIUXXZ.LARGE.gif"], "step_title": "Step 4: See You in Part 2"}], "channel": "Science"}, {"category": "technology", "description": "The Density Formula, how to find the density of an object.You will need:1. Scales (for weighing)2. A cup or beaker with ml measurements (L measurements would work but ml's is optimal)3. Water (if using irregular shape)4. Weight (must fit in cup/beaker with whatever your weighing, used to sink floating objects)5. What you're measuring6. Paper & pen/pencil (if you need it to do calculations on paper)", "title": "The Density Formula", "url": "https://www.instructables.com/id/The-Density-Formula/", "section": "technology", "steps": [{"step": 1, "steps_text": "The formula to find the density of an object is relatively simple. First you must find its weight, using scales or any other weighing device. Next you have to find its volume, if it's a regular shape you could use a ruler but if it's irregular (E.G. a rock) you could use water. By filling your measuring cup/beaker with water (leave room for object, record how many ml's it's at) then adding the object (record how many ml's it's at now, make sure the object is submerged and the water hasn't overflowed) you can get your calculations. Minus the first measurement from the second one (E.G. Second measurement - first measurement), now you have the volume. If the object is lighter than water, get your weight (Physical weight, E.G. A fishing sinker) and measure its volume using the method shown before, now add the light one that floats then the weight. It should sink, now get those measurements and do this calculation (end volume [both weight and object] - weight [E.G. Sinker]), with that minus the volume of water from the answer you just got (E.G. The answer you just got - volume of water). Now you have the volume of an irregular shape. Remember, (1ml = 1cm3).", "step_imgs": ["https://cdn.instructables.com/F49/3N7U/ILJWLJYA/F493N7UILJWLJYA.LARGE.jpg"], "step_title": "Step 1: Measuring"}, {"step": 2, "steps_text": "The calculations you now have are very simple. Density = Mass \u00f7 VolumeDivide Mass by Volume, you now have the density!", "step_imgs": ["https://cdn.instructables.com/FPF/D5PT/ILJWLJY6/FPFD5PTILJWLJY6.LARGE.jpg"], "step_title": "Step 2: Calculations"}, {"step": 3, "steps_text": "Finished answers are written by having the [Weight] then a [/] then the [mass] (E.G. cm3). The weight is per point of volume, E.G. Per 1 cm3. (1 ml = 1 cm3)Example of how it's written:Mass/cm3 (cubed sign is because it's a 3D object)", "step_imgs": ["https://cdn.instructables.com/FS6/AZON/ILJWLJYB/FS6AZONILJWLJYB.LARGE.jpg"], "step_title": "Step 3: Written Answer"}], "channel": "Science"}, {"category": "technology", "description": "Understanding Cumulative Frequency and Cumulate Frequency CurvesCumulative frequency is a concept that is used in multiple disciplines, including research psychology, to help data analysts determine the total frequency of some sort of occurrence up to a given value. Finding cumulative frequency would be useful, for example, if a researcher collected the IQ scores of a group of college students and wanted to know how often students earned a score of 119 or lower.Cumulative frequency can be graphically represented in several ways, but is most commonly shown through a cumulative frequency curve. Cumulative frequency curves look very similar to line graphs, and help analysts visualize information and predict future trends in data.Things You'll Need:Writing utensil Calculator (optional) Paper Ruler or other straight edgeDataset", "title": "How to Calculate Cumulative Frequency and Draw a Cumulative Frequency Curve", "url": "https://www.instructables.com/id/How-to-Calculate-Cumulative-Frequency-and-Draw-a-C/", "section": "technology", "steps": [{"step": 1, "steps_text": "This will help you organize your frequency information. You will need to:Identify your measurement interval categories.Place frequency data into the cells below the appropriate intervals.Let\u2019s say, for example, you wanted to input frequency information about the amount of sleep 15 of your friends got last night into a table. Your friends report that they slept 6, 4, 11, 8, 9, 3, 5, 6, 6, 7, 8, 4, 2, 7, and 4 hours. Look to Figure 1 to see how these data would be represented in a frequency table.", "step_imgs": ["https://cdn.instructables.com/F9J/6KTI/INETULWA/F9J6KTIINETULWA.LARGE.jpg"], "step_title": "Step 1: Place Frequency Data Into a Table"}, {"step": 2, "steps_text": "To find the cumulative frequency of each interval, locate the frequency score of the interval and add to it all frequency scores falling before it.Place cumulative frequency data into a row of cells below the frequency cells.Look to Figure 2 to see how the data from the example presented in Step 1 would look in a cumulative frequency table.", "step_imgs": ["https://cdn.instructables.com/F9F/TEMK/INETULWB/F9FTEMKINETULWB.LARGE.jpg"], "step_title": "Step 2: Find Cumulative Frequency of Each Interval and Input It Into a Table"}, {"step": 3, "steps_text": "Draw one vertical and one horizontal axis using your ruler or other straight edge.Label the vertical axis \"Cumulative Frequency\" and section it off into evenly spaced segments. The scale you use to section off the axis will depend on the range of your frequency data, but will always begin with 0. Label the horizontal axis as the measurement you're taking and section it off into segments that reflect your measurement intervals. Each segment should be labeled in accordance with the higher number of the interval being represented.Figure 3 shows how a plane for the sleep example would be drawn.", "step_imgs": ["https://cdn.instructables.com/FM1/W1O4/INI7T8GP/FM1W1O4INI7T8GP.LARGE.jpg"], "step_title": "Step 3: Set Up Your Plane for the Cumulative Frequency Curve"}, {"step": 4, "steps_text": "Plot each cumulative frequency data point on your plane with a small \"x\". Connect consecutive points together with straight lines with the help of your ruler or other straight edge.Figure 4 shows how the cumulative frequency data points would be plotted and connected for the sleep example.", "step_imgs": ["https://cdn.instructables.com/FNF/1LEF/INI7T8GS/FNF1LEFINI7T8GS.LARGE.jpg"], "step_title": "Step 4: Plot and Connect Cumulative Frequency Data Points"}, {"step": 5, "steps_text": "Use the cumulative frequency table and curve to learn more about your data.Going back to the sleep example, you may wonder how many of your friends slept 7 hours or less last night. To find out, you should look to the cumulative frequency number under the \u201c6-7 hours\u201d category of your cumulative frequency table. This will reveal that 11 of your friends got 7 hours or less of sleep last night.Looking at your cumulative frequency curve will help you visualize and notice new things about your data. In the sleep example, you may notice a sharp increase from the 3-hour mark to the 7-hour mark. This demonstrates that the majority of your friends got 3 to 7 hours of sleep last night.", "step_imgs": [], "step_title": "Step 5: Interpret Your Cumulative Frequency Table and Curve"}], "channel": "Science"}, {"category": "technology", "description": "Understanding Cumulative Frequency and Cumulate Frequency CurvesCumulative frequency is a concept that is used in multiple disciplines, including research psychology, to help data analysts determine the total frequency of some sort of occurrence up to a given value. Finding cumulative frequency would be useful, for example, if a researcher collected the IQ scores of a group of college students and wanted to know how often students earned a score of 119 or lower.Cumulative frequency can be graphically represented in several ways, but is most commonly shown through a cumulative frequency curve. Cumulative frequency curves look very similar to line graphs, and help analysts visualize information and predict future trends in data.Things You'll Need:Writing utensil Calculator (optional) Paper Ruler or other straight edgeDataset", "title": "How to Calculate Cumulative Frequency and Draw a Cumulative Frequency Curve", "url": "https://www.instructables.com/id/How-to-Calculate-Cumulative-Frequency-and-Draw-a-C/", "section": "technology", "steps": [{"step": 1, "steps_text": "This will help you organize your frequency information. You will need to:Identify your measurement interval categories.Place frequency data into the cells below the appropriate intervals.Let\u2019s say, for example, you wanted to input frequency information about the amount of sleep 15 of your friends got last night into a table. Your friends report that they slept 6, 4, 11, 8, 9, 3, 5, 6, 6, 7, 8, 4, 2, 7, and 4 hours. Look to Figure 1 to see how these data would be represented in a frequency table.", "step_imgs": ["https://cdn.instructables.com/F9J/6KTI/INETULWA/F9J6KTIINETULWA.LARGE.jpg"], "step_title": "Step 1: Place Frequency Data Into a Table"}, {"step": 2, "steps_text": "To find the cumulative frequency of each interval, locate the frequency score of the interval and add to it all frequency scores falling before it.Place cumulative frequency data into a row of cells below the frequency cells.Look to Figure 2 to see how the data from the example presented in Step 1 would look in a cumulative frequency table.", "step_imgs": ["https://cdn.instructables.com/F9F/TEMK/INETULWB/F9FTEMKINETULWB.LARGE.jpg"], "step_title": "Step 2: Find Cumulative Frequency of Each Interval and Input It Into a Table"}, {"step": 3, "steps_text": "Draw one vertical and one horizontal axis using your ruler or other straight edge.Label the vertical axis \"Cumulative Frequency\" and section it off into evenly spaced segments. The scale you use to section off the axis will depend on the range of your frequency data, but will always begin with 0. Label the horizontal axis as the measurement you're taking and section it off into segments that reflect your measurement intervals. Each segment should be labeled in accordance with the higher number of the interval being represented.Figure 3 shows how a plane for the sleep example would be drawn.", "step_imgs": ["https://cdn.instructables.com/FM1/W1O4/INI7T8GP/FM1W1O4INI7T8GP.LARGE.jpg"], "step_title": "Step 3: Set Up Your Plane for the Cumulative Frequency Curve"}, {"step": 4, "steps_text": "Plot each cumulative frequency data point on your plane with a small \"x\". Connect consecutive points together with straight lines with the help of your ruler or other straight edge.Figure 4 shows how the cumulative frequency data points would be plotted and connected for the sleep example.", "step_imgs": ["https://cdn.instructables.com/FNF/1LEF/INI7T8GS/FNF1LEFINI7T8GS.LARGE.jpg"], "step_title": "Step 4: Plot and Connect Cumulative Frequency Data Points"}, {"step": 5, "steps_text": "Use the cumulative frequency table and curve to learn more about your data.Going back to the sleep example, you may wonder how many of your friends slept 7 hours or less last night. To find out, you should look to the cumulative frequency number under the \u201c6-7 hours\u201d category of your cumulative frequency table. This will reveal that 11 of your friends got 7 hours or less of sleep last night.Looking at your cumulative frequency curve will help you visualize and notice new things about your data. In the sleep example, you may notice a sharp increase from the 3-hour mark to the 7-hour mark. This demonstrates that the majority of your friends got 3 to 7 hours of sleep last night.", "step_imgs": [], "step_title": "Step 5: Interpret Your Cumulative Frequency Table and Curve"}], "channel": "Science"}, {"category": "technology", "description": "This project is still somewhat of a work in progress however it's reached a point where it's useful to share the details for others to benefit from it and the idea. It is basically a scale built using the Arduino as the microcontroller, a generic load cell, the HX711 signal amplifier and a 16x2 LCD screen. ", "title": "Counting Scale Made With an Arduino", "url": "https://www.instructables.com/id/Counting-Scale-Made-With-an-Arduino/", "section": "technology", "steps": [{"step": 1, "steps_text": "You will need the following parts to complete this project. Arduino Nano (you could also use a Arduino Uno)3KG Load cell HX711 signal amplifier16 x 02 LCD screen with I2c interfaceDuPont cablesA breadboardSome plywood and screws (Or you could just buy one of these kits )You will need to assemble the load cell to float by anchoring it at the base end, and place a platform on the load side that will be used to place the objects to be weighed. Alternatively you could simply purchase a kit that includes the load cell, the HX711 with the load cell pre-assembled to perspex boards ready to use. ", "step_imgs": [], "step_title": "Step 1: Parts You Will Need"}, {"step": 2, "steps_text": "Use the  diagram to connect everything up. For clarity I have written out the details below too. Load cell To HX711 Red ---- E+Black ---- E-White ---- A-Green ---- A+The connections above depend on the load cell configurationHX711 Gnd ---- GndDT ----  A3SCK --- A2VCC ---- +5VLCD Gnd ---- GndVCC ---- +5VSDA ---- A4SCL ---- A5Tare buttonPin1 ---- +5VPin2 ---- D2 --- 10K resistor ---- GndCount set buttonPin1 ---- +5VPin2 ---- D3 --- 10K resistor ---- Gnd", "step_imgs": [], "step_title": "Step 2: Wiring Things Together"}, {"step": 3, "steps_text": "The Arduino code uses the Q2HX711 and the LiquidCrystal_I2C libraries. The Q2HX711 library initializes by taking the data and clock pin as a parameterQ2HX711 hx711(hx711_data_pin, hx711_clock_pin);The LCD library takes initialization takes the I2C address and the pins as a parameterLiquidCrystal_I2C lcd(0x3F,16,2);The two buttons are assigned to an interrupt in the setup so that they can perform the relevant functionsattachInterrupt(0, _doTare, CHANGE);attachInterrupt(1, _doCount, CHANGE);", "step_imgs": [], "step_title": "Step 3: Arduino Firmware - 1"}, {"step": 4, "steps_text": "The readingAverage returns the average raw reading value received from the HX711long readingAverage(int samples=25,long t=0) {\ttotal=0;\n\tfor (int i=0;i<samples;i++) {\n\t\ttotal=total+((hx711.read()/resolution)-t);\n\t\tdelay(10)\n\t}\n\treturn (total / samples);\n}Internally the program uses the raw values, when displaying, it uses the conversion value to show the weight in grams, the correction value will depend on the load cell being used and needs to be tweaked accordingly. The complete code is hosted on this Github repository", "step_imgs": [], "step_title": "Step 4: Arduino Firmware - 2"}, {"step": 5, "steps_text": "Once you power up the Arduino, it initializes by setting the TARE value to the initial reading. The scale responds to any change in weight detect and updates the LCD display. TARE functionYou may want to zero the scale with a given wight on it, for example a bowl or some other container you plan to put objects in to measure but not include the weight of the container. Simply place the empty container and press the tare button and wait a few seconds till the read out displays zero with the container on the scale.COUNT functionYou can count objects with identical weight. You first need to set a seed value and teach the scale the weight of a single item. by default the scale is programmed to weight 25 items and calculate the weight of an item by dividing this weight by 25. Once set you can add or remove objects and the scale should accurately display the count of the items placed on it. The PC softwareOptionally the scale can be paired with a PC application to communicate the weight back to the PC application and to save item weights and to set item weights back to the scale. This is still work in progress and I am not sharing the PC application, but you can see a demonstration in the video below. ", "step_imgs": [], "step_title": "Step 5: Using the Scale to Count"}, {"step": 6, "steps_text": "Let me have your feedback and feel free to use / modify the firmware. I would appreciate any suggestion for improvements. ", "step_imgs": [], "step_title": "Step 6: Feedback"}], "channel": "Electronics"}, {"category": "technology", "description": "Often an electronics hobbyist will design and build something only to find that it doesn't behave the way he or she intended.  Sometimes in these situations the problem is related to an electrical signal, but that stuff moves at the speed of light!   It's hard to troubleshoot.  Wouldn't it be nice if you could just take a video of your signal, so you could actually see what is happening?  Well, guess what?  Over a hundred years ago a guy by the name of Karl Braun figured out how to do just that when he invented a machine called an oscilloscope.   You can imagine that in the course of that hundred years, the technology has gotten better and better, and it has.  The trouble is that the price reflects it.  I can't afford one. Plus there is that other little matter of not knowing how it works internally or how to fix it when it breaks.  I created this oscilloscope for those three reasons.   If I build it, I know I can fix it cheap.  I know what it does, so I know how to make it do stuff.  Best of all, it's mine, so if I blow it up (nooooooo) I don't lose any friends, and if I want to use it at 3a.m. it's right here under my bed waiting.", "title": "How to Make an Inexpensive 16 MHz Arduino Oscilloscope Using Excel and Your Computer Screen to Display", "url": "https://www.instructables.com/id/How-to-Make-an-Inexpensive-16-MHz-Arduino-Oscillos/", "section": "technology", "steps": [{"step": 1, "steps_text": "     When I first started thinking about this project, I explored a lot of different approaches.  I really liked the Girino Instructable, but I'm a bit of an amateur, and his work looked scary complicated.  There were some simple scope plans floating around that could only see signals in the lower frequencies, but for reasons unknown to me I felt like making a faster version.  After a bit of research I landed on a book by Robert J. Davis II called \"Arduino Oscilloscope Projects\".  This Davis guy is something of a celebrity in the electronics world, so I trusted him.  Plus I noticed that when people were having trouble with their builds, he was pretty friendly and helpful online.  It seemed like a sure bet, so I bought his book on Amazon for around ten bucks.       It turns out that Davis' \"Projects\" is not a book for beginners, but more of a research guide where you can build your scope from a huge number of different configurations.  I was overwhelmed!  Luckily I am a student at Utah Valley University, and a couple of sainted professors (thanks, David Dunlop and Scott Walker) helped me understand the different components and make some design decisions.  So, depending on how much you know about electrical circuits and how much you want to customize your own personal oscilloscope (doesn't that sound sexy!), your first step might be to buy that book.  If you are slightly less knowledgeable you might just skip that step for your initiation and buy it next time when you want to play with the big dogs.       You will also want to print out the parts list and get the stuff from ebay.  I had to use an electronics dealer to get the parts for my first one because the school didn't want to bother with searches (can't blame them, time is money when you are paying a secretary), and it ended up costing 5X as much as the one I built for myself at home.  ", "step_imgs": ["https://cdn.instructables.com/FCY/EK9K/IHUUE8O1/FCYEK9KIHUUE8O1.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 1: STEP 1: GET THE BOOK AND GET THE STUFF"}, {"step": 2, "steps_text": "     As you probably know, an Arduino can't really handle a signal outside of it's cushy little .0049V-to-5 volt range.   That's a problem for those of us who do a lot of troubleshooting because we can't usually predict what our magic circuitry spell is going to conjure up, and we don't enjoy turning our beloved little microcontroller minions into toads.   So the first thing our oscilloscope has to do is an attenuation, which simply means shrinking a signal down to a manageable size.  This is easily accomplished with a switch that either sends the signal through a voltage divider or does not.  See the above schematic.       For a quick review of the math, let's recall that the voltage coming out of the middle of a voltage divider is calculated by   R2        *   V        R1 + R2  So for our circuit where R1=100 and R2=900 you can see that we are going to end up with about 10% of our original voltage when we switch the signal through the divider.", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 2: STEP 2:  ATTENUATION "}, {"step": 3, "steps_text": "     You know how people tend to change their behavior when they know their boss is watching?  Yeah, electrical signals are like that too.  Put them into an oscilloscope and suddenly you are looking at the employee of the year when just yesterday productivity was a big fat zero.  The smart boss knows this.  He generously installs a personal vending machine in each employee's office and fails to mention the ethernet cam slyly embedded in the upper right-hand corner behind the Diet Coke sign.       For our purpose, this camera comes in the form of an AD744 IC.  The input signal runs straight into this little op-amp configured as a unity gain voltage follower and voila, nothing!   In fact, an ideal op amp allows zero current flow, but in reality the one million ohms of impedance it provides change the signal so insignificantly we can't even measure it.  See the schematic for wiring.  I also included a picture of the circuit installed on a breadboard, but mostly just so you can feel good about yourselves when yours looks cleaner.  Keep in mind when you are putting it together that the shortest distances possible are the most desirable.", "step_imgs": ["https://cdn.instructables.com/F58/2936/IHUUD7W1/F582936IHUUD7W1.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 3: STEP 3: IMPEDANCE"}, {"step": 4, "steps_text": "     So maybe our problem isn't too much signal, but instead too little.  It's a total wimp.  What then?  We employ another magical electronics technique of course.  It's called amplification or gain.       Davis' book recommends we gain with an NE5532 dual op amp IC.  Here's how it works.  An inverting op amp is much like a copy machine that has an enlargement button.  It takes a picture of the original signal and outputs a new signal that is magnified according to the ratio of resistor values.  The math is pretty simple:Vout    =    R2    Vin           R1Looking at the schematic, the signal enters this part of the circuit across a 1K resistor.  That is R1.  Then a switch sends it through a combination of resistors that make up R2.  The options are 1K, 2K, and 3K.  That means we have gains of 2, unity, or 5 available with the touch of a switch.       Putting a signal into pin 2 of the NE5532 means that it comes out inverted, as does putting it into pin 6.  Combining the two results gives the inverse of the inverse, which is about like cleaning a clean house.  Nothing looks any different.  That's the reason we have that second half of the dual op amp in our circuit.  I guess we could hang upside down from the ceiling when looking at our screen, but this just seemed a little easier.", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 4: STEP 4: GAIN"}, {"step": 5, "steps_text": "     Now we've got this sexy signal, and she's a beauty.  Perfect shape, perfect size. Trouble is, she likes to swim underwater below trigger voltage sometimes, and our ADC can't see down there.  If we are just looking at a square wave, it doesn't really matter.  Low looks like low, and high looks like high.  It's easy to see the pattern.  Put in a sign wave without bias and you have a whole different outcome.  It chops everything below trigger level off and you have a bunch of fish jumps marching across your screen.  Signals are sneaky like that.  Somehow we have to convince her she's a bird, not a dolphin, and get her to travel above water.  Not a problem.  Turning fins into wings is actually easier than you might think.If we connect a 10K potentiometer to the -12V rail and send it through an inverting op amp and a couple of resistors, we can send out a flat EMF that raises our signal voltage.  That's all it takes, and this is the final adjustment to the signal before it gets translated in the ADC.   Hopefully you can tell where this piece of the schematic joins with the last one. ", "step_imgs": ["https://cdn.instructables.com/FI5/RMEI/IHUUDL7J/FI5RMEIIHUUDL7J.LARGE.jpg", "https://cdn.instructables.com/FXB/T9NQ/IHUUDL7L/FXBT9NQIHUUDL7L.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 5: STEP 5: BIAS"}, {"step": 6, "steps_text": "     This is my favorite part.  If the signal went into the analog pins of the Arduino right now the scope would totally work.  However, it would bottleneck on the Arduino analog to digital converter (ADC) and limit at 100,000 samples per second.  Bob's book teaches us to overcome this limitation utilizing an external ADC.  Chapter 3 covers several of these converters, only one of which is going to get any playtime here.  If you are interested in trying different versions, I totally recommend spending the ten bucks to get the book.  He does a good bit of research and explanation, and I have a feeling I will be using these things for a lot more than just oscilloscopes in the future.     In order to output a picture of your signal to a digital monitor, the signal must be converted from analog to digital by something.  I chose a TDA8703 24 pin DIP because it was less than 8 bucks on ebay brand new, and it's lightning fast.  It will do 40-50MHz!  This chip runs on an external clock, and since my knock-off Arduino UNO runs on a 16MHz clock, I decided to buy a 16MHz for my chip too.  Looking back, I can't really remember why I bought the 4-pin version of the clock, but it works, so I'm not messing with it.        The schematic is pretty straightforward except for that one wire that goes off to the Arduino clock.  That part took me a while to figure out because Bob had a nice authentic Arduino with a removable processor.  Mine was a cheapy knock off.  The book wanted me to link the external clock of my ADC through a capacitor to the clock pin (9) on the Arduino's processor.  Unfortunately Arduweenies sometimes have a teeny little surface mount processor with very limited access to pins, and effectively no access when you take mucky soldering skills into account.  My brilliant professor, Dave Dunlop, took one look at my microcontroller and said, \"See that little silver elliptical dome that says 16 on top?  That's your clock.\"  I plugged it in and sure enough, my borrowed oscilloscope showed a 16MHz output on the ends at the base.  It was even substantial enough to be soldered onto!  Now if I look at the signal being sent to the input of my ADC, it's kinda ugly because it is the result of the addition of these two clocks.  This doesn't really matter because the ADC is set up to trigger on the rising side of the wave, and as long as it doesn't dip back down below trigger level between pulses it will work just fine.     Note: I got pretty lucky here because I had already downloaded my program.  Later on I realized that once you solder a wire onto that clock, you have about a 1 in 20 shot at any future success with downloads even if the other end of the wire is just hanging out in space.  Not sure why.  I haven't tried unsoldering it and testing the Arduino because my scope works, and I'm keeping it.  Skip over to Step 7 and download the program before you go ahead and solder anything to the clock.     If you are fortunate enough to have access to a signal generator you can test your circuit for functionality now.  Input a slow pulse, say around 10 Hz and stick an LED between any of your digital outs (D0-D7) and ground. If it's working you'll get a nice steady blink.  My smart instructor Scott Walker at UVU turned me onto this little trick!", "step_imgs": ["https://cdn.instructables.com/FJZ/RV9Q/IHUUE3DE/FJZRV9QIHUUE3DE.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 6: STEP 6: CONVERTING ANALOG TO DIGITAL"}, {"step": 7, "steps_text": "     There are two parts to the programming because the oscilloscope uses two brains.  The first part is the Arduino code which is mostly just a bunch of repetition.  It waits for a trigger and then collects digital inputs using the command PIND to read pins D0-D7 simultaneously.  I have the loop set up to take 1000 samples and then send 1000 samples.  You could change it to take more or less pretty easily.  Each different wavelength will have a minimum sample rate necessary to get a clear picture.                                Frequency * Wavelength = Speed of Light (a constant) so the slower frequencies have proportionally longer wavelengths and are therefore more susceptible to errors from sample size.  Really high frequencies on the other hand might not get sampled fast enough to represent what they are doing.  I haven't spent the time to find my cutoffs yet, but I will probably update this instructable with that info later on.       Originally I had intended to build my entire scope using a model from Davis' book.  Then I fried my little screen a week before it was due and had to come up with a different solution overnight.  I googled how to connect my Arduino output to my laptop screen and came up with an obscure little data acquisition macro for Excel.  This baby does two things I like.  First, it logs all incoming data in an Excel spreadsheet.  Second, it displays the info graphically on a chart.  Be careful though.  You can only connect for 10 or 20 seconds before you have so much data that it overloads Excel and locks up.  This is not really a problem for a scoper since the signals we want to view are happening a bazillion times per second.  If it isn't happening in 20, it probably isn't going to.       This is the link for the download:  https://www.parallax.com/downloads/plx-daq   Once you get that open, simply move the \"Simple Data with Plots\" tab into first position.  The program may start with a warning about ActiveX controls, but just hit okay, and it chugs right along.  You are going to see a small box on your screen with Control and Settings listed.  Change the baud rate to 128000 because that's the rate I put in the code, and it needs to match.  Figure out which port your oscilloscope is connected to using your computer's control panel, and set that as well.  Now just click Connect and watch the data start streaming in.  Stop it at around 5-10000 by hitting Disconnect.  Delete the chart that automatically pops up and click on the Insert tab.  If you select recommended charts you should see a line graph, and when you click on it it will automatically populate with your data.  You can change the range of data it covers, the look of the axes, add secondary axes...I don't frankly know everything it can do, but it does a lot!  Now if you click on Clear Columns and hit Connect again, you will see your signal come across the screen in real time.  Voila, your scope is done.      Note:  If you are not lucky enough to have Excel, you are going to have to find some other way to output your signal image.  Davis details programming for several different displays.  They are relatively inexpensive, and the book provides the entire code for about 8 different varieties.", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 7: STEP 7: PROGRAMMING"}], "channel": "Arduino"}, {"category": "technology", "description": "In this instructable we will show how you can use Python with the Vpython library to begin to create some pretty cool graphics for presenting sensor data from the Arduino. For this instructable, we will be using the HC-SR04 ultrasonic sensor.", "title": "SIMPLE VIRTUAL WORLD USING ULTRASONIC SENSOR", "url": "https://www.instructables.com/id/SIMPLE-VIRTUAL-WORLD-USING-ULTRASONIC-SENSOR/", "section": "technology", "steps": [{"step": 1, "steps_text": "Since the object of this lesson is to show what you can do using Python and Vpython, I will not go through the arduino code step-by-step. You can go back to the earlier lessons for more info on the HC-SR04 sensor. The code that will allow the sensor to make distance measurements is presented again here. The one thing to note is that since we are going to be using Python to graphically present the data coming from the sensor, we want to simply send the distance measurement over the serial port,and no words or anything else, just the raw distance measurement. This will simplify things on the Python side. Remember that when we do a Serial.println() command in arduino, we can read whatever is printed into Python", "step_imgs": ["https://cdn.instructables.com/FL9/2DBC/IUOHP6YJ/FL92DBCIUOHP6YJ.LARGE.jpg"], "step_title": "Step 1: Circuit Diagram:"}, {"step": 2, "steps_text": "The code below is what you need on the Arduino side.This code will be constantly sending the distance to the target out over the Serial port.int trigPin=13; //Sensor Trig pin connected to Arduino pin 13<p>int echoPin=11;  //Sensor Echo pin connected to Arduino pin 11\nfloat pingTime;  //time for ping to travel from sensor to target and return\nfloat targetDistance; //Distance to Target in inches\nfloat speedOfSound=776.5; //Speed of sound in miles per hour when temp is 77 degrees.\n \nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n}\n \nvoid loop() {\n  // put your main code here, to run repeatedly:\n  \n  digitalWrite(trigPin, LOW); //Set trigger pin low\n  delayMicroseconds(2000); //Let signal settle\n  digitalWrite(trigPin, HIGH); //Set trigPin high\n  delayMicroseconds(15); //Delay in high state\n  digitalWrite(trigPin, LOW); //ping has now been sent\n  delayMicroseconds(10); //Delay in low state\n  \n  pingTime = pulseIn(echoPin, HIGH);  //pingTime is presented in microceconds\n  pingTime=pingTime/1000000; //convert pingTime to seconds by dividing by 1000000 (microseconds in a second)\n  pingTime=pingTime/3600; //convert pingtime to hourse by dividing by 3600 (seconds in an hour)\n  targetDistance= speedOfSound * pingTime;  //This will be in miles, since speed of sound was miles per hour\n  targetDistance=targetDistance/2; //Remember ping travels to target and back from target, so you must divide by 2 for actual target distance.\n  targetDistance= targetDistance*63360;    //Convert miles to inches by multipling by 63360 (inches per mile)\n  \n  Serial.println(targetDistance);\n  \n  delay(100); //delay tenth of a  second to slow things do}", "step_imgs": ["https://cdn.instructables.com/FP4/JSTH/IUOHP6S0/FP4JSTHIUOHP6S0.LARGE.jpg"], "step_title": "Step 2:  Code(ARDUINO UNO)"}, {"step": 3, "steps_text": "On the Python side, our first task is to read that data in over the serial port.  To do this, you must import the serial library.ou then create a serial object which will be used to read the data. In the sample below, we call the object \u2018arduinoSerialData\u2019. We then create a While loop that loops continuously. Inside that loop we check to see if there is any data available on the serial port, and if there is, we read it into the variable myData, and print it.import serial #Import Serial Library\narduinoSerialData = serial.Serial('com11',9600) \n while (1==1):\n    if (arduinoSerialData.inWaiting()>0):\n        myData = arduinoSerialData.readline()\n        print myDataRemember than in the line that creates the adruinoSerialData object, you need to change the com port to whatever com port your arduino is sending on. You can see this by looking under tools- port in your arduino IDE window. Also, this format is for windows machines. You would have to adjust for apple computers.It is important to remember that the command .readline() in Python will read a string, so we need to remember that myData is a string, and if we want to use it as a number we will need to convert it to a float, with something like distance = float (myData). Then distance will be a normal number, not a string. As a first demonstration lets create an object using the vPython library that is a cylinder. We will need to import the vPython library, and we will create the object before the while loop, and then inside the while loop, we will adjust the length parameter of the cylinder. We will make the cylinder with a length of six inches, we will make it yellow in color, and with a radius of 1/2 inch. Also, when we are using Vpython and dynamically updating a graphic object, inside the loop that is adjusting the graphic, we have to issue a rate() command. The rate command tells vPython how many times a second you want to go through the loop. You need to play with this command, so that it gives smooth graphics for the rate at which the Arduino is sending data. rate(20) is sometimes a good starting point. So, our code now looks like this:import serial #Import Serial Librar\nfrom visual import * #Import all the vPython library\n \narduinoSerialData = serial.Serial('com11', 9600) \nmeasuringRod = cylinder( title=\"My Meter\", radius= .5, length=6,\n                             color=color.yellow, pos=(-3,0,0))\nwhile (1==1):  \n    rate(20\n    if (arduinoSerialData.inWaiting()>0):\n        myData = arduinoSerialData.readline() \n        print myData \n        distance = float(myData) \n        measuringRod.length=distance So, this is pretty cool! It creates a little rod, and the length of the little rod dynamically changes in response to how far your target is from your sensor. This gives a very nice qualitative visual to what is happening in the real world with your sensor. Often times you also want quantitative indication of the data.  We can do that by adding a label. Before the while loop, we will create a label object called lengthLabel. We will position it up just a little bit, so it is not on top of the measuringRod. We will set the label initially to \u2018Target Distance is: \u2018. We will also want to set box=false, since we do not want a box around our text. Then, a good height for the label is about 30 pixels. You can play around with all these settings. We create the lengthLabel before the while loop, but then inside the while loop we dynamically update the lengthLabel.text parameter. We set it to our myLabel string, which is dynamically being updated to be the concatination of the string \u2018Target Distance is: \u2018 and the string myData. Remember, myData is read as a string, and so we use that variable, and not distance, which is a number, not a string. Pulling this together leads to this code:import serial #Import Serial Library\nfrom visual import *\narduinoSerialData = serial.Serial('com11', 9600) \nmeasuringRod = cylinder( radius= .5, length=6, \n                          color=color.yellow, pos=(-3,0,0))\nlengthLabel = label(pos=(0,1,0), text='Target Distance is: ',\n                                        box=false, height=30)\nwhile (1==1): \n    rate(20)\n    if (arduinoSerialData.inWaiting()>0): \n        myData = arduinoSerialData.readline() \n        print myData \n        distance = float(myData) \n        measuringRod.length=distance \n        myLabel= 'Target Distance is: ' + myData\n        lengthLabel.text = myLabel Lets keep playing around with this. The graphic will begin to look more like a\u2019Virtual World\u2019 if we create a box to represent the target we are using in the real world.  I will make the box the dimensions of the real target, which is .2 X 3 X 3. Also, I will make it green, just like the target in the real world. In order to better fill our viewing window, I will move the cylinder down by about 2 inches, so its new position will be (-3,-2,0). For box type objects position is measured from the center, so I will need to also move the target box down by about .5, so it will coincide with the measuring rod. this is because 1/2 the target would be 1.5, and moving down by an additional .5 will make it coincide with the measuringRod.Finally, I need to dynamically update the position of the target box in the while loop. I will need it to be placed at target.pos=(-3+distance,-.5,0). Along the x-axis this will put it right at the end of the rod, and will keep it properly positioned in y, as before. Bringing all this code together we get:import serialfrom visual import * #Import all the vPython library arduinoSerialData = serial.Serial('com15', 9600) \nmeasuringRod =  cylinder(radius= .1, length=6,\n                          color=color.red, pos=(-3,-2,0))\nlengthLabel = label(pos=(0,2,0),text='Target Distance is: ',\n                                box=false, height=30)\ntarget = box(color=color.white, length=.3,width=4, height=2,pos=(0,-.5,0))\nwhile (1==1):\n    rate(20)\n    if (arduinoSerialData.inWaiting()>0): \n        myData = arduinoSerialData.readline() \n        print myData \n        distance = float(myData)\n        measuringRod.length=distance \n        myLabel= 'Target Distance is: ' + myData\n        lengthLabel.text = myLabel \n        target.pos=(-3+distance,-.5,0)Play around with the parameters until you get something you are happy with. Also, you can change your view of the visual once the program is running. Right mouse click and you can change your positional view of the virtual world you have created. Press and scroll the mouse wheel to change the zoom.OK, you need to start exploring and creating your own virtual world. Go ahead and see if you can create additional objects to make your virtual world more realistic. Try creating a graphic for the sensor itself, and maybe even your PC board and arduino! You can refer to the Vpython site for more details on the 3D objects you can create, and their parameters at:  http://vpython.org/contents/docs/cylinder.html", "step_imgs": ["https://cdn.instructables.com/FUA/385K/IUOHP6SL/FUA385KIUOHP6SL.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 3: CODE(PYTHON)"}], "channel": "Software"}, {"category": "technology", "description": "Generally, an ultrasound sensor is used for the range of the target. where it sends the sound wave to target and reflected wave is captured by integrated receiver it measures an overall time of travel for the sound wave. As the speed of sound is known the distance from the target can be easily calculated. however, in my previous instructable, I tried to measure the location of the object in 2D by using two of this sensor. But the accuracy of the measurement was too poor for any practical use. this instructable can be accessed from below links:https://www.instructables.com/id/Ultrasound-Sensor...To solve the above problem using multiple sensors to make the measurement is proposed. This method I tried to implement in this instructable. Making hardware is very straightforward but making a code takes effort.", "title": "Accurate 2D Tracking Using Multiple HC-SR04 Ultrasound Sensor", "url": "https://www.instructables.com/id/Accurate-2D-Tracking-Using-Multiple-HC-SR04-Ultras/", "section": "technology", "steps": [{"step": 1, "steps_text": "These methods make use of multiple sensors. Higher the number of the sensor can be useful for more accurate measurement. Let take an example of a setup with 4 sensors (as I am using for the tutorial). So after finishing measurement, we will have the distance to target from all of this sensor. To calculate the position of the target in the lateral direction we need two measurements to complete a triangle and locate the target position. As we have 4 sensors we will have 6 combinations (4C2) of pairs. This pairs can be seen from the above images.Once the pair is decided we have to calculate the target location for every combination of the sensor pair. In the end, there will be six number of measurements for the target location. By using all these six values relatively accurate measurement can be made. now all these data is fused with weightage as per accuracy. if we consider a triange than the higher distance between sensor will lead more accurate. So higher weightage is given to the pair having sensor far from each other.This method is still not very accurate as we are not making the measurement from the single point target. as the target is a planner object sensor will measure the distance from the nearest point.", "step_imgs": ["https://cdn.instructables.com/FXM/R9OA/JQGYO1EA/FXMR9OAJQGYO1EA.LARGE.jpg", "https://cdn.instructables.com/F5L/F8BE/JQGYO1ED/F5LF8BEJQGYO1ED.LARGE.jpg", "https://cdn.instructables.com/F6L/JZZ0/JQGYO1FI/F6LJZZ0JQGYO1FI.LARGE.jpg"], "step_title": "Step 1: Working"}, {"step": 2, "steps_text": "This setup is very simple and similar to the previous tutorial on 2d tracking with two sensors. Ground supply and Vcc is connected to a common line and all Tx and Rx pin are connected to one of the Arduino pins. It can be connected to any of the Arduino pins that need to be defined in code. Above image can be referred for the overall connections. After that, all these sensors need to be mounted with a fixed distance. similar to the previous case, higher separation will lead to better accuracy and vice versa. the sensor may face in any direction for best coverage. In this case higher the number of sensors will face the target better result we can obtain.", "step_imgs": ["https://cdn.instructables.com/F16/UK9R/JQGYOBJK/F16UK9RJQGYOBJK.LARGE.jpg", "https://cdn.instructables.com/FCH/QJV6/JQGYOBNB/FCHQJV6JQGYOBNB.LARGE.jpg"], "step_title": "Step 2: Preparing Setup"}, {"step": 3, "steps_text": "There are basically 4 functions that work to get accurate output and avoid a false reading.1. Raw_cap():This function will simply take data from the available sensor, sensor number can be any number, as discussed higher number will give better accuracy. another point need to consider is that in the command pulseIn(Rx[i], HIGH,5000);value 5000 need to be changed as per object placement, once we had the approx operating range we can calculate the value of time taken (in microseconds) by the sound wave to travel through and back to the range and replace with 5000.at the completion of the function, we will end up with an array having values measured by all sensors.2. Position_calc():This function will take various combinations (nC2 for n number of the sensor) and will calculate the position of the target in 2D,3. check();This function will check every combination taken by position_calc() function is possible to form a triangle or not. If this function concludes this test negative Position_calc() will simply make entry as 0 values,this function is very avoided considering the wrong values of the sensor. This function makes use of property that summation of the length of any two sides of the triangle is always higher than the length of rest 3rd side of the triangle.4. Fuse_data()Above function will take the weighted average of all measurement, weigtage proportional to distance in between the pair of the sensor.", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 3: Working of Code"}, {"step": 4, "steps_text": "Values like the number of sensor and sizes of arrays as commented in code need to be updated. another important parameter is the distance between these sensor need to be defined. here distance from the leftmost sensor to all sensor is added in an array named Position [ ].once everything is setup target can be placed in front of the sensors and check the output from the sensor. please refer the video below for check the working of the sensor.", "step_imgs": [], "step_title": "Step 4: Setting Up the Code and Testing the Output:"}, {"step": 5, "steps_text": "These type of setup can be more useful to check a quick scan over the large angular area and also to get more accurate measurement. An angularly rotating servo (on the servo) is not very effective as the servo is not fast enough to do the measurement at the faster rate. For example in an autonomous car example, this type of sensor layout can be used to have a correct estimation of obstacles.However, the following project can be taken up for the future:- Ultrasound sensor for tracking in 3d;- All sensor can be mounted on the separate servo motor to track the object properly and keep in always in the operating area of all sensor. and also to keep the wide area under the scanning zone.", "step_imgs": [], "step_title": "Step 5: Conclusion:"}], "channel": "Arduino"}, {"category": "technology", "description": "In this instructable we are going to explore how to filter out undesirable noise from our accelerometer readings. When I say \u201cundesirable noise\u201d I am referring to erratic fluctuations in the readings caused by vibrations or an unsteady hand.This instructable is a continuation of the previous Simple Accelerometer In labVIEW. To proceed you must have completed the prior project.Note: No additional materials are needed.", "title": "Filtering Accelerometer Noise in LabVIEW", "url": "https://www.instructables.com/id/Filtering-Accelerometer-Noise-In-labVIEW/", "section": "technology", "steps": [{"step": 1, "steps_text": "General OverviewThe code I have provided is built off of the previous projects. You may have noticed there are two loop structures. The first is what I refer to as the \u201cData Aquistion Loop\u201d which essentially reads data from the chipKIT as quickly as it can. The second loop I refer to as the \u201cCalculations Loop\u201d. This loop handles any calculations we want to do with the data.  The reason I separate the data acquisition operations from the data calculations is to boost performance. LabVIEW is smart enough to compile the code in each loop so it will run on a separate core of your processor. In order to transfer data between the two loops, I use a local variable. Every time the Calculation loop iterates, it reads data from the \u201cXYZ Calibrated Values\u201d variable. For this particular project I have included two data plots. One displays the raw data, while the other displays the filtered data. The plots are a good tool for determining how effective our filtering is. Unfortunately the data plots bug out if the calculations loop iterates to fast. So a time delay must be included to cap the loop rate.Filtering SubVI OverviewAll of the filtering in this project is done in a custom subVI. This subVI helps keep the code neat and understandable.  Inside the subVI there are two types of filtering methods employed. The first is simple Averaging, and the second is Low Pass Butterworth Filtering. Each Filtering method has an On/Off selection switch. When the switch is On, it spits out the filtered data. When the switch is off, it spits out the raw unfiltered data.Filtering using Averages If you recall from the previous project, the raw data input would update so quickly it was hard to read. To counteract this, we want to average (take the mean) of a couple data points and display that value. If we average the right number data points, the data will be displayed at a readable rate. To accomplish this I used the \u201cMean PtByPt.vi\u201d. Here is some more info on it if you are curious about how it works.Filtering using a Lowpass filterAnother problem you may have encountered in the previous instructable is the erratic jumpiness of the data. This could be due to external vibrations or the wavering of your hand. To get rid of this you can use a Low pass filter. Essentially the low pass filter smooth\u2019s out the abrupt jumps between data points. The particular lowpass filter I used in this project is the \u201cButterworth Filter PtByPt.vi\u201d. If you are curious about how this .vi works, check out its documentation. Note that this VI can be configured to act as 4 different types of filters (Lowpass, Highpass, Bandpass, or Bandstop). We are only concerned with Lowpass filtering, hence the \u201chigh cuttof freq: fh\u201d terminal is left unconnected.", "step_imgs": ["https://cdn.instructables.com/FLH/R6IT/I34E52V0/FLHR6ITI34E52V0.LARGE.jpg", "https://cdn.instructables.com/F2S/AE8O/I34E52V2/F2SAE8OI34E52V2.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 1: Code"}, {"step": 2, "steps_text": "In order to get good filtering results you must understand how to properly set its parameters and operate the program. First off it is important to note that we are using two loops in this VI. The first loop updates the \u201cData Acquisition Panel\u201d, and the second updates the \u201cData Calculations Panel\u201d. Each loop has its own separate stop button, so in order to stop the entire VI you must hit both stop buttons one after another.Data PlotsOn the Data Calculations Panel you can see there are two data plots. One displays the raw data before it is filtered, the other displays the data after it has been filtered. By comparing both plots we can see the effect our filter has had.  The data plots continuously plot data as it is received. You can control the number of data points displayed in each plot by using the \u201cNum Plot Points\u201d control. This essentially lets you zoom the plots in or out as depicted here.Setting Averaging ParametersNext we are going to look at how only the data point averaging effects our filtered signal. So, for this portion the lowpass filter will be disabled. Start to consistently shake the accelerometer to generate some noise to filter. Now try enabling/disabling the averaging filter to see what effect it has. Play with the number of data points until you get your desired results. I have found that 3 data points provides good enough results with out to much delay.Setting the Lowpass Filter ParametersNext we are going to look at how the lowpass filter effects our results. So, for this portion the averaging filter will be disabled. Again, start consistently shaking the accelerometer to generate some noise to calibrate the filter with. Try enabling/disabling the lowpass filter to see what effect it has. Play with the number of data points until you get your desired results.  By default the lowpass filter is set with a cutoff of 10 Hz, and a filtering order of 1.  Here is a synopsis of what each parameter does.  Low Freq Cutoff: The filters cutoff frequency determines what frequency of noise in the data will be removed (a 10Hz cutoff will filter out noise what is greater than 10 Hz).  Filtering Order: The filtering order controls how aggressive our lowpass filter is at smoothing out noise that occurs above the cutoff frequency. A higher filtering order will smooth the noise more. This is great but higher filtering orders will also bleed over the edge the cutoff frequency more and smooth data we want might want to leave alone.To update either of the lowpass filter parameters you must press and release the \u201cUpdate Filter Paramaters\u201d button. After that you should see how the new parameters are affecting your results.Looprate Filter ParameterDepending on how fast your computer is, and what your COM port latency is set to, the Data acquisition and calculations loops will iterate a certain number of times per second. For whatever reason the Lowpass Butterworth filter VI provided by National Instruments needs to know approximately how often the loop is iterating. If you don\u2019t provide it with a value close to the actual loop rate, your Lowpass filter\u2019s performance will degrade as depicted here. So to properly set the \u201cGuess at Filter VI Loop Rate (Hz)\u201d parameter, run the VI and see what the approximate loop rates are; Then just plug that value in.NOTE: Do not modify the code so the actual loop rate value feeds into Filter\u2019s Loop rate parameter.  This will update the filter every loop iteration causing it to malfunction.That pretty much sums up how to adjust the filter settings. Getting the filter to work for your exact application will require you to tweak all the values to work in tandem. Experiment and see what works best for your! ", "step_imgs": ["https://cdn.instructables.com/FBD/ICCV/I38SB1ZS/FBDICCVI38SB1ZS.LARGE.jpg"], "step_title": "Step 2: Setting the Filter Controls "}], "channel": "Microcontrollers"}, {"category": "technology", "description": "The purpose of this Instructable is to show you how to write a half-life program on your calculator. The program will make it very quick and easy to find to half-life, initialmass, time, or final mass. All you have to do is enter three of the variables (I will explain more on this later) and the calculator will compute the fourth one. This means no more logarithms or decimal exponents!", "title": "Half-Life Calculator Program (Ti-89, Ti-84, and Ti-83)", "url": "https://www.instructables.com/id/Half-Life-Calculator-Program-Ti-89-Ti-84-and-Ti/", "section": "technology", "steps": [{"step": 1, "steps_text": "\u00a0The name of the program can be whatever you want.\u00a0 I simply called it \"hl\" because it is nice and short.Ti-89\nTo create the program, just follow the pictures.\u00a0Ti-83 & Ti-84\nI can't take screen shots on my Ti-83 so you will just have to follow my directions.\n1. Press PRGM and arrow over to \"NEW\" and\n2.\u00a0Hit enter and give the program a name. (It must be 8 or less characters)", "step_imgs": ["https://cdn.instructables.com/F53/LUEE/GV279LCX/F53LUEEGV279LCX.LARGE.jpg", "https://cdn.instructables.com/FHZ/S7IF/GV279LCW/FHZS7IFGV279LCW.LARGE.jpg", "https://cdn.instructables.com/FUN/4S16/GV279LCV/FUN4S16GV279LCV.LARGE.jpg"], "step_title": "Step 1: Creating the Program"}, {"step": 2, "steps_text": "The easiest way to write the program is to look at the extended screenshot I made.\u00a0 It is crucial to type everything EXACTLY as it is in the picture.\u00a0 One error could mess up the entire program. Make sure you type the correct amount of parentheses.Ti-89\nDepending on how familiar you are with programing, you might not know how to enter some of the commands.\u00a0 Here's how to type all the symbols you will need.\nThe colon represents one line of commands.\u00a0 Hit enter to get to the next line. To type the extra colons on line four, press 2nd then 4.\nTo input \"Prompt\" press F3, 5\nThe fastest way to type letters is by pressing \"alpha\" twice to turn on alpha lock\nFor the \"If\u00a0 Then\" command, press F2, 2, Enter\nThe arrow is created by pressing the STO> button (it's right above the ON button)\nTo input \"Disp\" press F3, 2\nYou can type quotes by pressing 2nd, 1Ti-83 & Ti-84\n*Please read the list below because your program won't look exactly like the one in the picture!\nYour program will start off differently from the picture.\u00a0 Type (To type \"Input\"\u00a0press PRGM, right arrow, enter)(To type the extra colons, press \"alpha\", \".\")\u00a0\u00a0\u00a0 Input \"halflife\",x:Input \"mass\",y:Input \"time\",z:Input \"mass2\",t\nThe colon represents one line of commands.\u00a0 Hit enter to get to the next line.\nTo input \"Prompt\" press PRGM, right arrow, 2\nThe fastest way to type letters is by pressing 2nd, \"alpha\"\u00a0to turn on alpha lock\nFor the \"If\u00a0\" command, press PRGM, 1\nTo type the equals sign, press 2nd, \"MATH\", enter\nFor the \"Then\" command (This should be on its own line for the Ti-83 and 84), press PRGM, 2\nWhere the picture says \"EndIf\" type \"End\" (PRGM, 7) instead\nThe arrow is created by pressing the STO> button (it's right above the ON button)\nYou can type quotes by pressing \"alpha\", \"+\"", "step_imgs": ["https://cdn.instructables.com/FS0/DMGR/GV279LCN/FS0DMGRGV279LCN.LARGE.jpg"], "step_title": "Step 2: Writing the Program"}, {"step": 3, "steps_text": "In order to use this program you must input three variables and the calculator will give you the fourth one.\u00a0 The four variables are the half-life, Initial mass, time, and the second mass.\u00a0 You must input 0 (zero) for the variable that you want the calculator to find.\nHere's how to start the programTi-89\nType the name of your program in the home screen the end it with two parentheses. Then hit enterMine looks like this: Ex. hl()\nTi-83 &Ti-84\nPress PRGM (as if you haven't done that enough yet!) then use the arrows or numbers to select the half-life program.\u00a0 Then hit enter.", "step_imgs": ["https://cdn.instructables.com/FNO/7O9I/GV279LBY/FNO7O9IGV279LBY.LARGE.jpg"], "step_title": "Step 3: Using the Half-Life Program"}, {"step": 4, "steps_text": "I will finally show you the four ways this program can be used.\u00a0In the red is the half-life of carbon-14,\u00a0green is the mass,\u00a0blue is the time, and the\u00a0yellow is the second mass.\n1. Solve for the second mass (yellow)\nType in 5730 and\u00a0hit enter\nType in 128 and hit enter\nType in 11460 and hit enter\nTo solve for \"Mass2\" type in 0 (zero)\n*The answer should be 32*\n2. Solve for time (blue)\nType in the half-life, mass and mass2\nType zero for the time\n*The answer should be 11460*\n3. Solve for\u00a0Mass (the first one) (green)\nType in half-life, time and mass2\nType zero in for \"Mass\"\u00a0\u00a0\n*The answer should be 128*\n4. Solve for\u00a0Half-life\nType in mass, time and mass2\nType in zero for \"halflife\"\n*The answer should be 5730*\nIf you do not get the right answer, double-check your program for errors.\u00a0 If you need more help with anything, even if it's not just about this program don't hesitate to ask!\nHere are the links to my other programs (they are meant for the Ti-83 and 84 but you can pretty easily change them for the Ti-89)https://www.instructables.com/id/Quadratic-Formula-for-the-TI-83-and-84/https://www.instructables.com/id/Herons-Formula-program-for-the-TI-83-and-84/", "step_imgs": ["https://cdn.instructables.com/FTA/F7T4/GV279MSJ/FTAF7T4GV279MSJ.LARGE.jpg"], "step_title": "Step 4: Using the Program"}], "channel": "Software"}, {"category": "technology", "description": "*******************************************************************************STOP STOP STOP STOP STOP STOP STOP STOP STOP STOPThis is an obsolete project.Instead check my new 2x16 lcd display version available here:https://www.instructables.com/id/GPSDO-YT-10-Mhz-L...I left the old version here for documentation.*******************************************************************************Hi guys,What is a GPSDO ? GPSDO means: GPS disciplined oscillator. GPS for global positioning system. All GPS satellites are equipped with synchronized atomic clock. GPS module receives these signals from several satellites. And by triangulation, he knows his location. But here, what interests us is the pulse per second that is found on the module. With this precise pulse (from atomic clock), we can do a very very accurate oscillator. What for ? For reference, for calibration of frequency counter or just for fun to have one in his lab.They are many schematic on the internet. I have tried some. Some are good, one with a tiny2313 was 5 hertz too slow. But mine is the most simple, useful and convenient. And i'm giving you the .hex code. They are no VCO and no divider. Circuit with VCO are doing well. But, it must have a pulse signal of 10khz or more continuously. If antenna goes too weak, missing pulse or no pulse at all, the Oscillator (ocxo) is running by itself and the VFC (Voltage Frequency Control) isn't accurate anymore. The VCO feedback needs reference frequency to stick on. If not, It varies from a 1 to 2 Hertz! Also, the cheaper gps module doesn't work in this configuration. We must have at least 10khz to make a VCO. I tried with 1000 hertz. The gap was too large.The frequency varied. So with a ublox neo-6m you can't do a great vco gpsdo because maximum output frequency is 1000Hz. You must buy a neo-7m or upper.This is how my GPSDO YT works. The controller found the good adjustment for any OCXO with vfc 0 to 5v. If we loose GPs signal, the frequency doesn't move at all. When the signal reappears, the controller takes his last known good value and continue as before. On scope, with a reference oscillator. We can't tell when the signal is lost or when it came back. The signal is the same.After calibration, you can use the gpsdo without antenna if you want. A few mounts later you will have a very little drift. But.... how much larger ? It's time for some explanation.Here is some Math... Easy math, follow me with this it's easy. So far the algorithm has 6 phases. Each phase takes a sample of 1 to 1000 seconds, found the good pwm adjustment and go to most longer samples for more accuracy.Accuracy = (((Number of second x 10E6) + 1)/number of second) - 10E6Phase 1, 1 second sample for 10,000,000 counts for +- 1 Hz accuracyphase 2, 10 seconds sample for 100,000,000 counts for +-0.1Hz accuracyPhase 3, 60 seconds sample for 600,000,000 counts for +-0.01666 Hz accuracyPhase 4, 200 seconds Sample for 2,000,000,000 counts for +-0.005 Hz accuracyPhase 5, 900 seconds sample for 9,000,000,000 counts for +-0.001111 Hz accuracyPhase 6, 1000 seconds sample for 10 billions counts for +-0.001 Hz accuracyWorst case . When we get phase 6. This number can change a bit each 1000 seconds or not. some time it will be 10,000,000,001 or 9,999,999,999 So, +or - 0,000,000.001 variation for 1000s. Now we must know the value for 1 second.10Mhz = 1 secondFor 1 second = 10,000,000,001 count/1000s = 10,000,000.001 Hz (worst case for 1 second)10,000,000.001 - 10,000,000 = 0.001 Hz/s   faster or slower0.001Hz X 60 X 60 X24 X365 = 31536 Hz/yearsSo remember,  10Mhz is 1 second, 31536Hz X 1 / 10E6 = 0,0031536 second/ yearAnother faster method for calculation. one miss fo 10E9Mhz is 1/10E9= 1E-101E-10 x 60x60x24x365 = 0,0031536 second/year.Is that accurate enough for you?however, you must have a good OXCO. I prefer Double Oven 12v Sinus output. More stable, quiet and accurate. But i have same result with simple 5V. For exemple, a stp 2187 have a stability short time (allan deviation) of 2x10-12 = 0.000,000,000,02 Hz of stability. In the same time, when gps pulse is available, Avr will always correct pwm (frequency). The uC is always counting... always. This mean that on display you will not see date and time. When uC is sampling 900s, this one is busy for 900 seconds. It must count all clock. Problem is uC is running at 10Mhz. Each clock must be count. It is counting itself. If only one clock is missing the sample will not be good and pwm adjustement will not be right. I can't refresh display each second.When the sampling is started. Uc start to count timer0. Each 256 clock generates an interruption. X register is incremented. when it's full Y register is incremented and X reseted to 0 and so on. At the end, at he last one gps pulse, the count is stopped. And now and only now i can update display and do some math for pwm calculation.knowing that, i have only 25,6 us (256 clock before interrupt) to read and display time or other. It's impossible. One interrution can be buffed, not 2. I could refresh the time after 1000s... but it will be not pratical to see time with 15, 16 minutes interval. I have a watch, a clock, a cell phone to know time :) I'm doing a 10Mhz reference. Not a clock.Another problem i had, some avr instruction have 2 cycles. Including the rjmp instruction. This means if the first or last gps pulse came up at the same time of a 2 cycles instruction, the uC will miss a clock. Because uC will finish the instruction before begin the interrupt. So the counter will start or stop one cycle later. So i can't do a time wait loop... But in fact, i have no other choice. I needed to loop somewhere!! I So i'm using rjmp and  nop (this do nothing) instruction. Nop is an one cycle instruction. I have put 400 nop instruction for one rjmp on atmega48. 2000 on atmega88 and atmega328p version. So the chances are less to first or last pulse come at rjmp instruction. But yes it's possible and if this happen, this error will be corrected at the next sampling.The display is optional. You can do circuit with, uC, OCXO and low-pass filter (resistor capacitor) only, turn on and wait. After 1 hour you will have an acceptable frequency. But to reach phase 6. It takes a couple of hours.Pwm is 16 bits. 65535 step. 5v/65535 = 76,295 uVOCXO variation is 2Hz by 1V.  1v/76,295uV = 13107 step for 2 hz. 2/13107 = 152.59uHz by step of pwmThe phase 5, is changing pwm by 3, phase 6 is 2. step... Why 3 ? because 3 is changing frequency by 0.000,000,000,4 at 15 minutes scale. and 4 is my magic number in my algorithm. For exemple, if in phase one,  first frequency found is 10.000,003Mhz. I lower down by 0,000,000.4 step.Too large step can pass from 10.000003 to 10.000001 and after 9,999998Hz. I'm missing the target.With 0,0000004. It's quicker than 0,1 and i'm more sure of not bypass a number. And so on. I'm doing the same with 10 seconds, 60 seconds and 200s phase and 900s. 1000s is running mode and use a pwm step of 2Please note that phase 5 is more longer to achieve. The gap between 4 and 5 is larger. But it help to pass from 5 to 6 quicker.When phase 6 has counted exactly 10 billions, the pwm values is saved in eeprom. Now, it's time for the running mode. This one count 1000 seconds sample but with 2 step pwm only. At running mode, the real frequency is displayed and updated at 1000 seconds interval. If signal is lost in running mode it pass in self running. No change of pwm in this mode. When signal come back, it return to phase 5 to resynchronization.If circuit is unplug after eeprom is saved. This one will begin at phase 5 at power on with eeprom pwm value.For erasing eeprom value, just press the button at at start-up. Pwm 50% will be load and calibration will start from phase 1.I pass many hours to try different thing, configuration of the circuit. I did many tests, with OP amp, buffer and other chip. And at the end... the best result i got doesn't need it. Just a good stable power supply and some filtering capacitor. So I keep this simple.", "title": "GPSDO YT, Disciplined Oscillator 10Mhz Reference Frequency. Low Cost. Accurate.", "url": "https://www.instructables.com/id/GPSDO-YT-Disciplined-Oscillator-10Mhz-Reference-Fr/", "section": "technology", "steps": [{"step": 1, "steps_text": "The first thing to do is buy the parts. Because often shipping is very very long.Gps module: I'm using a ublox neo-6m. I bought this one on ebay. Do a search, it's cost about 7 to 10 us dollars.By default, this receiver have the 1 pulse by second enabled. We don't need to do anything.You can use any gps module with a 1 Hertz pulse output. You have one. Use that!OCXO: I tried 2 oscillators. A double oven stp2187 12v sine wave output. And a ISOTEMP 131-100 5V, square wave output. Both come from radioparts16 on ebay. I had a very good service from them and the price was cheaper.AVR: Code fit on a little atmega48. But i suggest to buy an atmega88 or atmega328p. It's almost the same price. Buy this on digikey or ebay. I'm using the dip version. You can buy surface mount version, but pay attention, pins aren't the same to the schematic.Lcd display: Any 4x20 HD44780 compatible display will work. Guess where i bought mine :) Yes on ebay a couple years ago. Now it's more expensive than before. But available under $20 US.Maybe in the near future, i'll do a code for a 2x16 display. Those displays are only 4$. And between you and me, a 2 lines display would be sufficient.You must have an AVR ISP Programmer. Programming an AVR isn't like an Arduino. Arduino has already be programmed to communicate on serial port. A brand new avr must be programmed with ISP or Parallel High Voltage Programmer. We are using isp here. A 74hc04 or 74ac0, volt regulator 7812 and 7805, resistors, capacitor.... digikey, ebay", "step_imgs": ["https://cdn.instructables.com/FX6/EIB2/IWQV7LBS/FX6EIB2IWQV7LBS.LARGE.jpg", "https://cdn.instructables.com/F7U/71P0/IWQVD7FF/F7U71P0IWQVD7FF.LARGE.jpg", "https://cdn.instructables.com/FR5/Q0Y8/IWQVD7FV/FR5Q0Y8IWQVD7FV.LARGE.jpg"], "step_title": "Step 1: Buy Parts"}, {"step": 2, "steps_text": "I think that the schematic is all you need to realise this project. You can use a copper clad board with etching method or just perforated board if you like.You can use any box you want, but i suggest a metal box. Or just on a breadboard for fun like mine :)I'm waiting for antenna extension and bnc connector to put my project in a box.You must choose the right fuse bit. Be sure that external oscillator is selected. If you have trouble with External Oscillator, try External Crystal. And the low.ckdiv8 clock is unchecked. See picture. Pay attention, when the external clock fuses bit, you must provide an external clock to program or run the code. In other words, connect the Oscillator in xtal1 pin.By the way... you can use the same code to do a frequency counter with 1 second gate. Just enter clock to be measured in xtal1 pin and you will have a +-1 Hz frequency counter.I will be updating the project as soon as i have new stuff.In the meantime, if the project interests you, you have enough material to start and even finish it before meI uploaded 2 videos, you can see phase one and the last one.I'm available for any questions or comments. Thank you.February 26 2017.... Version 1.1 available.-atmega48 isn't supported anymore. Not enough space.-Added number of satellite locked.-Support 2x16 lcd. If you have a 4x20, will be working too. But 2 last line will display nothing.", "step_imgs": ["https://cdn.instructables.com/FHV/NYXT/IZSU5ED2/FHVNYXTIZSU5ED2.LARGE.jpg", "https://cdn.instructables.com/FZS/3FCR/IWQVD4MK/FZS3FCRIWQVD4MK.LARGE.jpg", "https://cdn.instructables.com/FTO/TOA4/IWQVDY7G/FTOTOA4IWQVDY7G.LARGE.jpg", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 2: Here Is Schematic and Gpsdo_YT_v1_0.hex"}, {"step": 3, "steps_text": "Here is the dump of eeprom after a couple hours uf running time. I'll explain how to read this. Again, it's easy :)At address 00,01 is stored pwm value. As soon phase 5 count 9 billion, pwm value is updated every time the counter reaches exactly 10 billion.As soon we are at phase 5. All counts are stored in eeprom after pwm value. Start at address 02, after 03 and so on.This exemple came from my 5 volts ocxo. We can read pwm value of 0x9A73 = 39539 decimal on 65536. = 60,33% or 3.0165 Volt.So address 00:01 is 0x9A73Next, you can read 03. For 9,000,000,003 Pwm is lowered by 3 because we are yet in phase 500 for 10,000,000.000  pwm stay is untouch and we pass to running mode (phase 6)02 for 10,000,000.002  In that case, pwm value is lowered from 201 for 10,000,000.001  pwm value is lowered from 201 for 10,000,000.001  pwm value is lowered from 2 again00 for 10,000,000.000  pwm stay is untouch00 for 10,000,000.000  pwm stay is untouch00 for 10,000,000.000  pwm stay is untouchNow you know how to read the eeprom. Each 1000 seconds new value is written in eeprom. When eeprom is full, it restarts from address 2.FF value mean 9,999,999.999You can with this dump track the accuracy, without any LCD display.You can dump the eeprom file with an isp programmer.I hope that i gave you enough information. If not, let me know. Advice, error, anything.Yannick", "step_imgs": ["https://cdn.instructables.com/FVA/R3QL/IWQVDKF0/FVAR3QLIWQVDKF0.LARGE.jpg"], "step_title": "Step 3: Logs in Eeprom"}], "channel": "Microcontrollers"}, {"category": "No category to show", "description": "Standard Deviation is a useful statistical measurement to determine where certain numerical values lie in a large group of numbers. The standard deviation is especially helpful during tests where students test scores are ranked among their peers to see how well their placements are. Some tests even give grades based on the standard deviation percentile rather than the test score.", "title": "Standard Deviation", "url": "https://www.instructables.com/id/Standard-Deviation/", "section": "home", "steps": [{"step": 1, "steps_text": "When given a set of number values to find the standard deviation, the first thing to do is find the mean of the given set of number values. The mean is represented by the Greek \"mu\" symbol (\u03bc) and it will be helpful later.To find the mean, add up all numerical values in a set and divide it by the total number of values in the set.As an example, Mrs. Green's class of sixth graders are given an assignment to find the standard deviation of the length of their feet (in inches) in a large group. The class of 30 splits up into three groups of 10 students each. Group A's measurements of their feet (in inches) are given below:8, 9, 7, 7, 11, 10, 8, 8, 12, 10Find the standard deviation of Group A's feet sizes to share with the class.First, the students need to find the sum of their measurements:8 + 9 + 7 + 7 + 11 + 10 + 8 + 8 + 12 + 10 = 90Next, the students find the mean by dividing the sum by the total number of measurements in the given set:90 / 10 = 9", "step_imgs": ["https://cdn.instructables.com/FW4/U6GL/IL4GPWBS/FW4U6GLIL4GPWBS.LARGE.jpg"], "step_title": "Step 1: Step 1: Determine the Mean"}, {"step": 2, "steps_text": "Now that the mean has been found, the second step will commence. Each value in a given number set must subtract the mean to find a new value, and then square that value.Continuing with the example of Mrs. Green's class, Group A will subtract the mean from each measurement and square the difference.7 - 9 = -2 => Squaring -2 will result in a positive 4 since two negatives make a positive (-2 x -2) = 4 (Two measurements)Continue this process for each measurement.8 - 9 = (-1)^2 = 1 (Three measurements)9 - 9 = (0)^2 = 010 - 9 = (1)^2 = 1 (Two measurements)11 - 9 = (2)^2 = 412 - 9 = (3)^2 = 9", "step_imgs": ["https://cdn.instructables.com/F8H/GSH4/IL4GPWCK/F8HGSH4IL4GPWCK.LARGE.jpg"], "step_title": "Step 2: Step 2: Subtract the Mean From Each Value"}, {"step": 3, "steps_text": "After finding the squared values of the differences between the mean and the measurements, find the mean of the squared values. The sigma symbol (\u03a3) represents continuous addition of a formula by the total number (n above symbol) of values in a given set. The n below the horizontal bar will divide the sum of the squared values by the total number of values.In the example of Mrs. Green's class, Group A has found the squared values of their measurements. They will find the sum of the squared values:1 + 0 + 4 + 4 + 4 + 1 + 1 + 1 + 9 + 1 = 26Group A will then divide the sum of the squared values by the total number of measurements, which is 10, to find a new mean:26 / 10 = 2.6", "step_imgs": ["https://cdn.instructables.com/FR5/0I0K/IL4GPWCL/FR50I0KIL4GPWCL.LARGE.jpg"], "step_title": "Step 3: Step 3: Determine the Mean of the Squared Values"}, {"step": 4, "steps_text": "The new mean of the squared values has been found. All that is left is to find the standard deviation by finding the square root of the mean.In the example of Mrs. Green's class, the students of Group A will square root the mean:\u221a 2.6 = 1.61245155The students will get a number with many digits behind the decimal place. Depending on how the teacher wants the students to round, the value can go to different decimal places. In the case of this example, Mrs. Green wants the value rounded to the nearest tenth:1.61245155 = 1.6Congratulations! You have found the standard deviation of the given set of measurements. The standard deviation can help find the different deviations away from the mean to determine where certain measurements fall in the total amount of values and locate any possible outliers.", "step_imgs": ["https://cdn.instructables.com/FXU/CFM8/IL4GPY8M/FXUCFM8IL4GPY8M.LARGE.jpg"], "step_title": "Step 4: Step 4: Square Root the Mean"}], "channel": "No channel to show"}, {"category": "No category to show", "description": "You have always wanted to make your own customized platpack measuring cup? I found the solution!In a few steps, you can make very easily your own measuring cup, with any cup, with your desired values.", "title": "Make a Flatpack Measuring Cup", "url": "https://www.instructables.com/id/Make-a-flatpack-measuring-cup/", "section": "home", "steps": [{"step": 1, "steps_text": "For this project you will need:- a cup- something to measure- silicone placemat- superglue- multitool or metal saw", "step_imgs": [], "step_title": "Step 1: Materials"}, {"step": 2, "steps_text": "Take your measuring tool and fill with water,Pour the water in the cup.", "step_imgs": ["https://cdn.instructables.com/FHV/LZL1/IGWO4R8Y/FHVLZL1IGWO4R8Y.LARGE.jpg", "https://cdn.instructables.com/FZN/0919/IGWO4R95/FZN0919IGWO4R95.LARGE.jpg"], "step_title": "Step 2: First Measure"}, {"step": 3, "steps_text": "Add markings on the cup when the waterlevel ends.Make sure you have a clear line, so you know where to cut.", "step_imgs": ["https://cdn.instructables.com/FEU/F3DJ/IGWO4R99/FEUF3DJIGWO4R99.LARGE.jpg", "https://cdn.instructables.com/FOT/9H5K/IGWO4R9E/FOT9H5KIGWO4R9E.LARGE.jpg"], "step_title": "Step 3: Mark"}, {"step": 4, "steps_text": "You can do this with an exacto knife, a metal saw or a multitool (depends on the material of the cup)", "step_imgs": ["https://cdn.instructables.com/FTT/TJNR/IGWO4R9G/FTTTJNRIGWO4R9G.LARGE.jpg", "https://cdn.instructables.com/F9G/4811/IGWO4R9O/F9G4811IGWO4R9O.LARGE.jpg", "https://cdn.instructables.com/FNA/CNML/IGWO4R9U/FNACNMLIGWO4R9U.LARGE.jpg"], "step_title": "Step 4: Cut"}, {"step": 5, "steps_text": "File the rough ends", "step_imgs": ["https://cdn.instructables.com/FEF/Z3P2/IGWO4R9V/FEFZ3P2IGWO4R9V.LARGE.jpg"], "step_title": "Step 5: Polish"}, {"step": 6, "steps_text": "Cut a small strip of your placemat (4mm) and glue it to the top of your small cup.If you cut it in an angle, you prevent the water from dripping at the ends.", "step_imgs": ["https://cdn.instructables.com/FOK/76KC/IGWO4R9X/FOK76KCIGWO4R9X.LARGE.jpg", "https://cdn.instructables.com/F32/5YCU/IGWO4RFY/F325YCUIGWO4RFY.LARGE.jpg", "https://cdn.instructables.com/F80/IJED/IGWO4RM0/F80IJEDIGWO4RM0.LARGE.jpg"], "step_title": "Step 6: Add Silicone"}, {"step": 7, "steps_text": "Fit the cone into the cup as shown in the picture.Mark the ends of the silicone on the cone and cut.", "step_imgs": ["https://cdn.instructables.com/FDY/IB0X/IGWO4UYV/FDYIB0XIGWO4UYV.LARGE.jpg", "https://cdn.instructables.com/FKC/ACBV/IGWO4RMF/FKCACBVIGWO4RMF.LARGE.jpg", "https://cdn.instructables.com/FSH/08SF/IGWO4RMJ/FSH08SFIGWO4RMJ.LARGE.jpg", "https://cdn.instructables.com/FJB/ABJ6/IGWO4RMO/FJBABJ6IGWO4RMO.LARGE.jpg"], "step_title": "Step 7: Remove"}, {"step": 8, "steps_text": "Fit the cone into the cup as shown in the picture and pour your desired amount of water, mark the water level and cut.", "step_imgs": ["https://cdn.instructables.com/F1O/1P2P/IGWO4RMR/F1O1P2PIGWO4RMR.LARGE.jpg", "https://cdn.instructables.com/FHO/1AL5/IGWO4RMU/FHO1AL5IGWO4RMU.LARGE.jpg", "https://cdn.instructables.com/F7I/Q4Y9/IGWO4RMX/F7IQ4Y9IGWO4RMX.LARGE.jpg"], "step_title": "Step 8: Next Measurement"}, {"step": 9, "steps_text": "Add as many layers as you need", "step_imgs": ["https://cdn.instructables.com/FVI/YJTD/IGWO4RNE/FVIYJTDIGWO4RNE.LARGE.jpg", "https://cdn.instructables.com/F7M/GKP5/IGWO4RNN/F7MGKP5IGWO4RNN.LARGE.jpg"], "step_title": "Step 9: Repeat"}], "channel": "No channel to show"}, {"category": "No category to show", "description": "PROBLEM: Once or twice a year, this Lazy Old Geek could use a postal scale. Coming up are the elections. Colorado is set up so that I can always vote by mail. I am lazy so I do so. I think you may have to request to vote absentee. Now sometimes the absentee ballot tells you how much postage but often they\u2019ll say to use appropriate postage. So is it over an ounce?\nThe miser in me figures this way: I live about five miles from the nearest town. That\u2019s ten miles round trip. My car gets around 30 mpg, so a trip to the post office (or to a polling place) is going to take one-third of a gallon or a little less than a dollar. To my friend who is taking college Algebra, here\u2019s an example of applied Algebra. So it\u2019s actually cheaper for me to mail in a ballot, than it is to drive in and vote. (I would do it anyway. I hate waiting in line). But I also don't want to underpay or overpay.\nOkay, so I thought, I bought an Arduino clone, how can I use it for weighing a letter? I found some sensors that could do it but they were quiet expensive, so I decided to go low tech. Another Instructable has a good postal scale:\nPretty Good Postal Scale from Old CDs\nhttps://www.instructables.com/id/Pretty-Good-Postal-Scale-from-Old-CDs/\nby Phil B\nAnd it\u2019s probably cheaper than mine. But I wanted something that looked more like a scale. Since I\u2019m OLD and will probably only use it a couple of times a year, it has to be cheap and easy to build so I can amortize it over several years. (HA! HA!)\nNOTE: This scale is designed for use in the U.S. Adjust accordingly for other countries.\n\u00a0", "title": "A 67 Cent Postal Scale", "url": "https://www.instructables.com/id/A-67-Cent-Postal-Scale/", "section": "home", "steps": [{"step": 1, "steps_text": "So after my annual visit with my shrink, I went across the street to the Dollar store and found a pretty-close-to-what-I-wanted ruler.\nParts:\nPlastic ruler 3 for $1\n2 Clips 10 for a $1\nDental Floss Free (my dental hygienist always gives me a sample)\nPaper clip\n5 quarters\nTotal cost per scale: 67 cents ( the quarters are refundable) since there are parts enough for three scales.\nTools:\nDrill", "step_imgs": ["https://cdn.instructables.com/FWO/82TS/GE38R6NE/FWO82TSGE38R6NE.LARGE.jpg", "https://cdn.instructables.com/FG1/FTPK/GE38TB4M/FG1FTPKGE38TB4M.LARGE.jpg"], "step_title": "Step 1: Parts and Tools"}, {"step": 2, "steps_text": "STEP: Ruler Modification\nMany of you probably took some physics in school and many probably developed Teeter Totter skills.\nA balance scale (see picture) is like a Teeter Totter (see picture) and both work on the same physics principles (see Garfield picture). The basic idea is equal lengths and equal weights balance (see Garfield picture).Non-essential Information: Algebra: I like to think of the balance scale (see first picture) as a visual example of the equal (=) sign. Everything on the left has to have the same weight as everything on the right. Which means whatever you do to one side, you have to do the same or equivalent to the other.\nUnfortunately, the ruler wasn\u2019t quite what I was hoping for. I was hoping for a hole in the middle and a hole equally spaced near the ends. So I needed to drill one hole to match up with the other end.Scientific: The scientific me say, how am I going to get the hole the exact same distance from the center and what if it\u2019s still not balanced? Will I have to shave it off?Practical: The practical me says it\u2019s not that critical, I have a calibration scheme to compensate and all I really care about is \u2018Is this letter less than an ounce or more than an ounce.\u2019\nSo I had to drill a not so critical hole in the ruler. What I did was: take my calipers to the side with the hole and adjusted them to the edge of the hole and the edge of the ruler, then I went to the other end and marked a line with my soldering aid tip. This made a square but you can\u2019t quiet see it in the picture. Then I scratched a line from corner to corner to get the center of the square. This matched up to the center of the hole on the other end. This may sound pretty complicated. Depending on the ruler you are using, just try to make holes to match the other side.CAUTION: Drill out the hole to the same size as the other one slowly and carefully. The plastic on a 33 cent ruler is thin and cheap. I know; I broke my first one.\n\u00a0", "step_imgs": ["https://cdn.instructables.com/FSE/O7K8/GE38TB50/FSEO7K8GE38TB50.LARGE.jpg", "https://cdn.instructables.com/F5S/04F2/GE38R6NQ/F5S04F2GE38R6NQ.LARGE.jpg", "https://cdn.instructables.com/FYW/ILKU/GE39IJM9/FYWILKUGE39IJM9.LARGE.jpg", "https://cdn.instructables.com/FSM/IF2K/GE38R6NM/FSMIF2KGE38R6NM.LARGE.jpg", "https://cdn.instructables.com/FCX/AFZX/GE39IJMK/FCXAFZXGE39IJMK.LARGE.jpg"], "step_title": "Step 2: Ruler Modification"}, {"step": 3, "steps_text": "In attaching the clips, I did use a little physics. My first thought was to bolts or just glue the clips to the ruler. But depending on where you clip the letter, the center of gravity will change and that would affect the balance, so I suspended the clips with some dental floss so the distance from the balance point would always be the same.\nSince most of us don\u2019t have calibrated weights in our junk pile (I used to), we need something common of a known weight and what is probably the best candidate are U.S. coins. Phil M already figured out that five quarters, 1967 or later = 1oz.\nHere\u2019s a reliable supporting website, the US Mint:\nhttp://www.usmint.gov/about_the_mint/?flash=yes&action=coin_specifications\nThe weight of a quarter is 5.67grams. 1 gram = 0.0352739619 ounces.\nWhat? Another Algebra problem? Well I already did this: one quarter = 0.20003oz. So five quarters are 1.000017oz. Close enough for government use.Non-essential Information: You may notice that all of the coins are a mixture of metals and the silver dollar is no longer a silver dollar and even the copper penny is no longer just copper. Over the years, prices of metal kept rising until the metal in the coins were worth more than the value printed on the coin. That\u2019s how the \u2018sandwich\u2019 coin was created. I just read an article that the metals in a 1932-1964 quarter is worth about $3.75.Calibration: I suspended the scale from a screw through the middle hole and clipped five quarters on each side. (See picture) It is a good idea to pull the ruler away from the door so the clips aren\u2019t dragging along the door. If it isn\u2019t balanced then take a paper clip starting near the center on the high side and slide it out until the ruler is level. (See second picture). I taped a piece of paper behind the ruler so that I could mark the balanced point.\n\u00a0", "step_imgs": ["https://cdn.instructables.com/F2L/826W/GE5FI2UV/F2L826WGE5FI2UV.LARGE.jpg", "https://cdn.instructables.com/FH1/F4QR/GE38R6P6/FH1F4QRGE38R6P6.LARGE.jpg"], "step_title": "Step 3: Assembly and Calibration"}, {"step": 4, "steps_text": "Here\u2019s the scale in use. I put five quarters (1oz.) on the left side and the letter on the other. If the ruler is slanted up as in the picture, than it is under 1oz. and doesn\u2019t require extra postage. If the ruler is right over the calibration line or below it than I would add postage (currently 17cents per extra ounce).\nNow this could also be used for 2oz, by putting 10 quarter on the left side. Like Phil M, you could put them in a baggie as it would be hard to clip 10 quarters.For Algebra students,\u00a0this picture is an example of an inequality.\nThe left side is greater than (>) the right side.\nWhich means the right side is less than (<) the left side.\nWhich means the letter < one ounce (five quarters).\nBelieve it or not, there\u2019s some use for Algebra.\nLazy Old Geek", "step_imgs": ["https://cdn.instructables.com/F6Q/IDIY/GE38TB7O/F6QIDIYGE38TB7O.LARGE.jpg"], "step_title": "Step 4: Scale in Use"}], "channel": "No channel to show"}, {"category": "No category to show", "description": "This add-on to a Soleil Sun alarm lets the clock control the brightness of a bank of LEDs. A microcontroller adjusts the power of the LEDs so they appear to dim at the same rate as any incandescent lights you may have attached to the alarm.", "title": "Blue LED Dawn Simulator for Soleil Sun Alarm", "url": "https://www.instructables.com/id/Blue-LED-dawn-simulator-for-Soleil-Sun-Alarm/", "section": "home", "steps": [{"step": 1, "steps_text": "We run a tight ship here at Squid Labs.  Partners are expected at their desks, pencils ready, at 7:00 AM sharp.  Given the 4-hour each way commutes typical of the Bay Area and 12-hour works-days, there's not alot of time left for sleeping!  So, anything to simulate a natural existence, like a sunrise, is greatly appreciated.  I use a Soleil Sun alarm with its incandescent light controller to simulate sunrises in the morning.  It works fairly well and often I wake while the lights are about half brightness, before the radio comes on.  Recently, a few close friends, some with seasonal affective disorder, have started using a blue light box -- the Golite -- and swear by it's effectiveness. Despite having timers on the Golite, it doesn't have an alarm setting and won't turn the LEDs on automatically.  Worse, in darkness, the lowest light setting of 10% isn't that different than 100%, and compared to a \"sunrise\" driven by incandescents, the difference between 0% and 10% is quite jarring. I wanted to try blue light and so decided to build my own LED light source integrated with my alarm clock.", "step_imgs": ["https://cdn.instructables.com/FRK/L65J/RI6EP27TEY6/FRKL65JRI6EP27TEY6.LARGE.jpg", "https://cdn.instructables.com/F00/GZI5/NV6EP27TEZD/F00GZI5NV6EP27TEZD.LARGE.jpg", "https://cdn.instructables.com/FV1/0GVY/XQNEP27U4CZ/FV10GVYXQNEP27U4CZ.LARGE.jpg"], "step_title": "Step 1: Background"}, {"step": 2, "steps_text": "Here's what I used and where I got it.  Blue LED light box - click for InstructableAtmel ATMEGA8-16PI (buy a few in case you burn one out) - Jameco.comOptoisolator 4N35 - Jameco.com5 volt regulator, LM341T-5.0 for example - RadioShacklying around the shop but available at RadioShack or Jameco:wires1 kOhm resistor470 Ohm resistor", "step_imgs": [], "step_title": "Step 2: Parts and Materials"}, {"step": 3, "steps_text": "The manual of the alarm clock claims the \"data port\" spits out a 0-5 volt signal that is read by the external 300 W controller.  With dreams of reusing parts of the PWM motor controller described here,  I probed the output.Turns out it's a 190 Hz 0-5 volt PWM signal with a duty cycle that varies in 44 increments of 120 us each.", "step_imgs": ["https://cdn.instructables.com/FE0/E7Q5/1LQEP27TEVY/FE0E7Q51LQEP27TEVY.LARGE.jpg"], "step_title": "Step 3: About the Soleil Alarm Clock"}, {"step": 4, "steps_text": "You might, as I did,  think that you could add a transistor to flip the duty cycle of the alarm clock and plug it straight into the external control of the BuckPuck (5V equals off, so if the driver is used without electronics its default state is on).  This works, but the lowest brightness level from the clock (one 120 us long pulse every 5.2 ms) looks nearly the same as full blast.  Incandescent lights only appeared as bright as the LEDs midway through the cycle.  \rSo, I brought in a microcontroller to generate a PWM signal with greater resolution.  (This project is totally doable without a microcontroller -- in fact, while getting up to speed on the Atmels used here, I used the LEDs under direct control of the alarm clock.)   At 130 Hz, a pulse 1 us long does not turn the LEDs on; a 2 us long pulse just barely turns them on.  So, 16 bit PWM appeared to be enough.", "step_imgs": ["https://cdn.instructables.com/FDY/J8RA/ST2EP27TEX5/FDYJ8RAST2EP27TEX5.LARGE.jpg", "https://cdn.instructables.com/F00/GZI5/NV6EP27TEZD/F00GZI5NV6EP27TEZD.LARGE.jpg", "https://cdn.instructables.com/FRK/L65J/RI6EP27TEY6/FRKL65JRI6EP27TEY6.LARGE.jpg"], "step_title": "Step 4: About the LEDs and Driver"}, {"step": 5, "steps_text": "Again, due to the nature of the LEDs, a linear increase of the PWM signal did not look right.  Knowing that the clock only has 44 discrete steps, I shaped an exponential function that would hit these approximate values:f(0) = 65534 (65535 = 5 volts = off)f(2) = 65533 (just barely on)f(13) = 99.84% of 216 (somewhere around 20% of full on)f(44) = 5% of 216 (full power)A plain old exponential of the type f(x) = A(1-exp(Bx+C)) couldn't do it.  The rate of change needed to change over the range of x, so I tried:f(x) = A(1-exp( (Bx + D)x + C) )Solving it directly proved too hard, so I made a spreadsheet and adjusted the parameters by hand.This could also be done with a lookup table.  However, when I started, I was convinced I could find the exact function, and so a lookup table seemed like a huge cop-out.", "step_imgs": ["https://cdn.instructables.com/FZJ/3Q90/LYVEP27U493/FZJ3Q90LYVEP27U493.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 5: Logarithmic Ramp"}, {"step": 6, "steps_text": "Build the driver circuit.", "step_imgs": ["https://cdn.instructables.com/F12/3MD3/80GEP27U43P/F123MD380GEP27U43P.LARGE.jpg", "https://cdn.instructables.com/F9U/94OK/NLXEP27U45Z/F9U94OKNLXEP27U45Z.LARGE.jpg", "https://cdn.instructables.com/FEA/Z9KP/IMKEP27U44S/FEAZ9KPIMKEP27U44S.LARGE.jpg"], "step_title": "Step 6: Build Circuit"}, {"step": 7, "steps_text": "I choose Atmel Mega8s because they are rapidly becoming the microcontroller of choice around Squid Labs.  The Mega8s have some nice features that make them a great choice for this project including interrupts synced to external signals, 16-bit PWM, and an 8 Mhz clock.  The one drawback is that you need an Atmel programmer.  Here is a description of programming Atmels using the parallel port, which could be adapted to this project.I use Context to edit my code, and avr-gcc from WinAVR to compile it.  I couldn't get the programmer bundled with WinAVR to work with my programmer, so I used AVR Studio 4 instead.When you open AVR Studio, press the small \"AVR\" button shaped like a microchip to get to the programmer menu.", "step_imgs": [], "step_title": "Step 7: Setup to Program Microcontrollers"}, {"step": 8, "steps_text": "If you're like me, you'll need to compile and try the code many times before it actually works.  Taking the Atmels in and out of the programmer can get really annoying, so I ran wires directly into the breadboard.\rRun wires between the programmer and the ATMEGA8 for pins 1, 7 (VCC), 8 (GND), 17, 18, 19, 20 (AVCC),  21 (AREF), and 22 (GND).", "step_imgs": ["https://cdn.instructables.com/FTK/0NMU/LEDEP27TQUF/FTK0NMULEDEP27TQUF.LARGE.jpg"], "step_title": "Step 8: Wire Up Programmer"}, {"step": 9, "steps_text": "\n          The code and makefile are written to work with avr-gcc.  Briefly, it calculates the duty cycle from the clock, calculates the desired LED control level, and spits out a PWM signal.  There's some averaging of the input and output values to reduce undesired flashing of the LEDs (like when they are just starting a sunrise).  Essentially, the microcontroller acts as a nonlinear PWM filter.Code: (download the .c file rather than cut and pasting this text; there are some formatting issues with the syntax) /* LED microcontroller dimmer for use with Soleil Sun AlarmWritten for Atmel ATMega8 and avr-gccEric J. WilhelmSquid Labs, LLCAttribution-NonCommercial-ShareAlike 2.5You are free:    * to copy, distribute, display, and perform the work    * to make derivative worksUnder the following conditions:by Attribution. You must attribute the work in the manner specified by the author or licensor.Noncommercial. You may not use this work for commercial purposes.Share Alike. If you alter, transform, or build upon this work, you may distribute the resulting work only under a license identical to this one.    * For any reuse or distribution, you must make clear to others the license terms of this work.    * Any of these conditions can be waived if you get permission from the copyright holder.*/#include <inttypes.h>#include <avr/io.h>#include <avr/interrupt.h>#include <avr/signal.h>#include <math.h>#  define OC1 PB1#  define DDROC DDRB#  define OCR OCR1Avolatile uint16_t xtimer;volatile uint16_t timer0;volatile uint8_t status;SIGNAL(SIG_OVERFLOW0){  timer0++;  TCNT0=96;          // preload the timer with 96 to make this interrupt occur every 20 us.}SIGNAL(SIG_OVERFLOW1){  //The interrupts don&apost work properly without this definition.}// falling edge PWM signal (rising edge at clock; reversed due to optoisolator)SIGNAL(SIG_INTERRUPT1) {  // Zero timer0 to count the length of the positive pulse  timer0=0;  status=1;}//rising edge PWM signal (falling edge at clock; reversed due to optoisolator)SIGNAL(SIG_INTERRUPT0) {  //record the length of the positive pwm signal in xtimer  // if timer0 is greater than approximately 263 (at 20 us per interrupt) than the pulse was missed  if(timer0<270) xtimer=timer0;  status=0;}voidioinit (void){    // Timer1 does ~16-bit PWM    TCCR1A = _BV (COM1B1) | _BV (WGM11) | _BV (COM1A1);    TCCR1B = _BV (WGM13) | _BV (WGM12) | _BV (CS10);    ICR1 = 65535;    //Timer0 counts    TCCR0 =  _BV (CS00);    TCNT0 = 96;    timer0=0;    // set PWM value to 0    OCR = 0;    //enable OC1 as output    DDROC = _BV (OC1);    //enable external interrupts    GICR = _BV (INT1) | _BV (INT0);    //INT0 is rising edge, INT1 is falling edge    MCUCR = _BV (ISC01) | _BV (ISC00) | _BV(ISC11);    xtimer=0;    status=0;    //enable timers    timer_enable_int (_BV (TOIE1) | _BV (TOIE0) );    // enable interrupts    sei ();}intmain (void){    #define B -0.00325    #define C -11.09    #define D 0.396503    int i,on=0, oncounter=0;    unsigned int x(100), y;    long t(100), u;    ioinit ();    for (;;) {            //average xtimer over samples because it jumps around alot      for(i=99;i>0;i--) {        x(i) = x(i-1);      }      x(0) = xtimer;      y=0;      for(i=0;i<100;i++) {        y = y+x(i);      }      y=y/100;      //divide by 5 because the clock has 120 us resolution on its PWM      y=y/5;      // average the output so it doesn&apost jump around      for(i=99;i>0;i--) {        t(i) = t(i-1);      }      //determine what to do      if(timer0>270 && status == 1 && on == 1) {        //Turn light on        t(0) = 0;        on=1;        }      else if(timer0>270 && status == 0) {        //Turn light off        t(0) = 65535;        xtimer=0;        on=0;        oncounter=0;        }      else if(timer0<270){        t(0) = 65535*(1-exp((B*y + D)*y + C));        if(t(0)>65535) t(0) = 65535;        if(t(0)<0) t(0) = 0;      }      //oncounter prevents the light from turning on suddenly from an off state if timer0>270, but there&aposs a positive pulse on the PWM      //this happens during the very start of a sunrise, when the clock&aposs PWM hasn&apost quite turned on at the right frequency      else if(timer0>270 && status == 1) {        if(++oncounter==5) {          on = 1;          oncounter=0;        }      }      // average the output so it doesn&apost jump around      u=0;      for(i=0;i<100;i++) {        u=u+t(i);      }      //Change the output PWM      OCR = u/100;    }    return (0);}", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 9: Program Microcontroller"}, {"step": 10, "steps_text": "Use two male 1/8 plugs and a length of wire to make a cable.", "step_imgs": ["https://cdn.instructables.com/FYE/4T2D/HKCEP27U4BS/FYE4T2DHKCEP27U4BS.LARGE.jpg", "https://cdn.instructables.com/FOB/92G2/8O9EP27U4AL/FOB92G28O9EP27U4AL.LARGE.jpg"], "step_title": "Step 10: Build Connection Cable"}, {"step": 11, "steps_text": "Connect the LED light box to your clock and enjoy gradual blue LED sunrises.", "step_imgs": ["https://cdn.instructables.com/F5B/ROYT/WW9EP27W4XP/F5BROYTWW9EP27W4XP.LARGE.jpg"], "step_title": "Step 11: Connect LED Light Box to Clock"}], "channel": "No channel to show"}, {"category": "No category to show", "description": "Have you ever wanted to get an approximate measurement from a digital photo and never knew how.Here is one way to do this.I completed this instructable using  three items. 1) Framing Square (24 x 16 inches), 2) Digital Photo, 3) MS paint.I saw this software program on the internet at:  http://www.stickyyard.com/I wanted to challenge myself to see If I could recreate the function without the expense.Soo..    Here it goes.Please keep in mind that this is only an estimator and will not provide precision measurements.  There are many factors that could affect your results.  This should get you close if you do not have any other tools available.Here is my first subject, my garage door.  I want to find the length and the height around the frame of the door.", "title": "Digital Measurment Estimator", "url": "https://www.instructables.com/id/Digital-Measurment-Estimator/", "section": "home", "steps": [{"step": 1, "steps_text": "Now that  I have something I want to measure I need to have a reference object.  I happened to use a framing square in this instance.  I propped this up against the garage door, this can be seen at the lower left hand corner.  This framing square measures 24 x 16 inches.From here on out it starts to get in depth.   I will divide this up into two sections.  One for the casual reader and one for the techno / geek / engineer in all of us.CASUAL:The idea of this project is to scale up a known size to determine an unknown size.TECHNO, GEEK, ENGINEER:Of course the accuracy in doing this will be largely affected by a multitude of variables, not all of which I can or will address, but I will try to explain a few.  Please remember I am not an expert so those of you that are, please enlighten me on my mistakes.", "step_imgs": ["https://cdn.instructables.com/FUF/ELJE/FDO29IAJ/FUFELJEFDO29IAJ.LARGE.jpg"], "step_title": "Step 1: Reference Object"}, {"step": 2, "steps_text": "There are a couple of things to consider before getting started.  Using this technique you should consider the following:Casual:1     Select an object that only has two dimensions (flat).2     Include a reference object of known size in the picture, place this as close to your subject object as possible (this will increase your accuracy).3     Any digital camera should work.  Make sure your subject object is squared nicely in your picture.  Take a picture from a point that is perpendicular to your subject.4     Download your pictures and open them up in MS Paint.TECHNO, GEEK, ENGINEER:1     I suppose a 3-d object could be your subject but to keep the math more realistic I prefer to only work with 2-d objects.  Other wise you will need to take depth/perspective and complicated scaling into  into account.2     Any object with a known size should work, ideally the larger the object the more accurate your measurements will be.  However, if your reference object is too large it may be easier to actually measure your subject instead.  Try to keep your known object in the same plane as your subject object because any offset in your plane will affect the accuracy of your work.3     A picture with a higher number of pixels/inch will result in a more precise measurement but this is just an estimator and there comes a point where the increased precision is useless.  Consider your goals/expectations and realities when when selecting the picture resolution.Square the subject object nicely in the picture because the amount the object is skewed from the reference axises is reduced and it helps to eliminate inaccuracy's and calculations.  When taking a picture remember to take a picture from a point that is perpendicular to your selected object, this will help to reduce skew errors with the picture.4     I wanted to use MS paint because it is a program just about everyone has and it is easy to work with.   I have also noted that with some fancier photo editing software, when zooming in to individual pixels the resolution seems to be lost/degrade.   (I don't know why this happens maybe someone can explain this)", "step_imgs": [], "step_title": "Step 2: Paint Program"}, {"step": 3, "steps_text": "Now that you have brought up your picture into MS Paint you can start working with it.CASUAL:1     Zoom into your known object.2     Select points on your reference object with a known size3     Record the pixel location (found at the lower right had corner of MS Paint)4     With this object I selected three points each one as far apart as possible.5     Each pixel position is identified by an x and Y coordinate and is noted in this fashion (X,Y)6     For these three points the x,y coordinates are: (396,1013) (512,1011) and (512,934)TECHNO, GEEK, ENGINEER: 1    Zoom into your known object.  Zooming in super close really doesn't help too much remember this is only an estimator.  In addition the picture needs to have a higher resolution for this to be more effective/accurate.2    Select points on your reference object.3     Record the pixel location (found at the lower right had corner of MS Paint)4     With this object I selected three points each one as far apart as possible.  I selected the points as far apart as possible to give me the greatest accuracy with my measurement and calculations.5     X, Y Cartesian coordinate system; X axis is parallel to the bottom of the screen.6     For these three points the x,y coordinates are: (396,1013) (512,1011) and (512,934)", "step_imgs": ["https://cdn.instructables.com/F7Y/Q944/FDO29I86/F7YQ944FDO29I86.LARGE.jpg", "https://cdn.instructables.com/FK8/BDY6/FDO29I81/FK8BDY6FDO29I81.LARGE.jpg"], "step_title": "Step 3: Zoom in on Your Reference Object"}, {"step": 4, "steps_text": "Lets start by looking at our reference object and measurements along the X-axis.CASUAL:1     To find the distance in pixels look at the numbers you just recorded and subtract one X value from the other.  2     In this instance the dot locations are (512, 1011) and (396, 1013).3     So,  512 - 396 = 116 pixels wide along the X axis4     We also know that the framing square is 24 inches long.5     So 116 / 24 = 4.833 pixels per inchTECHNO, GEEK, ENGINEER:1  The linear distance is not completely accurate along the X-axis because of the the difference in the Y axis is 2 pixels.  I choose the X axis to start off with because it is the longest axis and it should yield slight more accurate results than choosing the smaller Y-axis as my initial reference.2     In this instance the dot locations are (512, 1011) and (396, 1013).3     So X = abs(512 - 396) = 116 pixels and Y = abs(1011-1013) = 2 pixels; so the true length of this line is actually solved this way:  line along X axis = Square root(1162+22) = 116.01724     We also know that the framing square is 24 inches long.5     So the true number of pixels per inch is actually: 116.0172 / 24 = 4.834 pixels per inch", "step_imgs": ["https://cdn.instructables.com/FVO/T8NF/FDO29I80/FVOT8NFFDO29I80.LARGE.jpg", "https://cdn.instructables.com/F4M/263Q/FDO29I7Z/F4M263QFDO29I7Z.LARGE.jpg", "https://cdn.instructables.com/FJN/5PKX/FDO29I7W/FJN5PKXFDO29I7W.LARGE.jpg"], "step_title": "Step 4: Determine the Distance Between Dots - X Axis"}, {"step": 5, "steps_text": "OK so now we know how many pixels per inch we are dealing with.  Lets verify this using the Y-axis as a control.CASUAL:1     What is the number of pixels from the bottom of the framing square to the top?2     The location of the yellow dots are along the Y axis are:  (512, 934) and (512, 1011)3     The number of pixels along the Y axis is:  1011 - 934 = 77 pixels4     We also know the number of pixels per inch along the X axis is 4.833 pixels per inch5     So we can now determine the length of the framing square along the Y-Axis:                 77 / 4.833 = 15.931 inches in length 6     Now we know that this should have came out to be 16 inches so there is a little error in our                        measuring technique.  Remember this is an estimator it will not provide you with exact                                                                                                                                                           measurements.TECHNO, GEEK, ENGINEER:1     What is the number of pixels from the bottom of the framing square to the top?2     The location of the yellow dots are along the Y axis are:  (512, 934) and (512, 1011)3     The number of pixels along the Y component is:  ABS(934 - 1011) = 77 pixels the number of pixels along the X component is ABS(512-512)=0 pixels.  So the true length of the framing square in pixels is:  Square root (772+02) = 77 pixels4     We also knowing the number of pixels per inch along the x axis is 4.834 pixels per inch5     So we can determine the length of the framing square along the Y-Axis:        77 / 4.834 = 15.929 inches in length 6     Now we know that this should have came out to be 16 inches so there is a little error in our                        measuring technique.                                                                                                                                          Using the CASUAL technique the error works out to be (16 - 15.931)/16*100 = 0.43%  Using the TECHNO technique the error is closer to (16 - 15.929)/16 *100 = 0.44%", "step_imgs": ["https://cdn.instructables.com/FOO/N32F/FDWI2M15/FOON32FFDWI2M15.LARGE.jpg", "https://cdn.instructables.com/FJS/3JMV/FDWI2M14/FJS3JMVFDWI2M14.LARGE.jpg", "https://cdn.instructables.com/FR5/FYI9/FDO29I7Y/FR5FYI9FDO29I7Y.LARGE.jpg", "https://cdn.instructables.com/FQ6/M8VK/FDWI2M13/FQ6M8VKFDWI2M13.LARGE.jpg"], "step_title": "Step 5: Verify the Scale of the Image"}, {"step": 6, "steps_text": "I am going to use the same technique that we just used on the framing square to figure out the length of the header trim.CASUAL:1 What is the number of pixels from one corner of the header trim to the other?2 The location of the yellow dots are along the header trim are (X axis) are: (345,582) and (1276,593)3 The number of pixels along the X axis is: 1276-345 = 931 pixels4 We also know the number of pixels per inch along the X axis is 4.833 pixels per inch5 So we can now determine the length along the header trim (X-Axis):931 / 4.833 = 192.634 inches in length6 Now lets measure the header trim to see how we did.  It looks like we came out with a measurement of 199.625 inches.  That is pretty close for an estimate.  Remember, this is an estimator it will not provide you with exact measurements.TECHNO, GEEK, ENGINEER:1 What is the number of pixels from one corner of the header trim to the other?2 The location of the yellow dots are along the header trim are (X axis): (345,582) and (1276,593)3 The number of pixels along the X component is: ABS(345 - 1296) = 931 pixels the number of pixels along the Y component is ABS(582-593)=11 pixels. So the true length of the header trim in pixels is: Square root (9312+112) = 931.065 pixels4 From earlier also know the number of pixels per inch along the X axis is 4.834 pixels per inch5 So we can determine the length of the framing square along the Y-Axis:931.065 / 4.834 = 192.608 inches in length6 Now we know that this should have came out to be 199.625 inches so there is a little error in our measuring technique. Using the causal technique the error works out to be (199.625 -192.634 )/199.625*100 = 3.5%  Using the Techno method the error is closer to (199.625-192.608)/199.625*100 = 3.52% 7  At this point you are probably saying to yourself,  \"Hey! using the framing square the error was about 0.44%, why has this increased?\"  Well the reason for this is because the error increased in proportion to our measurement.  Lets look at the Techno method:  our header distance was actually 199.625 inches, and our X axis framing square was 24 inches.  So 199.625/24 = 8.318.  I would expect the error to increase by a multiple of that amount.  Lets see:  8.318 * 0.44% = 3.66%, Guess what our actual error increased by 3.52%   So our measurement was quite accurate after all (this type of error can be reduced by increasing the size of your known object).", "step_imgs": ["https://cdn.instructables.com/FBA/CM52/FDYPTABA/FBACM52FDYPTABA.LARGE.jpg", "https://cdn.instructables.com/FX8/MIRB/FCZDYTST/FX8MIRBFCZDYTST.LARGE.jpg", "https://cdn.instructables.com/FRZ/9EHK/FCZDYTSU/FRZ9EHKFCZDYTSU.LARGE.jpg", "https://cdn.instructables.com/FQV/17ZA/FCZDYTSS/FQV17ZAFCZDYTSS.LARGE.jpg", "https://cdn.instructables.com/FZA/W2SR/FCZDYTSO/FZAW2SRFCZDYTSO.LARGE.jpg", "https://cdn.instructables.com/FJ0/CC6Y/FCZDYTSN/FJ0CC6YFCZDYTSN.LARGE.jpg"], "step_title": "Step 6: Now Let's Measure the Header Trim Above the Garage Door."}, {"step": 7, "steps_text": "Again I am using the same method that we have used previously.CASUAL:1 What is the number of pixels from top corner of the side trim to the other?2 The location of the yellow dots are along the side trim are (Y axis) are: (345, 584) and (343, 1023)3 The number of pixels along the Y axis is: 1023 - 584 = 439 pixels4 We also know the number of pixels per inch along the Y axis is about 4.833 pixels per inch5 So we can now determine the length along the side trim (Y-Axis):439 / 4.833 = 90.834 inches in length6 Now lets measure the side trim to see how we did.  It looks like we came out pretty close to 89 inches.  Not too bad.TECHNO, GEEK, ENGINEER:1 What is the number of pixels from top corner of the side trim to the other?2 The location of the yellow dots are along the side trim are (Y axis) are: (345, 584) and (343, 1023)3 The number of pixels along the Y component is: ABS(584-1023) = 439 pixels the number of pixels along the X component is ABS(345-343)=2 pixels. So the true length of the header trim in pixels is: Square root (4392+22) = 439.004 pixels4 From earlier we also know the number of pixels per inch along the X axis is 4.834 pixels per inch5 So we can determine the length of the framing square along the Y-Axis:439.004 / 4.834 = 90.816 inches in length6 Now we know that this should have came out to be 89 inches so there is a little error in our measuring technique. Using the CASUAL technique the error works out to be (90.834 -89 )/89*100 = 2.06%  Using the TECHNO method the error is closer to (90.816-89)/89*100 = 2.04% 7  Again the error is larger than the error we initially calculated but by looking at the how the error scaled up it again works out to be pretty close to what we would have expected.  The actual length of the side trim turned out to be 89 inches.  We also know that our reference object was 16 inches high.  So 89/16=5.5625; Now, multiply 5.5625 by the initial error we calculated to determine the potential error with the final measurement.  Lets do this with the casual measurements first.  5.5625 * 0.43% = 2.39%  So using the CASUAL method we were again quite close to the measurement that we expected.  Lets now apply this to the TECHNO method: 5.5625 *0.44% = 2.45%.  As expected the error is quite low.", "step_imgs": ["https://cdn.instructables.com/F22/I4B8/FCZDYTSR/F22I4B8FCZDYTSR.LARGE.jpg", "https://cdn.instructables.com/FX8/MIRB/FCZDYTST/FX8MIRBFCZDYTST.LARGE.jpg", "https://cdn.instructables.com/FJM/MCUF/FCZDYTSQ/FJMMCUFFCZDYTSQ.LARGE.jpg", "https://cdn.instructables.com/FZO/L2Y2/FCZDYTSP/FZOL2Y2FCZDYTSP.LARGE.jpg", "https://cdn.instructables.com/F30/PDHX/FCZDYTSL/F30PDHXFCZDYTSL.LARGE.jpg", "https://cdn.instructables.com/FVU/NSDR/FCZDYTSK/FVUNSDRFCZDYTSK.LARGE.jpg"], "step_title": "Step 7: Now Lets Measure the Side Trim on the Garage Door."}, {"step": 8, "steps_text": "For the average person it is possible to obtain quite an accurate measurement from just a photograph.  If you intend to try this out remember  a couple of key points to make things easier. 1  Select a 2-D \"flat\" object.2  Select a reference object that is as large as possible.3  Take a picture from a point that is perpendicular and centered on the subject object.4  Try to keep the subject object as squared within the picture edge as possible.5  Keep your reference object as close to your subject object as you can.For the TECHNO, GEEK  ENGINEER in all of us.This instructable is not 100% accurate and could use some help.  Below are a list of potential errors as I see it and problems that I have not or failed to address.  Remember this is only intended as an estimator and not for truly accurate measurements.1  My subject object is pretty close to 2-D.2  My reference object is set about 6 inches or so back from the subject object, this introduces an additional scaling error.3  The picture was not taken from a point that is perpendicular to the subject object.4   I tried to simplify the math in for the CASUAL method so that the broadest community would understand what  I was trying to accomplish.5  The scale of the subject object would be larger on one end than the other because of perspective issues associated with the lack of perpendicularity.6  The vertical error measured on the 16 in framing square was less than the actual length of the object where as the vertical error on the side trim was more than the actual length of the object.  Although I knew about this problem I made the assumption that the error was bilateral and not just unilateral and so the error would be assignable to both sides of the actual measurement.7  The vertical error was assigned to the horizontal measurements.  This assignment may or may not be applicable.  I made the assumption that the vertical error was an approximately correct and applied this to the horizontal measurements as well.8  You can see that if proper care is taken the additional steps of finding the true length calculations are not necessary.  When one compares the CAUSAL to the TECHNO styles there is very little practical difference.  I believe that the TECHNO method would be more appropriate if the subject object was not squared as nicely within the picture.9  I do not believe that using a higher resolution graphics file would result in a more accurate measurement.  The precision in selecting individual points would increase but the additional time and effort in analyzing this type of file would increase.  Using a higher resolution photograph would also reduce potential error.  Personally, I would select a reasonable resolution graphic and work with this.  However, If you are working for the US Military and needed to select individual targets in some foreign country I would recommend using a higher resolution graphic.What is a practical application for this instructable?1 - Siding estimator - estimate the amount of siding needed for a wall.2 - Measure your ex-girlfriends apartment without stepping foot inside.3 - Figure out how far apart your neighbor's houses are4 -  Figure out the height of a flag pole5- etc. etc. etc.If you would like to learn more about this subject search the web for photogrammetry http://en.wikipedia.org/wiki/PhotogrammetryKnowledge of descriptive geometry would also be useful if one was to seriously consider this type of work. http://en.wikipedia.org/wiki/Descriptive_geometryIf you have not seen it already, take a look at my other Instructables:https://www.instructables.com/id/Hanging-around/https://www.instructables.com/id/Volume_of_a_Cylinder_2/https://www.instructables.com/id/476_better_than_a_Bank/", "step_imgs": [], "step_title": "Step 8: What Have We Learned?"}], "channel": "No channel to show"}, {"category": "No category to show", "description": "In chemistry students often encounter liters, milliliters, cubic centimeters, and cubic meters. They frequently convert from liters to milliliters, and cubic centimeters to milliliters. A common misconception is that since 1000 mL = 1 L and 1 cm3 = 1 mL then it must be true that 1000 cm3 = 1 m3. To counteract that idea, I set up this display at the beginning of the course and the visual will help eliminate that incorrect assumption when we start to convert different volumes.\nTo set up the display you will need:\nseveral one kilogram masses\nseveral one gram masses\na one liter flask or beaker\ntwelve meter sticks and tape or a cubic meter kit from a science supply company\nMake sure the display is in a location where students can pick up and feel the difference between the gram and kilogram, and see the difference in volume between the liter and cubic meter. To make the display a little more visual you can always add colored water to the flask or beaker.\nAs students visit the display, I ask them to record one item with which they are familiar that has the same mass or volume as each of these units. That will help them relate better to the unit, and if they forget, they can look back in their lab notebook to see what much each unit is worth.", "title": "How Do One Cubic Meter and One Liter Compare?", "url": "https://www.instructables.com/id/How-do-one-cubic-meter-and-one-liter-compare/", "section": "home", "steps": [], "channel": "No channel to show"}, {"category": "technology", "description": "This is not a medical device. This is for educational purposes only using simulated signals. If using this circuit for real ECG measurements, please ensure the circuit and the circuit-to-instrument connections are utilizing proper isolation techniques.The heartbeat consists of rhythmic contractions regulated by the spontaneous presentation of electrical depolarizations in cardiac myocytes (the muscle cells of the heart). Such electrical activity can be captured by placing noninvasive recording electrodes along different positions of the body. Even with an introductory understanding of circuitry and bioelectricity, these signals can be captured with relative ease. In this Instructable we introduce a simplistic methodology that can be used to capture an electrocardiographic signal with practical and inexpensive equipment. Throughout, we will highlight essential considerations in the acquirement of such signals, and present techniques for programmatic signal analysis.", "title": "Build Your Own ECG!", "url": "https://www.instructables.com/id/Build-Your-Own-ECG/", "section": "technology", "steps": [{"step": 1, "steps_text": "The device you are building will function through the following features:Electrode recordings Instrumentation amplifier Notch filter Low-pass filter Analog-to-digital conversion Signal analysis using LabViewSome key components you will need:NI LabView NI data acquisition board (for inputs to LabView) DC Power supply (to power operational amplifiers) Skin electrode pads for electrode recordings OR a function generator that can create a simulated ECG signalLet's get started!", "step_imgs": ["https://cdn.instructables.com/FJA/UETC/JB3ZPXIX/FJAUETCJB3ZPXIX.LARGE.jpg", "https://cdn.instructables.com/FAA/5ATE/JB3ZPXKV/FAA5ATEJB3ZPXKV.LARGE.jpg", "https://cdn.instructables.com/F61/YYC8/JB3ZPXJ1/F61YYC8JB3ZPXJ1.LARGE.jpg", "https://cdn.instructables.com/F6J/E8VU/JB3ZS1Z1/F6JE8VUJB3ZS1Z1.LARGE.jpg"], "step_title": "Step 1: An Overview of Features"}, {"step": 2, "steps_text": "A normal ECG contains identifiable features in the waveform of the signal called the P wave, QRS complex, and T wave. All features of the ECG will appear in the frequency range below 250 Hz, and as such, it is important to capture only the features of interest when recording an ECG from electrodes. A low-pass filter with a cutoff frequency of 250 Hz will ensure that no high frequency noise is captured in the signal", "step_imgs": ["https://cdn.instructables.com/F0X/JDFQ/JB3ZS28E/F0XJDFQJB3ZS28E.LARGE.jpg"], "step_title": "Step 2: Design a Low-pass Filter "}, {"step": 3, "steps_text": "A notch filter at a frequency of 60 Hz is useful to remove the noise from any power supply associated with the ECG recording. Cutoff frequencies between 56.5 Hz and 64 Hz will allow signals with frequencies outside of that range to pass through. A quality factor of 8 was applied to the filter. A capacitance of 0.1 uF was chosen. The experimental resistors were selected as follows: R1=R3=1.5 kOhms, R2=502 kOhms. These values were used to construct the notch filter.", "step_imgs": ["https://cdn.instructables.com/FWA/AFOW/JB3ZS2C1/FWAAFOWJB3ZS2C1.LARGE.jpg"], "step_title": "Step 3: Design a Notch Filter"}, {"step": 4, "steps_text": "An instrumentation amplifier with a gain of 1000 V/V will amplify all filtered signals to allow for ease of measurement. The amplifier uses a series of operational amplifiers and is divided into two stages (left and right) with respective gain K1 and K2. The image above displays a schematic of circuitry that may achieve this result and Figure 6 details the calculations made.", "step_imgs": ["https://cdn.instructables.com/FAL/07BF/JB3ZS2E9/FAL07BFJB3ZS2E9.LARGE.jpg"], "step_title": "Step 4: Design an Instrumentation Amplifier"}, {"step": 5, "steps_text": "The three stages of amplification and filtering are combined in Figure 7 below. The instrumentation amplifier amplifies the sinusoidal frequency input with a gain of 1000V/V. Next, the notch filter removes all signal frequency of 60 Hz with a quality factor of 8. Finally, the signal passes through a low pass filter that attenuates signals beyond a frequency of 250 Hz. The figure above displays the full system created experimentally.", "step_imgs": ["https://cdn.instructables.com/FWH/I3DA/JB3ZS2JZ/FWHI3DAJB3ZS2JZ.LARGE.jpg"], "step_title": "Step 5: Connect It All Together!"}, {"step": 6, "steps_text": "If you have a function generator, you should construct a frequency response curve to ensure a proper response. The image above shows the full system and the frequency response curve that you should expect. If your system appears to be working, then you are ready to move to the next step: converting the analog signal to digital!", "step_imgs": ["https://cdn.instructables.com/FWK/Q79M/JB3ZS3KT/FWKQ79MJB3ZS3KT.LARGE.jpg"], "step_title": "Step 6: ...and Make Sure It Works."}, {"step": 7, "steps_text": "The ECG records a signal with two electrodes and uses a third electrode as ground. With your ECG recording electrodes, insert one into one input of the instrumentation amplifier, the other into the other instrumentation amp input, and connect the third to ground on your breadboard. Next, place one electrode on one wrist, the other on the other wrist, and ground on your ankle. This is a Lead 1 configuration for an ECG. To visualize the signal on your oscilloscope, use an oscilloscope probe to measure your third stage output. ", "step_imgs": ["https://cdn.instructables.com/F2Z/KOOD/JB3ZS66W/F2ZKOODJB3ZS66W.LARGE.jpg"], "step_title": "Step 7: (Optional) Visualize Your ECG on the Oscilloscope"}, {"step": 8, "steps_text": "If you want to analyze your signal in LabView, you will need some way to collect analog data from your ECG and transfer it to the computer. There are all sorts of ways to acquire data! National Instruments is a company that specializes in data acquisition devices and data analysis devices. They are a good place to look for tools to collect data. You can also buy your own inexpensive analog to digital converter chip, and use a Raspberry Pi to transmit your signal! This is probably the cheaper option. In this case, we already had a NI DAQ module an NI ADC and LabView in house, so we stuck with strictly National Instruments hardware and software.", "step_imgs": ["https://cdn.instructables.com/FJH/FBQH/JB3ZS43W/FJHFBQHJB3ZS43W.LARGE.jpg"], "step_title": "Step 8: Acquire Data With National Instruments DAQ"}, {"step": 9, "steps_text": "The visual programming language LabVIEW was utilized to analyze data collected from the analog amplification/filtering system. Data was collected from the NI DAQ unit with DAQ Assistant, a built-in data collection function in LabVIEW. Using LabView controls, the number of samples and time duration for sample collection were specified programmatically. Controls are manually adjustable, allowing the user to fine-tune input parameters with ease. With the total number of samples and time duration known, a time vector was created with each index value representing the corresponding time at each sample in the captured signal.", "step_imgs": ["https://cdn.instructables.com/FBF/B4PW/JB3ZS6LP/FBFB4PWJB3ZS6LP.LARGE.jpg"], "step_title": "Step 9: Import Data to LabVIEW"}, {"step": 10, "steps_text": "Data from the DAQ assistant function was converted into a usable format. The signal was recreated as a 1D array of doubles by first converting the DAQ output data type to a waveform data type and then converting to an (X,Y) clustered pair of doubles. Each Y value from the (X,Y) pair was selected and inserted into an initially blank 1D array of doubles with the help of a looping structure. The 1D array of doubles and corresponding time vector was plotted on an XY graph. Simultaneously, the maximum value of the 1D array of doubles was identified with a maximum value identification function. Six tenths of the maximum value was used as a threshold for a peak detection algorithm built-in to LabView. The peak values of the 1D array of doubles were identified with the peak detection function. With the peak locations known, the time difference between each peak was calculated. This time difference, in units of seconds per peak, was converted to peaks per minute. The resulting value was considered to represent the heart rate in beats per minute. That's it! You have now collected and analyzed an ECG signal!", "step_imgs": ["https://cdn.instructables.com/F44/IO3R/JB3ZS7ED/F44IO3RJB3ZS7ED.LARGE.jpg"], "step_title": "Step 10: Format, Analyze, and You're Done!"}], "channel": "Electronics"}, {"category": "technology", "description": "This instructable will walk you through how to make an accurate measurement with a triple-beam balance, as well as teach you how to account for measurement error with an uncertainty analysis. Time to complete: 15-20 minutes", "title": "Using a Triple-beam Balance With Uncertainty Analysis", "url": "https://www.instructables.com/id/using-a-triple-beam-balance-with-uncertainty-analy/", "section": "technology", "steps": [{"step": 1, "steps_text": "Important parts: \u00a0 \u00a0 \u00a0 \u00a0 pan \u00a0 \u00a0 \u00a0 \u00a0 sliding masses \u00a0 \u00a0 \u00a0 \u00a0 pointer \u00a0 \u00a0 \u00a0 \u00a0 the scale The pan is the silver tray on which you will place your test specimen. There are three sliding masses on a triple beam balance. The largest mass represents 100 grams, the middle mass represents 10 grams, and the smallest represents 1 gram. These masses are slid along differing beams to try and determine the mass of the specimen in the pan. Next is the pointer, The pointer points towards a scale and helps you determine whenever you have the correct mass.\u00a0 The scale is what the pointer uses to determine when the masses are equal. Once the pointer is directed at the 0 on the scale then your masses are equal.", "step_imgs": ["https://cdn.instructables.com/FD6/78AI/HRI97HWP/FD678AIHRI97HWP.LARGE.jpg"], "step_title": "Step 1: Important Parts"}, {"step": 2, "steps_text": "Place your triple beam balance on a level surface and make sure that all of your sliding masses are on zero.", "step_imgs": ["https://cdn.instructables.com/FLC/LM55/HUBWNUHQ/FLCLM55HUBWNUHQ.LARGE.jpg"], "step_title": "Step 2: Setup"}, {"step": 3, "steps_text": "In order to reduce error in your experiment you will need to zero your triple beam balance.To do this you will want to make sure that nothing is on the pan and that all your masses are on zero. Then you will adjust a knob under the pan until the pointer is directed at zero. Image two shows a closer view of the pointer and scale.", "step_imgs": ["https://cdn.instructables.com/FX1/L1HA/HRI97HYG/FX1L1HAHRI97HYG.LARGE.jpg", "https://cdn.instructables.com/F39/85KH/HRKR0YPS/F3985KHHRKR0YPS.LARGE.jpg"], "step_title": "Step 3: Zeroing the Scale"}, {"step": 4, "steps_text": "Then you will choose a test specimen and place it on the pan.", "step_imgs": ["https://cdn.instructables.com/F7P/O3CF/HUBWNUI0/F7PO3CFHUBWNUI0.LARGE.jpg"], "step_title": "Step 4: Specimen Selection"}, {"step": 5, "steps_text": "First you start with the 100 gram sliding mass, then you move it along its beam from notch to notch until the pointer moves to below the zero on the scale. Once this happens move the slider back to the previous notch. For example if you moved the mass to the 600 gram slot and the pointer moved below zero, then you would move the 100 gram slider back to the 500 gram notch.", "step_imgs": ["https://cdn.instructables.com/FNE/Q8FZ/HRI8X9QO/FNEQ8FZHRI8X9QO.LARGE.jpg"], "step_title": "Step 5: Using the 100 Gram Slider"}, {"step": 6, "steps_text": "Repeat step five with the ten gram slider", "step_imgs": ["https://cdn.instructables.com/FNI/DOKU/HRKR0YR2/FNIDOKUHRKR0YR2.LARGE.jpg"], "step_title": "Step 6: Using the Ten Gram Slider"}, {"step": 7, "steps_text": "The scale for the 1 gram slider goes from 0 to 9.9. There are also nine increments between each whole number that represent .1 grams. There are no notches for the 1 gram slider, so you will just push the slider until you get the pointer to point directly at the zero on the scale. To get the most precise measurement possible you will want to count the increments past the nearest whole number. If your 1 gram mass is pointing between two of the increments then you can add a value of .05 to your measurement. This is called the one half least squares regression method.", "step_imgs": ["https://cdn.instructables.com/F2F/S1CI/HRI8XACB/F2FS1CIHRI8XACB.LARGE.jpg"], "step_title": "Step 7: Using the 1 Gram Slider"}, {"step": 8, "steps_text": "Once your sliding masses are in position then you will sum each of the numbers together. This will be the mass of your specimen. In the figure are the results of my measurements for an apple.", "step_imgs": ["https://cdn.instructables.com/F8R/4IPZ/HUBWNUJP/F8R4IPZHUBWNUJP.LARGE.jpg"], "step_title": "Step 8: Determining Your Mass"}, {"step": 9, "steps_text": "Repeat steps 5-8 with your specimen and record each of the results. The more trials you record the more accurate your measurement will be.", "step_imgs": [], "step_title": "Step 9: Multiple Trials"}, {"step": 10, "steps_text": "After collecting your data, you find the average of the measurements. Use the formula in the picture. Where Xn is your last measurement, and you add every measurement up to that point. N is the number of measurements. The value I got for my measurements is 181.", "step_imgs": ["https://cdn.instructables.com/FVP/V48V/HUBWNUQF/FVPV48VHUBWNUQF.LARGE.jpg"], "step_title": "Step 10: Calculating the Average"}, {"step": 11, "steps_text": "It is almost impossible to make a perfect measurement. In order to combat this we will do an uncertainty analysis to ensure that we get a range of values that include the true mass of the specimen. In order to do this we will need the standard deviation of our sample and we will need a t-value that corresponds to our confidence interval.", "step_imgs": ["https://cdn.instructables.com/FG3/15IB/HUBWNUWI/FG315IBHUBWNUWI.LARGE.jpg"], "step_title": "Step 11: Uncertainty Analysis"}, {"step": 12, "steps_text": "To calculate the standard deviation, often referred to as s, we will use the formula in the picture. My value for standard deviation was 1.36.", "step_imgs": ["https://cdn.instructables.com/FT2/SOYJ/HUBWNV4O/FT2SOYJHUBWNV4O.LARGE.jpg"], "step_title": "Step 12: Standard Deviation"}, {"step": 13, "steps_text": "Level of confidence refers to the probability that the true value will be contained within the span of your uncertainty analysis. The accepted level of confidence in engineering is 95%, this is the sixth column of the table. The df value on the left hand side of the table is equal to N-1. In my experiment I had 5 trials, so my df value is 4. We will also use the two-tail portion of the table so my t-value is 2.132.", "step_imgs": ["https://cdn.instructables.com/FHX/RJGG/HUBWNV9F/FHXRJGGHUBWNV9F.LARGE.jpg"], "step_title": "Step 13: T-values"}, {"step": 14, "steps_text": "We will use the formula in the picture. my value for uncertainty was 1.30.", "step_imgs": ["https://cdn.instructables.com/F85/VB2O/HUBWNVJI/F85VB2OHUBWNVJI.LARGE.jpg"], "step_title": "Step 14: Calculating Uncertainty"}, {"step": 15, "steps_text": "We will use the formula in the picture . so my measurement would have been 181\u00b11.30.", "step_imgs": ["https://cdn.instructables.com/F8Z/CUYJ/HUBWNWHK/F8ZCUYJHUBWNWHK.LARGE.jpg"], "step_title": "Step 15: Putting It All Together"}], "channel": "Tools"}, {"category": "technology", "description": "This instructable will walk you through how to make an accurate measurement with a triple-beam balance, as well as teach you how to account for measurement error with an uncertainty analysis. Time to complete: 15-20 minutes", "title": "Using a Triple-beam Balance With Uncertainty Analysis", "url": "https://www.instructables.com/id/using-a-triple-beam-balance-with-uncertainty-analy/", "section": "technology", "steps": [{"step": 1, "steps_text": "Important parts: \u00a0 \u00a0 \u00a0 \u00a0 pan \u00a0 \u00a0 \u00a0 \u00a0 sliding masses \u00a0 \u00a0 \u00a0 \u00a0 pointer \u00a0 \u00a0 \u00a0 \u00a0 the scale The pan is the silver tray on which you will place your test specimen. There are three sliding masses on a triple beam balance. The largest mass represents 100 grams, the middle mass represents 10 grams, and the smallest represents 1 gram. These masses are slid along differing beams to try and determine the mass of the specimen in the pan. Next is the pointer, The pointer points towards a scale and helps you determine whenever you have the correct mass.\u00a0 The scale is what the pointer uses to determine when the masses are equal. Once the pointer is directed at the 0 on the scale then your masses are equal.", "step_imgs": ["https://cdn.instructables.com/FD6/78AI/HRI97HWP/FD678AIHRI97HWP.LARGE.jpg"], "step_title": "Step 1: Important Parts"}, {"step": 2, "steps_text": "Place your triple beam balance on a level surface and make sure that all of your sliding masses are on zero.", "step_imgs": ["https://cdn.instructables.com/FLC/LM55/HUBWNUHQ/FLCLM55HUBWNUHQ.LARGE.jpg"], "step_title": "Step 2: Setup"}, {"step": 3, "steps_text": "In order to reduce error in your experiment you will need to zero your triple beam balance.To do this you will want to make sure that nothing is on the pan and that all your masses are on zero. Then you will adjust a knob under the pan until the pointer is directed at zero. Image two shows a closer view of the pointer and scale.", "step_imgs": ["https://cdn.instructables.com/FX1/L1HA/HRI97HYG/FX1L1HAHRI97HYG.LARGE.jpg", "https://cdn.instructables.com/F39/85KH/HRKR0YPS/F3985KHHRKR0YPS.LARGE.jpg"], "step_title": "Step 3: Zeroing the Scale"}, {"step": 4, "steps_text": "Then you will choose a test specimen and place it on the pan.", "step_imgs": ["https://cdn.instructables.com/F7P/O3CF/HUBWNUI0/F7PO3CFHUBWNUI0.LARGE.jpg"], "step_title": "Step 4: Specimen Selection"}, {"step": 5, "steps_text": "First you start with the 100 gram sliding mass, then you move it along its beam from notch to notch until the pointer moves to below the zero on the scale. Once this happens move the slider back to the previous notch. For example if you moved the mass to the 600 gram slot and the pointer moved below zero, then you would move the 100 gram slider back to the 500 gram notch.", "step_imgs": ["https://cdn.instructables.com/FNE/Q8FZ/HRI8X9QO/FNEQ8FZHRI8X9QO.LARGE.jpg"], "step_title": "Step 5: Using the 100 Gram Slider"}, {"step": 6, "steps_text": "Repeat step five with the ten gram slider", "step_imgs": ["https://cdn.instructables.com/FNI/DOKU/HRKR0YR2/FNIDOKUHRKR0YR2.LARGE.jpg"], "step_title": "Step 6: Using the Ten Gram Slider"}, {"step": 7, "steps_text": "The scale for the 1 gram slider goes from 0 to 9.9. There are also nine increments between each whole number that represent .1 grams. There are no notches for the 1 gram slider, so you will just push the slider until you get the pointer to point directly at the zero on the scale. To get the most precise measurement possible you will want to count the increments past the nearest whole number. If your 1 gram mass is pointing between two of the increments then you can add a value of .05 to your measurement. This is called the one half least squares regression method.", "step_imgs": ["https://cdn.instructables.com/F2F/S1CI/HRI8XACB/F2FS1CIHRI8XACB.LARGE.jpg"], "step_title": "Step 7: Using the 1 Gram Slider"}, {"step": 8, "steps_text": "Once your sliding masses are in position then you will sum each of the numbers together. This will be the mass of your specimen. In the figure are the results of my measurements for an apple.", "step_imgs": ["https://cdn.instructables.com/F8R/4IPZ/HUBWNUJP/F8R4IPZHUBWNUJP.LARGE.jpg"], "step_title": "Step 8: Determining Your Mass"}, {"step": 9, "steps_text": "Repeat steps 5-8 with your specimen and record each of the results. The more trials you record the more accurate your measurement will be.", "step_imgs": [], "step_title": "Step 9: Multiple Trials"}, {"step": 10, "steps_text": "After collecting your data, you find the average of the measurements. Use the formula in the picture. Where Xn is your last measurement, and you add every measurement up to that point. N is the number of measurements. The value I got for my measurements is 181.", "step_imgs": ["https://cdn.instructables.com/FVP/V48V/HUBWNUQF/FVPV48VHUBWNUQF.LARGE.jpg"], "step_title": "Step 10: Calculating the Average"}, {"step": 11, "steps_text": "It is almost impossible to make a perfect measurement. In order to combat this we will do an uncertainty analysis to ensure that we get a range of values that include the true mass of the specimen. In order to do this we will need the standard deviation of our sample and we will need a t-value that corresponds to our confidence interval.", "step_imgs": ["https://cdn.instructables.com/FG3/15IB/HUBWNUWI/FG315IBHUBWNUWI.LARGE.jpg"], "step_title": "Step 11: Uncertainty Analysis"}, {"step": 12, "steps_text": "To calculate the standard deviation, often referred to as s, we will use the formula in the picture. My value for standard deviation was 1.36.", "step_imgs": ["https://cdn.instructables.com/FT2/SOYJ/HUBWNV4O/FT2SOYJHUBWNV4O.LARGE.jpg"], "step_title": "Step 12: Standard Deviation"}, {"step": 13, "steps_text": "Level of confidence refers to the probability that the true value will be contained within the span of your uncertainty analysis. The accepted level of confidence in engineering is 95%, this is the sixth column of the table. The df value on the left hand side of the table is equal to N-1. In my experiment I had 5 trials, so my df value is 4. We will also use the two-tail portion of the table so my t-value is 2.132.", "step_imgs": ["https://cdn.instructables.com/FHX/RJGG/HUBWNV9F/FHXRJGGHUBWNV9F.LARGE.jpg"], "step_title": "Step 13: T-values"}, {"step": 14, "steps_text": "We will use the formula in the picture. my value for uncertainty was 1.30.", "step_imgs": ["https://cdn.instructables.com/F85/VB2O/HUBWNVJI/F85VB2OHUBWNVJI.LARGE.jpg"], "step_title": "Step 14: Calculating Uncertainty"}, {"step": 15, "steps_text": "We will use the formula in the picture . so my measurement would have been 181\u00b11.30.", "step_imgs": ["https://cdn.instructables.com/F8Z/CUYJ/HUBWNWHK/F8ZCUYJHUBWNWHK.LARGE.jpg"], "step_title": "Step 15: Putting It All Together"}], "channel": "Tools"}, {"category": "technology", "description": "This instructable will walk you through how to make an accurate measurement with a triple-beam balance, as well as teach you how to account for measurement error with an uncertainty analysis. Time to complete: 15-20 minutes", "title": "Using a Triple-beam Balance With Uncertainty Analysis", "url": "https://www.instructables.com/id/using-a-triple-beam-balance-with-uncertainty-analy/", "section": "technology", "steps": [{"step": 1, "steps_text": "Important parts: \u00a0 \u00a0 \u00a0 \u00a0 pan \u00a0 \u00a0 \u00a0 \u00a0 sliding masses \u00a0 \u00a0 \u00a0 \u00a0 pointer \u00a0 \u00a0 \u00a0 \u00a0 the scale The pan is the silver tray on which you will place your test specimen. There are three sliding masses on a triple beam balance. The largest mass represents 100 grams, the middle mass represents 10 grams, and the smallest represents 1 gram. These masses are slid along differing beams to try and determine the mass of the specimen in the pan. Next is the pointer, The pointer points towards a scale and helps you determine whenever you have the correct mass.\u00a0 The scale is what the pointer uses to determine when the masses are equal. Once the pointer is directed at the 0 on the scale then your masses are equal.", "step_imgs": ["https://cdn.instructables.com/FD6/78AI/HRI97HWP/FD678AIHRI97HWP.LARGE.jpg"], "step_title": "Step 1: Important Parts"}, {"step": 2, "steps_text": "Place your triple beam balance on a level surface and make sure that all of your sliding masses are on zero.", "step_imgs": ["https://cdn.instructables.com/FLC/LM55/HUBWNUHQ/FLCLM55HUBWNUHQ.LARGE.jpg"], "step_title": "Step 2: Setup"}, {"step": 3, "steps_text": "In order to reduce error in your experiment you will need to zero your triple beam balance.To do this you will want to make sure that nothing is on the pan and that all your masses are on zero. Then you will adjust a knob under the pan until the pointer is directed at zero. Image two shows a closer view of the pointer and scale.", "step_imgs": ["https://cdn.instructables.com/FX1/L1HA/HRI97HYG/FX1L1HAHRI97HYG.LARGE.jpg", "https://cdn.instructables.com/F39/85KH/HRKR0YPS/F3985KHHRKR0YPS.LARGE.jpg"], "step_title": "Step 3: Zeroing the Scale"}, {"step": 4, "steps_text": "Then you will choose a test specimen and place it on the pan.", "step_imgs": ["https://cdn.instructables.com/F7P/O3CF/HUBWNUI0/F7PO3CFHUBWNUI0.LARGE.jpg"], "step_title": "Step 4: Specimen Selection"}, {"step": 5, "steps_text": "First you start with the 100 gram sliding mass, then you move it along its beam from notch to notch until the pointer moves to below the zero on the scale. Once this happens move the slider back to the previous notch. For example if you moved the mass to the 600 gram slot and the pointer moved below zero, then you would move the 100 gram slider back to the 500 gram notch.", "step_imgs": ["https://cdn.instructables.com/FNE/Q8FZ/HRI8X9QO/FNEQ8FZHRI8X9QO.LARGE.jpg"], "step_title": "Step 5: Using the 100 Gram Slider"}, {"step": 6, "steps_text": "Repeat step five with the ten gram slider", "step_imgs": ["https://cdn.instructables.com/FNI/DOKU/HRKR0YR2/FNIDOKUHRKR0YR2.LARGE.jpg"], "step_title": "Step 6: Using the Ten Gram Slider"}, {"step": 7, "steps_text": "The scale for the 1 gram slider goes from 0 to 9.9. There are also nine increments between each whole number that represent .1 grams. There are no notches for the 1 gram slider, so you will just push the slider until you get the pointer to point directly at the zero on the scale. To get the most precise measurement possible you will want to count the increments past the nearest whole number. If your 1 gram mass is pointing between two of the increments then you can add a value of .05 to your measurement. This is called the one half least squares regression method.", "step_imgs": ["https://cdn.instructables.com/F2F/S1CI/HRI8XACB/F2FS1CIHRI8XACB.LARGE.jpg"], "step_title": "Step 7: Using the 1 Gram Slider"}, {"step": 8, "steps_text": "Once your sliding masses are in position then you will sum each of the numbers together. This will be the mass of your specimen. In the figure are the results of my measurements for an apple.", "step_imgs": ["https://cdn.instructables.com/F8R/4IPZ/HUBWNUJP/F8R4IPZHUBWNUJP.LARGE.jpg"], "step_title": "Step 8: Determining Your Mass"}, {"step": 9, "steps_text": "Repeat steps 5-8 with your specimen and record each of the results. The more trials you record the more accurate your measurement will be.", "step_imgs": [], "step_title": "Step 9: Multiple Trials"}, {"step": 10, "steps_text": "After collecting your data, you find the average of the measurements. Use the formula in the picture. Where Xn is your last measurement, and you add every measurement up to that point. N is the number of measurements. The value I got for my measurements is 181.", "step_imgs": ["https://cdn.instructables.com/FVP/V48V/HUBWNUQF/FVPV48VHUBWNUQF.LARGE.jpg"], "step_title": "Step 10: Calculating the Average"}, {"step": 11, "steps_text": "It is almost impossible to make a perfect measurement. In order to combat this we will do an uncertainty analysis to ensure that we get a range of values that include the true mass of the specimen. In order to do this we will need the standard deviation of our sample and we will need a t-value that corresponds to our confidence interval.", "step_imgs": ["https://cdn.instructables.com/FG3/15IB/HUBWNUWI/FG315IBHUBWNUWI.LARGE.jpg"], "step_title": "Step 11: Uncertainty Analysis"}, {"step": 12, "steps_text": "To calculate the standard deviation, often referred to as s, we will use the formula in the picture. My value for standard deviation was 1.36.", "step_imgs": ["https://cdn.instructables.com/FT2/SOYJ/HUBWNV4O/FT2SOYJHUBWNV4O.LARGE.jpg"], "step_title": "Step 12: Standard Deviation"}, {"step": 13, "steps_text": "Level of confidence refers to the probability that the true value will be contained within the span of your uncertainty analysis. The accepted level of confidence in engineering is 95%, this is the sixth column of the table. The df value on the left hand side of the table is equal to N-1. In my experiment I had 5 trials, so my df value is 4. We will also use the two-tail portion of the table so my t-value is 2.132.", "step_imgs": ["https://cdn.instructables.com/FHX/RJGG/HUBWNV9F/FHXRJGGHUBWNV9F.LARGE.jpg"], "step_title": "Step 13: T-values"}, {"step": 14, "steps_text": "We will use the formula in the picture. my value for uncertainty was 1.30.", "step_imgs": ["https://cdn.instructables.com/F85/VB2O/HUBWNVJI/F85VB2OHUBWNVJI.LARGE.jpg"], "step_title": "Step 14: Calculating Uncertainty"}, {"step": 15, "steps_text": "We will use the formula in the picture . so my measurement would have been 181\u00b11.30.", "step_imgs": ["https://cdn.instructables.com/F8Z/CUYJ/HUBWNWHK/F8ZCUYJHUBWNWHK.LARGE.jpg"], "step_title": "Step 15: Putting It All Together"}], "channel": "Tools"}, {"category": "technology", "description": "This instructable will walk you through how to make an accurate measurement with a triple-beam balance, as well as teach you how to account for measurement error with an uncertainty analysis. Time to complete: 15-20 minutes", "title": "Using a Triple-beam Balance With Uncertainty Analysis", "url": "https://www.instructables.com/id/using-a-triple-beam-balance-with-uncertainty-analy/", "section": "technology", "steps": [{"step": 1, "steps_text": "Important parts: \u00a0 \u00a0 \u00a0 \u00a0 pan \u00a0 \u00a0 \u00a0 \u00a0 sliding masses \u00a0 \u00a0 \u00a0 \u00a0 pointer \u00a0 \u00a0 \u00a0 \u00a0 the scale The pan is the silver tray on which you will place your test specimen. There are three sliding masses on a triple beam balance. The largest mass represents 100 grams, the middle mass represents 10 grams, and the smallest represents 1 gram. These masses are slid along differing beams to try and determine the mass of the specimen in the pan. Next is the pointer, The pointer points towards a scale and helps you determine whenever you have the correct mass.\u00a0 The scale is what the pointer uses to determine when the masses are equal. Once the pointer is directed at the 0 on the scale then your masses are equal.", "step_imgs": ["https://cdn.instructables.com/FD6/78AI/HRI97HWP/FD678AIHRI97HWP.LARGE.jpg"], "step_title": "Step 1: Important Parts"}, {"step": 2, "steps_text": "Place your triple beam balance on a level surface and make sure that all of your sliding masses are on zero.", "step_imgs": ["https://cdn.instructables.com/FLC/LM55/HUBWNUHQ/FLCLM55HUBWNUHQ.LARGE.jpg"], "step_title": "Step 2: Setup"}, {"step": 3, "steps_text": "In order to reduce error in your experiment you will need to zero your triple beam balance.To do this you will want to make sure that nothing is on the pan and that all your masses are on zero. Then you will adjust a knob under the pan until the pointer is directed at zero. Image two shows a closer view of the pointer and scale.", "step_imgs": ["https://cdn.instructables.com/FX1/L1HA/HRI97HYG/FX1L1HAHRI97HYG.LARGE.jpg", "https://cdn.instructables.com/F39/85KH/HRKR0YPS/F3985KHHRKR0YPS.LARGE.jpg"], "step_title": "Step 3: Zeroing the Scale"}, {"step": 4, "steps_text": "Then you will choose a test specimen and place it on the pan.", "step_imgs": ["https://cdn.instructables.com/F7P/O3CF/HUBWNUI0/F7PO3CFHUBWNUI0.LARGE.jpg"], "step_title": "Step 4: Specimen Selection"}, {"step": 5, "steps_text": "First you start with the 100 gram sliding mass, then you move it along its beam from notch to notch until the pointer moves to below the zero on the scale. Once this happens move the slider back to the previous notch. For example if you moved the mass to the 600 gram slot and the pointer moved below zero, then you would move the 100 gram slider back to the 500 gram notch.", "step_imgs": ["https://cdn.instructables.com/FNE/Q8FZ/HRI8X9QO/FNEQ8FZHRI8X9QO.LARGE.jpg"], "step_title": "Step 5: Using the 100 Gram Slider"}, {"step": 6, "steps_text": "Repeat step five with the ten gram slider", "step_imgs": ["https://cdn.instructables.com/FNI/DOKU/HRKR0YR2/FNIDOKUHRKR0YR2.LARGE.jpg"], "step_title": "Step 6: Using the Ten Gram Slider"}, {"step": 7, "steps_text": "The scale for the 1 gram slider goes from 0 to 9.9. There are also nine increments between each whole number that represent .1 grams. There are no notches for the 1 gram slider, so you will just push the slider until you get the pointer to point directly at the zero on the scale. To get the most precise measurement possible you will want to count the increments past the nearest whole number. If your 1 gram mass is pointing between two of the increments then you can add a value of .05 to your measurement. This is called the one half least squares regression method.", "step_imgs": ["https://cdn.instructables.com/F2F/S1CI/HRI8XACB/F2FS1CIHRI8XACB.LARGE.jpg"], "step_title": "Step 7: Using the 1 Gram Slider"}, {"step": 8, "steps_text": "Once your sliding masses are in position then you will sum each of the numbers together. This will be the mass of your specimen. In the figure are the results of my measurements for an apple.", "step_imgs": ["https://cdn.instructables.com/F8R/4IPZ/HUBWNUJP/F8R4IPZHUBWNUJP.LARGE.jpg"], "step_title": "Step 8: Determining Your Mass"}, {"step": 9, "steps_text": "Repeat steps 5-8 with your specimen and record each of the results. The more trials you record the more accurate your measurement will be.", "step_imgs": [], "step_title": "Step 9: Multiple Trials"}, {"step": 10, "steps_text": "After collecting your data, you find the average of the measurements. Use the formula in the picture. Where Xn is your last measurement, and you add every measurement up to that point. N is the number of measurements. The value I got for my measurements is 181.", "step_imgs": ["https://cdn.instructables.com/FVP/V48V/HUBWNUQF/FVPV48VHUBWNUQF.LARGE.jpg"], "step_title": "Step 10: Calculating the Average"}, {"step": 11, "steps_text": "It is almost impossible to make a perfect measurement. In order to combat this we will do an uncertainty analysis to ensure that we get a range of values that include the true mass of the specimen. In order to do this we will need the standard deviation of our sample and we will need a t-value that corresponds to our confidence interval.", "step_imgs": ["https://cdn.instructables.com/FG3/15IB/HUBWNUWI/FG315IBHUBWNUWI.LARGE.jpg"], "step_title": "Step 11: Uncertainty Analysis"}, {"step": 12, "steps_text": "To calculate the standard deviation, often referred to as s, we will use the formula in the picture. My value for standard deviation was 1.36.", "step_imgs": ["https://cdn.instructables.com/FT2/SOYJ/HUBWNV4O/FT2SOYJHUBWNV4O.LARGE.jpg"], "step_title": "Step 12: Standard Deviation"}, {"step": 13, "steps_text": "Level of confidence refers to the probability that the true value will be contained within the span of your uncertainty analysis. The accepted level of confidence in engineering is 95%, this is the sixth column of the table. The df value on the left hand side of the table is equal to N-1. In my experiment I had 5 trials, so my df value is 4. We will also use the two-tail portion of the table so my t-value is 2.132.", "step_imgs": ["https://cdn.instructables.com/FHX/RJGG/HUBWNV9F/FHXRJGGHUBWNV9F.LARGE.jpg"], "step_title": "Step 13: T-values"}, {"step": 14, "steps_text": "We will use the formula in the picture. my value for uncertainty was 1.30.", "step_imgs": ["https://cdn.instructables.com/F85/VB2O/HUBWNVJI/F85VB2OHUBWNVJI.LARGE.jpg"], "step_title": "Step 14: Calculating Uncertainty"}, {"step": 15, "steps_text": "We will use the formula in the picture . so my measurement would have been 181\u00b11.30.", "step_imgs": ["https://cdn.instructables.com/F8Z/CUYJ/HUBWNWHK/F8ZCUYJHUBWNWHK.LARGE.jpg"], "step_title": "Step 15: Putting It All Together"}], "channel": "Tools"}, {"category": "technology", "description": "This instructable will walk you through how to make an accurate measurement with a triple-beam balance, as well as teach you how to account for measurement error with an uncertainty analysis. Time to complete: 15-20 minutes", "title": "Using a Triple-beam Balance With Uncertainty Analysis", "url": "https://www.instructables.com/id/using-a-triple-beam-balance-with-uncertainty-analy/", "section": "technology", "steps": [{"step": 1, "steps_text": "Important parts: \u00a0 \u00a0 \u00a0 \u00a0 pan \u00a0 \u00a0 \u00a0 \u00a0 sliding masses \u00a0 \u00a0 \u00a0 \u00a0 pointer \u00a0 \u00a0 \u00a0 \u00a0 the scale The pan is the silver tray on which you will place your test specimen. There are three sliding masses on a triple beam balance. The largest mass represents 100 grams, the middle mass represents 10 grams, and the smallest represents 1 gram. These masses are slid along differing beams to try and determine the mass of the specimen in the pan. Next is the pointer, The pointer points towards a scale and helps you determine whenever you have the correct mass.\u00a0 The scale is what the pointer uses to determine when the masses are equal. Once the pointer is directed at the 0 on the scale then your masses are equal.", "step_imgs": ["https://cdn.instructables.com/FD6/78AI/HRI97HWP/FD678AIHRI97HWP.LARGE.jpg"], "step_title": "Step 1: Important Parts"}, {"step": 2, "steps_text": "Place your triple beam balance on a level surface and make sure that all of your sliding masses are on zero.", "step_imgs": ["https://cdn.instructables.com/FLC/LM55/HUBWNUHQ/FLCLM55HUBWNUHQ.LARGE.jpg"], "step_title": "Step 2: Setup"}, {"step": 3, "steps_text": "In order to reduce error in your experiment you will need to zero your triple beam balance.To do this you will want to make sure that nothing is on the pan and that all your masses are on zero. Then you will adjust a knob under the pan until the pointer is directed at zero. Image two shows a closer view of the pointer and scale.", "step_imgs": ["https://cdn.instructables.com/FX1/L1HA/HRI97HYG/FX1L1HAHRI97HYG.LARGE.jpg", "https://cdn.instructables.com/F39/85KH/HRKR0YPS/F3985KHHRKR0YPS.LARGE.jpg"], "step_title": "Step 3: Zeroing the Scale"}, {"step": 4, "steps_text": "Then you will choose a test specimen and place it on the pan.", "step_imgs": ["https://cdn.instructables.com/F7P/O3CF/HUBWNUI0/F7PO3CFHUBWNUI0.LARGE.jpg"], "step_title": "Step 4: Specimen Selection"}, {"step": 5, "steps_text": "First you start with the 100 gram sliding mass, then you move it along its beam from notch to notch until the pointer moves to below the zero on the scale. Once this happens move the slider back to the previous notch. For example if you moved the mass to the 600 gram slot and the pointer moved below zero, then you would move the 100 gram slider back to the 500 gram notch.", "step_imgs": ["https://cdn.instructables.com/FNE/Q8FZ/HRI8X9QO/FNEQ8FZHRI8X9QO.LARGE.jpg"], "step_title": "Step 5: Using the 100 Gram Slider"}, {"step": 6, "steps_text": "Repeat step five with the ten gram slider", "step_imgs": ["https://cdn.instructables.com/FNI/DOKU/HRKR0YR2/FNIDOKUHRKR0YR2.LARGE.jpg"], "step_title": "Step 6: Using the Ten Gram Slider"}, {"step": 7, "steps_text": "The scale for the 1 gram slider goes from 0 to 9.9. There are also nine increments between each whole number that represent .1 grams. There are no notches for the 1 gram slider, so you will just push the slider until you get the pointer to point directly at the zero on the scale. To get the most precise measurement possible you will want to count the increments past the nearest whole number. If your 1 gram mass is pointing between two of the increments then you can add a value of .05 to your measurement. This is called the one half least squares regression method.", "step_imgs": ["https://cdn.instructables.com/F2F/S1CI/HRI8XACB/F2FS1CIHRI8XACB.LARGE.jpg"], "step_title": "Step 7: Using the 1 Gram Slider"}, {"step": 8, "steps_text": "Once your sliding masses are in position then you will sum each of the numbers together. This will be the mass of your specimen. In the figure are the results of my measurements for an apple.", "step_imgs": ["https://cdn.instructables.com/F8R/4IPZ/HUBWNUJP/F8R4IPZHUBWNUJP.LARGE.jpg"], "step_title": "Step 8: Determining Your Mass"}, {"step": 9, "steps_text": "Repeat steps 5-8 with your specimen and record each of the results. The more trials you record the more accurate your measurement will be.", "step_imgs": [], "step_title": "Step 9: Multiple Trials"}, {"step": 10, "steps_text": "After collecting your data, you find the average of the measurements. Use the formula in the picture. Where Xn is your last measurement, and you add every measurement up to that point. N is the number of measurements. The value I got for my measurements is 181.", "step_imgs": ["https://cdn.instructables.com/FVP/V48V/HUBWNUQF/FVPV48VHUBWNUQF.LARGE.jpg"], "step_title": "Step 10: Calculating the Average"}, {"step": 11, "steps_text": "It is almost impossible to make a perfect measurement. In order to combat this we will do an uncertainty analysis to ensure that we get a range of values that include the true mass of the specimen. In order to do this we will need the standard deviation of our sample and we will need a t-value that corresponds to our confidence interval.", "step_imgs": ["https://cdn.instructables.com/FG3/15IB/HUBWNUWI/FG315IBHUBWNUWI.LARGE.jpg"], "step_title": "Step 11: Uncertainty Analysis"}, {"step": 12, "steps_text": "To calculate the standard deviation, often referred to as s, we will use the formula in the picture. My value for standard deviation was 1.36.", "step_imgs": ["https://cdn.instructables.com/FT2/SOYJ/HUBWNV4O/FT2SOYJHUBWNV4O.LARGE.jpg"], "step_title": "Step 12: Standard Deviation"}, {"step": 13, "steps_text": "Level of confidence refers to the probability that the true value will be contained within the span of your uncertainty analysis. The accepted level of confidence in engineering is 95%, this is the sixth column of the table. The df value on the left hand side of the table is equal to N-1. In my experiment I had 5 trials, so my df value is 4. We will also use the two-tail portion of the table so my t-value is 2.132.", "step_imgs": ["https://cdn.instructables.com/FHX/RJGG/HUBWNV9F/FHXRJGGHUBWNV9F.LARGE.jpg"], "step_title": "Step 13: T-values"}, {"step": 14, "steps_text": "We will use the formula in the picture. my value for uncertainty was 1.30.", "step_imgs": ["https://cdn.instructables.com/F85/VB2O/HUBWNVJI/F85VB2OHUBWNVJI.LARGE.jpg"], "step_title": "Step 14: Calculating Uncertainty"}, {"step": 15, "steps_text": "We will use the formula in the picture . so my measurement would have been 181\u00b11.30.", "step_imgs": ["https://cdn.instructables.com/F8Z/CUYJ/HUBWNWHK/F8ZCUYJHUBWNWHK.LARGE.jpg"], "step_title": "Step 15: Putting It All Together"}], "channel": "Tools"}, {"category": "technology", "description": "This instructable will walk you through how to make an accurate measurement with a triple-beam balance, as well as teach you how to account for measurement error with an uncertainty analysis. Time to complete: 15-20 minutes", "title": "Using a Triple-beam Balance With Uncertainty Analysis", "url": "https://www.instructables.com/id/using-a-triple-beam-balance-with-uncertainty-analy/", "section": "technology", "steps": [{"step": 1, "steps_text": "Important parts: \u00a0 \u00a0 \u00a0 \u00a0 pan \u00a0 \u00a0 \u00a0 \u00a0 sliding masses \u00a0 \u00a0 \u00a0 \u00a0 pointer \u00a0 \u00a0 \u00a0 \u00a0 the scale The pan is the silver tray on which you will place your test specimen. There are three sliding masses on a triple beam balance. The largest mass represents 100 grams, the middle mass represents 10 grams, and the smallest represents 1 gram. These masses are slid along differing beams to try and determine the mass of the specimen in the pan. Next is the pointer, The pointer points towards a scale and helps you determine whenever you have the correct mass.\u00a0 The scale is what the pointer uses to determine when the masses are equal. Once the pointer is directed at the 0 on the scale then your masses are equal.", "step_imgs": ["https://cdn.instructables.com/FD6/78AI/HRI97HWP/FD678AIHRI97HWP.LARGE.jpg"], "step_title": "Step 1: Important Parts"}, {"step": 2, "steps_text": "Place your triple beam balance on a level surface and make sure that all of your sliding masses are on zero.", "step_imgs": ["https://cdn.instructables.com/FLC/LM55/HUBWNUHQ/FLCLM55HUBWNUHQ.LARGE.jpg"], "step_title": "Step 2: Setup"}, {"step": 3, "steps_text": "In order to reduce error in your experiment you will need to zero your triple beam balance.To do this you will want to make sure that nothing is on the pan and that all your masses are on zero. Then you will adjust a knob under the pan until the pointer is directed at zero. Image two shows a closer view of the pointer and scale.", "step_imgs": ["https://cdn.instructables.com/FX1/L1HA/HRI97HYG/FX1L1HAHRI97HYG.LARGE.jpg", "https://cdn.instructables.com/F39/85KH/HRKR0YPS/F3985KHHRKR0YPS.LARGE.jpg"], "step_title": "Step 3: Zeroing the Scale"}, {"step": 4, "steps_text": "Then you will choose a test specimen and place it on the pan.", "step_imgs": ["https://cdn.instructables.com/F7P/O3CF/HUBWNUI0/F7PO3CFHUBWNUI0.LARGE.jpg"], "step_title": "Step 4: Specimen Selection"}, {"step": 5, "steps_text": "First you start with the 100 gram sliding mass, then you move it along its beam from notch to notch until the pointer moves to below the zero on the scale. Once this happens move the slider back to the previous notch. For example if you moved the mass to the 600 gram slot and the pointer moved below zero, then you would move the 100 gram slider back to the 500 gram notch.", "step_imgs": ["https://cdn.instructables.com/FNE/Q8FZ/HRI8X9QO/FNEQ8FZHRI8X9QO.LARGE.jpg"], "step_title": "Step 5: Using the 100 Gram Slider"}, {"step": 6, "steps_text": "Repeat step five with the ten gram slider", "step_imgs": ["https://cdn.instructables.com/FNI/DOKU/HRKR0YR2/FNIDOKUHRKR0YR2.LARGE.jpg"], "step_title": "Step 6: Using the Ten Gram Slider"}, {"step": 7, "steps_text": "The scale for the 1 gram slider goes from 0 to 9.9. There are also nine increments between each whole number that represent .1 grams. There are no notches for the 1 gram slider, so you will just push the slider until you get the pointer to point directly at the zero on the scale. To get the most precise measurement possible you will want to count the increments past the nearest whole number. If your 1 gram mass is pointing between two of the increments then you can add a value of .05 to your measurement. This is called the one half least squares regression method.", "step_imgs": ["https://cdn.instructables.com/F2F/S1CI/HRI8XACB/F2FS1CIHRI8XACB.LARGE.jpg"], "step_title": "Step 7: Using the 1 Gram Slider"}, {"step": 8, "steps_text": "Once your sliding masses are in position then you will sum each of the numbers together. This will be the mass of your specimen. In the figure are the results of my measurements for an apple.", "step_imgs": ["https://cdn.instructables.com/F8R/4IPZ/HUBWNUJP/F8R4IPZHUBWNUJP.LARGE.jpg"], "step_title": "Step 8: Determining Your Mass"}, {"step": 9, "steps_text": "Repeat steps 5-8 with your specimen and record each of the results. The more trials you record the more accurate your measurement will be.", "step_imgs": [], "step_title": "Step 9: Multiple Trials"}, {"step": 10, "steps_text": "After collecting your data, you find the average of the measurements. Use the formula in the picture. Where Xn is your last measurement, and you add every measurement up to that point. N is the number of measurements. The value I got for my measurements is 181.", "step_imgs": ["https://cdn.instructables.com/FVP/V48V/HUBWNUQF/FVPV48VHUBWNUQF.LARGE.jpg"], "step_title": "Step 10: Calculating the Average"}, {"step": 11, "steps_text": "It is almost impossible to make a perfect measurement. In order to combat this we will do an uncertainty analysis to ensure that we get a range of values that include the true mass of the specimen. In order to do this we will need the standard deviation of our sample and we will need a t-value that corresponds to our confidence interval.", "step_imgs": ["https://cdn.instructables.com/FG3/15IB/HUBWNUWI/FG315IBHUBWNUWI.LARGE.jpg"], "step_title": "Step 11: Uncertainty Analysis"}, {"step": 12, "steps_text": "To calculate the standard deviation, often referred to as s, we will use the formula in the picture. My value for standard deviation was 1.36.", "step_imgs": ["https://cdn.instructables.com/FT2/SOYJ/HUBWNV4O/FT2SOYJHUBWNV4O.LARGE.jpg"], "step_title": "Step 12: Standard Deviation"}, {"step": 13, "steps_text": "Level of confidence refers to the probability that the true value will be contained within the span of your uncertainty analysis. The accepted level of confidence in engineering is 95%, this is the sixth column of the table. The df value on the left hand side of the table is equal to N-1. In my experiment I had 5 trials, so my df value is 4. We will also use the two-tail portion of the table so my t-value is 2.132.", "step_imgs": ["https://cdn.instructables.com/FHX/RJGG/HUBWNV9F/FHXRJGGHUBWNV9F.LARGE.jpg"], "step_title": "Step 13: T-values"}, {"step": 14, "steps_text": "We will use the formula in the picture. my value for uncertainty was 1.30.", "step_imgs": ["https://cdn.instructables.com/F85/VB2O/HUBWNVJI/F85VB2OHUBWNVJI.LARGE.jpg"], "step_title": "Step 14: Calculating Uncertainty"}, {"step": 15, "steps_text": "We will use the formula in the picture . so my measurement would have been 181\u00b11.30.", "step_imgs": ["https://cdn.instructables.com/F8Z/CUYJ/HUBWNWHK/F8ZCUYJHUBWNWHK.LARGE.jpg"], "step_title": "Step 15: Putting It All Together"}], "channel": "Tools"}, {"category": "technology", "description": "This instructable will walk you through how to make an accurate measurement with a triple-beam balance, as well as teach you how to account for measurement error with an uncertainty analysis. Time to complete: 15-20 minutes", "title": "Using a Triple-beam Balance With Uncertainty Analysis", "url": "https://www.instructables.com/id/using-a-triple-beam-balance-with-uncertainty-analy/", "section": "technology", "steps": [{"step": 1, "steps_text": "Important parts: \u00a0 \u00a0 \u00a0 \u00a0 pan \u00a0 \u00a0 \u00a0 \u00a0 sliding masses \u00a0 \u00a0 \u00a0 \u00a0 pointer \u00a0 \u00a0 \u00a0 \u00a0 the scale The pan is the silver tray on which you will place your test specimen. There are three sliding masses on a triple beam balance. The largest mass represents 100 grams, the middle mass represents 10 grams, and the smallest represents 1 gram. These masses are slid along differing beams to try and determine the mass of the specimen in the pan. Next is the pointer, The pointer points towards a scale and helps you determine whenever you have the correct mass.\u00a0 The scale is what the pointer uses to determine when the masses are equal. Once the pointer is directed at the 0 on the scale then your masses are equal.", "step_imgs": ["https://cdn.instructables.com/FD6/78AI/HRI97HWP/FD678AIHRI97HWP.LARGE.jpg"], "step_title": "Step 1: Important Parts"}, {"step": 2, "steps_text": "Place your triple beam balance on a level surface and make sure that all of your sliding masses are on zero.", "step_imgs": ["https://cdn.instructables.com/FLC/LM55/HUBWNUHQ/FLCLM55HUBWNUHQ.LARGE.jpg"], "step_title": "Step 2: Setup"}, {"step": 3, "steps_text": "In order to reduce error in your experiment you will need to zero your triple beam balance.To do this you will want to make sure that nothing is on the pan and that all your masses are on zero. Then you will adjust a knob under the pan until the pointer is directed at zero. Image two shows a closer view of the pointer and scale.", "step_imgs": ["https://cdn.instructables.com/FX1/L1HA/HRI97HYG/FX1L1HAHRI97HYG.LARGE.jpg", "https://cdn.instructables.com/F39/85KH/HRKR0YPS/F3985KHHRKR0YPS.LARGE.jpg"], "step_title": "Step 3: Zeroing the Scale"}, {"step": 4, "steps_text": "Then you will choose a test specimen and place it on the pan.", "step_imgs": ["https://cdn.instructables.com/F7P/O3CF/HUBWNUI0/F7PO3CFHUBWNUI0.LARGE.jpg"], "step_title": "Step 4: Specimen Selection"}, {"step": 5, "steps_text": "First you start with the 100 gram sliding mass, then you move it along its beam from notch to notch until the pointer moves to below the zero on the scale. Once this happens move the slider back to the previous notch. For example if you moved the mass to the 600 gram slot and the pointer moved below zero, then you would move the 100 gram slider back to the 500 gram notch.", "step_imgs": ["https://cdn.instructables.com/FNE/Q8FZ/HRI8X9QO/FNEQ8FZHRI8X9QO.LARGE.jpg"], "step_title": "Step 5: Using the 100 Gram Slider"}, {"step": 6, "steps_text": "Repeat step five with the ten gram slider", "step_imgs": ["https://cdn.instructables.com/FNI/DOKU/HRKR0YR2/FNIDOKUHRKR0YR2.LARGE.jpg"], "step_title": "Step 6: Using the Ten Gram Slider"}, {"step": 7, "steps_text": "The scale for the 1 gram slider goes from 0 to 9.9. There are also nine increments between each whole number that represent .1 grams. There are no notches for the 1 gram slider, so you will just push the slider until you get the pointer to point directly at the zero on the scale. To get the most precise measurement possible you will want to count the increments past the nearest whole number. If your 1 gram mass is pointing between two of the increments then you can add a value of .05 to your measurement. This is called the one half least squares regression method.", "step_imgs": ["https://cdn.instructables.com/F2F/S1CI/HRI8XACB/F2FS1CIHRI8XACB.LARGE.jpg"], "step_title": "Step 7: Using the 1 Gram Slider"}, {"step": 8, "steps_text": "Once your sliding masses are in position then you will sum each of the numbers together. This will be the mass of your specimen. In the figure are the results of my measurements for an apple.", "step_imgs": ["https://cdn.instructables.com/F8R/4IPZ/HUBWNUJP/F8R4IPZHUBWNUJP.LARGE.jpg"], "step_title": "Step 8: Determining Your Mass"}, {"step": 9, "steps_text": "Repeat steps 5-8 with your specimen and record each of the results. The more trials you record the more accurate your measurement will be.", "step_imgs": [], "step_title": "Step 9: Multiple Trials"}, {"step": 10, "steps_text": "After collecting your data, you find the average of the measurements. Use the formula in the picture. Where Xn is your last measurement, and you add every measurement up to that point. N is the number of measurements. The value I got for my measurements is 181.", "step_imgs": ["https://cdn.instructables.com/FVP/V48V/HUBWNUQF/FVPV48VHUBWNUQF.LARGE.jpg"], "step_title": "Step 10: Calculating the Average"}, {"step": 11, "steps_text": "It is almost impossible to make a perfect measurement. In order to combat this we will do an uncertainty analysis to ensure that we get a range of values that include the true mass of the specimen. In order to do this we will need the standard deviation of our sample and we will need a t-value that corresponds to our confidence interval.", "step_imgs": ["https://cdn.instructables.com/FG3/15IB/HUBWNUWI/FG315IBHUBWNUWI.LARGE.jpg"], "step_title": "Step 11: Uncertainty Analysis"}, {"step": 12, "steps_text": "To calculate the standard deviation, often referred to as s, we will use the formula in the picture. My value for standard deviation was 1.36.", "step_imgs": ["https://cdn.instructables.com/FT2/SOYJ/HUBWNV4O/FT2SOYJHUBWNV4O.LARGE.jpg"], "step_title": "Step 12: Standard Deviation"}, {"step": 13, "steps_text": "Level of confidence refers to the probability that the true value will be contained within the span of your uncertainty analysis. The accepted level of confidence in engineering is 95%, this is the sixth column of the table. The df value on the left hand side of the table is equal to N-1. In my experiment I had 5 trials, so my df value is 4. We will also use the two-tail portion of the table so my t-value is 2.132.", "step_imgs": ["https://cdn.instructables.com/FHX/RJGG/HUBWNV9F/FHXRJGGHUBWNV9F.LARGE.jpg"], "step_title": "Step 13: T-values"}, {"step": 14, "steps_text": "We will use the formula in the picture. my value for uncertainty was 1.30.", "step_imgs": ["https://cdn.instructables.com/F85/VB2O/HUBWNVJI/F85VB2OHUBWNVJI.LARGE.jpg"], "step_title": "Step 14: Calculating Uncertainty"}, {"step": 15, "steps_text": "We will use the formula in the picture . so my measurement would have been 181\u00b11.30.", "step_imgs": ["https://cdn.instructables.com/F8Z/CUYJ/HUBWNWHK/F8ZCUYJHUBWNWHK.LARGE.jpg"], "step_title": "Step 15: Putting It All Together"}], "channel": "Tools"}, {"category": "technology", "description": "This instructable will walk you through how to make an accurate measurement with a triple-beam balance, as well as teach you how to account for measurement error with an uncertainty analysis. Time to complete: 15-20 minutes", "title": "Using a Triple-beam Balance With Uncertainty Analysis", "url": "https://www.instructables.com/id/using-a-triple-beam-balance-with-uncertainty-analy/", "section": "technology", "steps": [{"step": 1, "steps_text": "Important parts: \u00a0 \u00a0 \u00a0 \u00a0 pan \u00a0 \u00a0 \u00a0 \u00a0 sliding masses \u00a0 \u00a0 \u00a0 \u00a0 pointer \u00a0 \u00a0 \u00a0 \u00a0 the scale The pan is the silver tray on which you will place your test specimen. There are three sliding masses on a triple beam balance. The largest mass represents 100 grams, the middle mass represents 10 grams, and the smallest represents 1 gram. These masses are slid along differing beams to try and determine the mass of the specimen in the pan. Next is the pointer, The pointer points towards a scale and helps you determine whenever you have the correct mass.\u00a0 The scale is what the pointer uses to determine when the masses are equal. Once the pointer is directed at the 0 on the scale then your masses are equal.", "step_imgs": ["https://cdn.instructables.com/FD6/78AI/HRI97HWP/FD678AIHRI97HWP.LARGE.jpg"], "step_title": "Step 1: Important Parts"}, {"step": 2, "steps_text": "Place your triple beam balance on a level surface and make sure that all of your sliding masses are on zero.", "step_imgs": ["https://cdn.instructables.com/FLC/LM55/HUBWNUHQ/FLCLM55HUBWNUHQ.LARGE.jpg"], "step_title": "Step 2: Setup"}, {"step": 3, "steps_text": "In order to reduce error in your experiment you will need to zero your triple beam balance.To do this you will want to make sure that nothing is on the pan and that all your masses are on zero. Then you will adjust a knob under the pan until the pointer is directed at zero. Image two shows a closer view of the pointer and scale.", "step_imgs": ["https://cdn.instructables.com/FX1/L1HA/HRI97HYG/FX1L1HAHRI97HYG.LARGE.jpg", "https://cdn.instructables.com/F39/85KH/HRKR0YPS/F3985KHHRKR0YPS.LARGE.jpg"], "step_title": "Step 3: Zeroing the Scale"}, {"step": 4, "steps_text": "Then you will choose a test specimen and place it on the pan.", "step_imgs": ["https://cdn.instructables.com/F7P/O3CF/HUBWNUI0/F7PO3CFHUBWNUI0.LARGE.jpg"], "step_title": "Step 4: Specimen Selection"}, {"step": 5, "steps_text": "First you start with the 100 gram sliding mass, then you move it along its beam from notch to notch until the pointer moves to below the zero on the scale. Once this happens move the slider back to the previous notch. For example if you moved the mass to the 600 gram slot and the pointer moved below zero, then you would move the 100 gram slider back to the 500 gram notch.", "step_imgs": ["https://cdn.instructables.com/FNE/Q8FZ/HRI8X9QO/FNEQ8FZHRI8X9QO.LARGE.jpg"], "step_title": "Step 5: Using the 100 Gram Slider"}, {"step": 6, "steps_text": "Repeat step five with the ten gram slider", "step_imgs": ["https://cdn.instructables.com/FNI/DOKU/HRKR0YR2/FNIDOKUHRKR0YR2.LARGE.jpg"], "step_title": "Step 6: Using the Ten Gram Slider"}, {"step": 7, "steps_text": "The scale for the 1 gram slider goes from 0 to 9.9. There are also nine increments between each whole number that represent .1 grams. There are no notches for the 1 gram slider, so you will just push the slider until you get the pointer to point directly at the zero on the scale. To get the most precise measurement possible you will want to count the increments past the nearest whole number. If your 1 gram mass is pointing between two of the increments then you can add a value of .05 to your measurement. This is called the one half least squares regression method.", "step_imgs": ["https://cdn.instructables.com/F2F/S1CI/HRI8XACB/F2FS1CIHRI8XACB.LARGE.jpg"], "step_title": "Step 7: Using the 1 Gram Slider"}, {"step": 8, "steps_text": "Once your sliding masses are in position then you will sum each of the numbers together. This will be the mass of your specimen. In the figure are the results of my measurements for an apple.", "step_imgs": ["https://cdn.instructables.com/F8R/4IPZ/HUBWNUJP/F8R4IPZHUBWNUJP.LARGE.jpg"], "step_title": "Step 8: Determining Your Mass"}, {"step": 9, "steps_text": "Repeat steps 5-8 with your specimen and record each of the results. The more trials you record the more accurate your measurement will be.", "step_imgs": [], "step_title": "Step 9: Multiple Trials"}, {"step": 10, "steps_text": "After collecting your data, you find the average of the measurements. Use the formula in the picture. Where Xn is your last measurement, and you add every measurement up to that point. N is the number of measurements. The value I got for my measurements is 181.", "step_imgs": ["https://cdn.instructables.com/FVP/V48V/HUBWNUQF/FVPV48VHUBWNUQF.LARGE.jpg"], "step_title": "Step 10: Calculating the Average"}, {"step": 11, "steps_text": "It is almost impossible to make a perfect measurement. In order to combat this we will do an uncertainty analysis to ensure that we get a range of values that include the true mass of the specimen. In order to do this we will need the standard deviation of our sample and we will need a t-value that corresponds to our confidence interval.", "step_imgs": ["https://cdn.instructables.com/FG3/15IB/HUBWNUWI/FG315IBHUBWNUWI.LARGE.jpg"], "step_title": "Step 11: Uncertainty Analysis"}, {"step": 12, "steps_text": "To calculate the standard deviation, often referred to as s, we will use the formula in the picture. My value for standard deviation was 1.36.", "step_imgs": ["https://cdn.instructables.com/FT2/SOYJ/HUBWNV4O/FT2SOYJHUBWNV4O.LARGE.jpg"], "step_title": "Step 12: Standard Deviation"}, {"step": 13, "steps_text": "Level of confidence refers to the probability that the true value will be contained within the span of your uncertainty analysis. The accepted level of confidence in engineering is 95%, this is the sixth column of the table. The df value on the left hand side of the table is equal to N-1. In my experiment I had 5 trials, so my df value is 4. We will also use the two-tail portion of the table so my t-value is 2.132.", "step_imgs": ["https://cdn.instructables.com/FHX/RJGG/HUBWNV9F/FHXRJGGHUBWNV9F.LARGE.jpg"], "step_title": "Step 13: T-values"}, {"step": 14, "steps_text": "We will use the formula in the picture. my value for uncertainty was 1.30.", "step_imgs": ["https://cdn.instructables.com/F85/VB2O/HUBWNVJI/F85VB2OHUBWNVJI.LARGE.jpg"], "step_title": "Step 14: Calculating Uncertainty"}, {"step": 15, "steps_text": "We will use the formula in the picture . so my measurement would have been 181\u00b11.30.", "step_imgs": ["https://cdn.instructables.com/F8Z/CUYJ/HUBWNWHK/F8ZCUYJHUBWNWHK.LARGE.jpg"], "step_title": "Step 15: Putting It All Together"}], "channel": "Tools"}, {"category": "technology", "description": "This instructable will walk you through how to make an accurate measurement with a triple-beam balance, as well as teach you how to account for measurement error with an uncertainty analysis. Time to complete: 15-20 minutes", "title": "Using a Triple-beam Balance With Uncertainty Analysis", "url": "https://www.instructables.com/id/using-a-triple-beam-balance-with-uncertainty-analy/", "section": "technology", "steps": [{"step": 1, "steps_text": "Important parts: \u00a0 \u00a0 \u00a0 \u00a0 pan \u00a0 \u00a0 \u00a0 \u00a0 sliding masses \u00a0 \u00a0 \u00a0 \u00a0 pointer \u00a0 \u00a0 \u00a0 \u00a0 the scale The pan is the silver tray on which you will place your test specimen. There are three sliding masses on a triple beam balance. The largest mass represents 100 grams, the middle mass represents 10 grams, and the smallest represents 1 gram. These masses are slid along differing beams to try and determine the mass of the specimen in the pan. Next is the pointer, The pointer points towards a scale and helps you determine whenever you have the correct mass.\u00a0 The scale is what the pointer uses to determine when the masses are equal. Once the pointer is directed at the 0 on the scale then your masses are equal.", "step_imgs": ["https://cdn.instructables.com/FD6/78AI/HRI97HWP/FD678AIHRI97HWP.LARGE.jpg"], "step_title": "Step 1: Important Parts"}, {"step": 2, "steps_text": "Place your triple beam balance on a level surface and make sure that all of your sliding masses are on zero.", "step_imgs": ["https://cdn.instructables.com/FLC/LM55/HUBWNUHQ/FLCLM55HUBWNUHQ.LARGE.jpg"], "step_title": "Step 2: Setup"}, {"step": 3, "steps_text": "In order to reduce error in your experiment you will need to zero your triple beam balance.To do this you will want to make sure that nothing is on the pan and that all your masses are on zero. Then you will adjust a knob under the pan until the pointer is directed at zero. Image two shows a closer view of the pointer and scale.", "step_imgs": ["https://cdn.instructables.com/FX1/L1HA/HRI97HYG/FX1L1HAHRI97HYG.LARGE.jpg", "https://cdn.instructables.com/F39/85KH/HRKR0YPS/F3985KHHRKR0YPS.LARGE.jpg"], "step_title": "Step 3: Zeroing the Scale"}, {"step": 4, "steps_text": "Then you will choose a test specimen and place it on the pan.", "step_imgs": ["https://cdn.instructables.com/F7P/O3CF/HUBWNUI0/F7PO3CFHUBWNUI0.LARGE.jpg"], "step_title": "Step 4: Specimen Selection"}, {"step": 5, "steps_text": "First you start with the 100 gram sliding mass, then you move it along its beam from notch to notch until the pointer moves to below the zero on the scale. Once this happens move the slider back to the previous notch. For example if you moved the mass to the 600 gram slot and the pointer moved below zero, then you would move the 100 gram slider back to the 500 gram notch.", "step_imgs": ["https://cdn.instructables.com/FNE/Q8FZ/HRI8X9QO/FNEQ8FZHRI8X9QO.LARGE.jpg"], "step_title": "Step 5: Using the 100 Gram Slider"}, {"step": 6, "steps_text": "Repeat step five with the ten gram slider", "step_imgs": ["https://cdn.instructables.com/FNI/DOKU/HRKR0YR2/FNIDOKUHRKR0YR2.LARGE.jpg"], "step_title": "Step 6: Using the Ten Gram Slider"}, {"step": 7, "steps_text": "The scale for the 1 gram slider goes from 0 to 9.9. There are also nine increments between each whole number that represent .1 grams. There are no notches for the 1 gram slider, so you will just push the slider until you get the pointer to point directly at the zero on the scale. To get the most precise measurement possible you will want to count the increments past the nearest whole number. If your 1 gram mass is pointing between two of the increments then you can add a value of .05 to your measurement. This is called the one half least squares regression method.", "step_imgs": ["https://cdn.instructables.com/F2F/S1CI/HRI8XACB/F2FS1CIHRI8XACB.LARGE.jpg"], "step_title": "Step 7: Using the 1 Gram Slider"}, {"step": 8, "steps_text": "Once your sliding masses are in position then you will sum each of the numbers together. This will be the mass of your specimen. In the figure are the results of my measurements for an apple.", "step_imgs": ["https://cdn.instructables.com/F8R/4IPZ/HUBWNUJP/F8R4IPZHUBWNUJP.LARGE.jpg"], "step_title": "Step 8: Determining Your Mass"}, {"step": 9, "steps_text": "Repeat steps 5-8 with your specimen and record each of the results. The more trials you record the more accurate your measurement will be.", "step_imgs": [], "step_title": "Step 9: Multiple Trials"}, {"step": 10, "steps_text": "After collecting your data, you find the average of the measurements. Use the formula in the picture. Where Xn is your last measurement, and you add every measurement up to that point. N is the number of measurements. The value I got for my measurements is 181.", "step_imgs": ["https://cdn.instructables.com/FVP/V48V/HUBWNUQF/FVPV48VHUBWNUQF.LARGE.jpg"], "step_title": "Step 10: Calculating the Average"}, {"step": 11, "steps_text": "It is almost impossible to make a perfect measurement. In order to combat this we will do an uncertainty analysis to ensure that we get a range of values that include the true mass of the specimen. In order to do this we will need the standard deviation of our sample and we will need a t-value that corresponds to our confidence interval.", "step_imgs": ["https://cdn.instructables.com/FG3/15IB/HUBWNUWI/FG315IBHUBWNUWI.LARGE.jpg"], "step_title": "Step 11: Uncertainty Analysis"}, {"step": 12, "steps_text": "To calculate the standard deviation, often referred to as s, we will use the formula in the picture. My value for standard deviation was 1.36.", "step_imgs": ["https://cdn.instructables.com/FT2/SOYJ/HUBWNV4O/FT2SOYJHUBWNV4O.LARGE.jpg"], "step_title": "Step 12: Standard Deviation"}, {"step": 13, "steps_text": "Level of confidence refers to the probability that the true value will be contained within the span of your uncertainty analysis. The accepted level of confidence in engineering is 95%, this is the sixth column of the table. The df value on the left hand side of the table is equal to N-1. In my experiment I had 5 trials, so my df value is 4. We will also use the two-tail portion of the table so my t-value is 2.132.", "step_imgs": ["https://cdn.instructables.com/FHX/RJGG/HUBWNV9F/FHXRJGGHUBWNV9F.LARGE.jpg"], "step_title": "Step 13: T-values"}, {"step": 14, "steps_text": "We will use the formula in the picture. my value for uncertainty was 1.30.", "step_imgs": ["https://cdn.instructables.com/F85/VB2O/HUBWNVJI/F85VB2OHUBWNVJI.LARGE.jpg"], "step_title": "Step 14: Calculating Uncertainty"}, {"step": 15, "steps_text": "We will use the formula in the picture . so my measurement would have been 181\u00b11.30.", "step_imgs": ["https://cdn.instructables.com/F8Z/CUYJ/HUBWNWHK/F8ZCUYJHUBWNWHK.LARGE.jpg"], "step_title": "Step 15: Putting It All Together"}], "channel": "Tools"}, {"category": "technology", "description": "Background and PurposeSome weeks ago a friend broke her forearm: she was on a bus whose driver violently pulled the brakes, and she fell down. This reminded me of the few times in which I had to (politely) remind the bus driver that he was not suppossed to transport cattle. So, I decided to investigate a bit on the quality of public transport driving and, finally, went to make my own accelerometer data logger, and to put it into use.There are plenty of webpages on DIY data loggers and accelerometers; also lots of information on data analysis; and also even some pages on bus driving quality. This Instructable, though, is not just another \"howto do your own accelerologger\", at least because I have not seen any one which covers the design, make, use and analysis, all in one. So this is it: A to Z for making and using an accelerologger.There are also apps for smart-phones and tablets which read the device's sensors and which too can save the records - but how would one learn in this way? And what's the fun compared to doing it by yourself? But no offence if you prefer the app! :-)LevelThe level of this Instructable is intermediate: at one end, for instance, I will almost not comment the Arduino code as I assume that you are already reasonably familiar with it; and at the other end I will not enter, say, into the mathematical details of data filtering or time frequency analysis. ", "title": "ACCELEROMETER & LOGGER + MAKE & USE", "url": "https://www.instructables.com/id/ACCELEROMETER-LOGGER-MAKE-USE/", "section": "technology", "steps": [{"step": 1, "steps_text": "What is Required?The list of materials for this accelerologger is as follows:1 Arduino Pro (5V, 16Hz)            1 module GY521 (with accelerometer and gyroscope MPU6050)            1 SD breakout board (and, yes, the memory card)            1 4-DIP switch            1 2-pin screw terminal            1 LED + 330 ohm resistor (I later added a second LED).            2 capacitor (100 nf)            1 perf board (5*7 mm, 2.5 mm pin spacing)            1 battery holder (4 LR6/AA, included please)            Pin headers and flexible wires (plain, pinned female)            Welding gear, plywood, glue, tools.Of course there are miriads of possible variations. In general, I have used what I already had in hand, and here I include few lines on my choices:I really, really, like the Arduino Pro: small, cheap, reliable, easy to use, tough and powerful. Still, it is a too big horse for this project, but it is the smallest that I have!            SD board/card: I'd rather use a microSD board/card, but the large one is what was available in my box, so... There are references of bad experiences with powering the board at 5 V (not the +5 V VCC pin, but the data transfer pins). I can only say that mine works OK at 5 V, so far.            The accelero/gyro GY521/MPU6050 seems to be a usual choice, so no regret on this regard. I am surprised by the amount of noise and requirements for calibration (see below), but I cannot compare to other accelero/gyros. I wonder if the analog units are better on this aspect.            LR6/AA batteries. The package required to reach the 6 V for the Arduino Pro is \"large\", and the first alternative is the 9V 6LR61/6AM6 \"rectangular\" battery. However, sometime ago I read that the energy density or delivered power of the 6LR61 is very low compared to the LR6, so I am not using them anymore. Also, it is very easy to find rechargeable R6/AA batteries. Finally I thought of LiPo batteries, but did not further develop (for no real particular reason).            I like welding (though I'm not that good), so, for me, welded PCBs are a good enough solution for relatively simple circuits. I also considered etching a printed circuit, but, apparently, some parts were missing in Fritzing and I preferered not to create them with their real dimensions etc. Finally, I definitely use headers for the main parts, so that after I'm tired of my circuit (or, ehem, it does not work) I can easily recover the main parts. (I know that this is probably a cause of faulty connections, but I take the risk).How Much does it Cost? Total cost, roughly (from where I normally buy, www.dhgate.com):Arduino Pro: 3.5 USD    GY521: 4.5 USD     SD board and card: 9 USD     Total: approx. 25-30 USD", "step_imgs": ["https://cdn.instructables.com/FSZ/VEWX/I95GPDBW/FSZVEWXI95GPDBW.LARGE.jpg"], "step_title": "Step 1: BOM"}, {"step": 2, "steps_text": "The Fritzing schematics are in a picture; the original file is uploaded here: Kindly note that some parts in the scheme are not exactly what I have actually used (namely the accelero/gyro board and the SD board): I have added some remark notes in order to provide further clarity on the wiring.Attached are also some pictures of the making process, from the protoboard to the final result.Two final notes regarding possible \"mistakes\":There are two capacitors, aimed at stabilizing the supply, although probably there should only be one, if any. Still, one is on the \"upstream Arduino\" side, and the other on the \"downstream\" part.        The Arduino Pro Mini board description mentions that \"If you're supplying unregulated power to the board, be sure to connect to the \"RAW\" pin on not VCC.\" The supply to the Pro is done on the VCC connection, either from the PC, through the USB adaptor, or through a battery - hope both are regulated enough! :-)", "step_imgs": ["https://cdn.instructables.com/FO1/R9LB/I95GPEYG/FO1R9LBI95GPEYG.LARGE.jpg", "https://cdn.instructables.com/FM2/8QFT/I95GPFSZ/FM28QFTI95GPFSZ.LARGE.jpg", "https://cdn.instructables.com/F23/KAT7/I95GPDE3/F23KAT7I95GPDE3.LARGE.jpg", "https://cdn.instructables.com/FLB/X0DV/I95GPDJ0/FLBX0DVI95GPDJ0.LARGE.jpg", "https://cdn.instructables.com/FON/H8PI/I95GPDBV/FONH8PII95GPDBV.LARGE.jpg", "https://cdn.instructables.com/F2H/9Y2A/I9OSS467/F2H9Y2AI9OSS467.LARGE.jpg"], "step_title": "Step 2: Build It - Hardware"}, {"step": 3, "steps_text": "Sketch UsedThe accelerologger runs with Arduino, and the code/sketch can be found here.Few comments on the general parts of the code:The 3 DIP switches which are coded (#2-4) are pulled-up with the pins' internal resistors. The action of the switches are:      DIP02: continuous reading. If the switch is off (pin high) the duration of the reading is defined by TimeR (time of reading), whose value is defined within the code. If the switch is on (pin low) the data reading and writing goes uninterrupted (actually there is a code line where this can be limited, by default I have set 2 hours).      DIP03: interrupts the reading. If the switch is off (pin high) the reading goes as specified by DIP02. If the switch is on (pin low) the reading & writing step is bypassed, but the timers are not stopped. This allows for a clean halt of the reading in case of need.      DIP04: calibration. If the switch is off (pin high) there is a calibration phase at setup. If the switch is on (pin low) the calibration step is bypassed.The DIP switch which is not coded (#1) powers the Arduino Pro from the batteries. Here the off position means switch disconnected (no-power).      The calibration function simply reads data and writes it to the SD card during a time defined within the code (TimeC). There is no use within the code of the calibration results, the purpose is just to gather information at a controlled stage. What use should be provided to this information is a matter of postprocessing (see next Step).      The data reading and writing frequency can be specified in the code (name of variable: frequency, in Hz). In order to adjust the timing an input is required: the average time of reading and writing (TimeDRW), which in my experience is 20-25 ms. The resulting frequency is not exact, just good enough for my purposes.      The yellow LED is on when things go OK (reading and writing), blinks slowly during preparation (setup) and completion of the data reading&writing. If there is a problem with the data (the x component of acceleration is -1 or 0), the red LED blinks for a short time; if the problem is related to the SD card, the red LED stays on. When there is a SD-related difficulty or the task has been completed the sketch enters a repose mode (infinite void loop) after informing with the corresponding blinking. MPU6050 and SoftwareRegarding the MPU6050:The communication with the board is done through the I2C protocol.       I have used the code prepared byJohn Chi at http://playground.arduino.cc/Main/MPU-6050.   Jeff Rowberg has extensively worked on libraries and code for this device (see https://github.com/jrowberg/i2cdevlib and  http://www.i2cdevlib.com), but for my purposes I found that Chi's approach was good enough through the Wire library.     The raw data read by the MPU6050 is in local coordinates. If global coordinates are required, the MPU6050 has an additional processor (DMP, Digital Motion Processor) which can provide the required calculations. This DMP also has error minimization capabilities. Access to the DMP results can be achieved through the libraries written by Jeff Rowberg.", "step_imgs": ["https://cdn.instructables.com/FJV/0RYE/I9OSS0XC/FJV0RYEI9OSS0XC.LARGE.jpg", "https://cdn.instructables.com/FYR/0Y8C/I9OSS0XT/FYR0Y8CI9OSS0XT.LARGE.jpg"], "step_title": "Step 3: Build It - Software"}, {"step": 4, "steps_text": "Why Do We Need to Calibrate? Isn't the sensor already calibrated from the factory? These are ten consecutive readings (accelerations followed by angular velocities; x, y,z in both cases) with the GY521 in standstill, vertical position (axis +X upwards): 17088 208 -1048     5    -1   -216        17028 308 -1320     4     3   -250        16988 360 -1212     7     3   -236        16876 376 -1032  -13  -36   -218        16972 244 -1348  -13  -25   -226        17060 316 -1156    -2   -11   -224        16948 328 -1300  -31      0   -224        17016 332 -1124      1    -1   -209        17088 348 -1088    -6   -27   -238        17072 284 -1104   -13  -24   -228If the device was really vertical, the readings for the accelerations should be (see below the reason):  (16384, 0, 0); and if the device was really still, the readings for the gyroscope should be: (0,0,0). So: the readings should all have been: [16384, 0, 0, 0, 0, 0]: what's wrong? Or, is actually anything wrong?Three things are probably happening: the device is still, at least with no noticeable movement, but it is likely not perfectly vertical,        there is signal noise, and this is probably the cause of the fluctuation in the instant readings,        the readings are raw, not calibrated, which is why they are \"deviated\", on average.So, let's go step by step.ADC of the MPU6050The MPU6050 has an integrated ADC (Analog-to-Digital Converter) which outputs each channel (acceleration and angular velocities, each in x, y, z) in 16 bits. Therefore 2^16 different results are possible: 0 to 65535, or -32768 to +32767.  This range of readings is mapped in the standard configuration to +-2g in accelerations, and +-250 deg/s in angular velocities. Then 1 g corresponds to 16384 LSB (Less Signifficant Bit, or digital raw units of reading), and 1 deg/s corresponds to 131 LSB.Both ranges can be changed in the configuration settings via software through Jeff Rowberg's code (see previous Step). The possibilities are: Acceleration ranges: +- 2g, 4g, 8g, 16g        Gyroscopes ranges: +- 250, 500, 1000, 2000 deg/s.Note that because of the ADC's 16 bit constraint, extending the ranges of measurements decreases the sensitivities: the +-4g range mapped into a reading range of (-32768,+32767) gives 8192 LSB/g.So, the raw readings can be converted into \"physical\" units with the known sensitivities are: 1,042969 0,012695 -0,063965  0,038168 -0,007634 -1,648855        1,039307 0,018799 -0,080566  0,030534  0,022901 -1,908397        1,036865 0,021973 -0,073975  0,053435  0,022901 -1,801527        1,030029 0,022949 -0,062988 -0,099237 -0,274809 -1,664122        1,035889 0,014893 -0,082275 -0,099237 -0,190840 -1,725191        1,041260 0,019287 -0,070557 -0,015267 -0,083969 -1,709924        1,034424 0,020020 -0,079346 -0,236641  0,000000 -1,709924        1,038574 0,020264 -0,068604  0,007634 -0,007634 -1,595420        1,042969 0,021240 -0,066406 -0,045802 -0,206107 -1,816794        1,041992 0,017334 -0,067383 -0,099237 -0,183206 -1,740458        Units: g and deg/sGood, but ... what's the real result?  How many decimals can be properly used? I have selected 6 decimals, but why not 10?Manipulation of NumbersWhat we can say is that with a 95% confidence level (based on all the records of the calibration, not just the 10 shown here) the averages can be calculated with statistical tools and consideration of the rules of significant figures. See here the spreadsheet, whose results are: Ax = 17002 +- 5 LBS <->  1.038 +- 0.000 g       Ay =   328 +- 4 LBS <->  0.020 +- 0.000 g       Az = -1170 +- 6 LBS <-> -0.071 +- 0.000 g       Gx =  -1.9 +- 0.7 LBS <-> -0.014 +- 0.005 \u00ba/s       Gy =   0.6 +- 1.1 LBS <->  0.004 +- 0.008 \u00ba/s       Gz =  -227 +- 1 LBS <-> -1.730 +- 0.007 \u00ba/sClearly, just by looking at the results: the acceleration readings seem to be \"reliable\", and Gy is not.  But even these \"statistically corrected\" averages are still not what one would expect! Acceleration should be 1.000; and, in addition, one wonders why the average of Gz is so high if the device was not moving.So, enter calibration - at last!Calibration (of the Accelerometer)First remark: calibration is not intended to correct the results of a faulty sensor. If from the previous results we feel that sensor Gz is likely broken or miss-connected, then there is probably no calibration which can fix it.Second remark: a calibration compares readings, or readings with assumptions. Extrapolation beyond those readings requires care.The MPU6050 displays a theoretical linear relationship between the measured accelerations or angular velocities and the output. (The product specification datasheet mentions a \"nonlinearity\" of 0.5% and 0.2%, respectively; \"cross-axis sensitivity\", the amount of change introduced in one axis by the application of acceleration or angular speed on another axis, is 2%).Then,it might be possible to apply corrections to the converting equations. In the previous case, for the accelerations the correction of the gain error leads to: Ax(g) = (Ax(LBS)      )/(16384 + 618)Offset deviations might be also corrected: Ay(g) = (Ay(LBS) - 328)/(16384- 328)        Az(g) = (Az(LBS) +1170)/(16384+1170)This offsetting procedure could be correct IF we are sure that the accelerometer was really vertical (+X up) when the calibrating measures were taken - otherwise it is not correct. It may be that the error thus introduced is small, but it is nonetheless not correct. And, unfortunately, it is difficult to be sure of the accuracy of the verticality with which the MPU6050 is placed during the calibration.One alternative calibration procedure (the \"six positions test\") would be to read six times the acceleration results, with the device still. On each of these instances the sensor would be turned so that every time a different axis is on the \"vertical\" (+-x/y/z). The readings on each position for all axis provides enough information for a detailed calibration.A simple description of this procedure can be found here; more precise info here; more serious here.Regardless of the position of the sensor, if it is not moving, then the norm or modulus of the vector acceleration should be 1 g (or whichever is the gravity acceleration in your location). This can also be used for calibration purposes in any position of the sensor.Calibration (of the Accelerometer) other than with GTwo simple additional calibration tests seem possible, although I have not developed them:Free fall: An accelerometer in free fall should read (0,0,0), regardless of its spatial orientation. It will probably be difficult to collect enough data before applying an arrestor (from my 7th floor it will take the tester barely more than 2 seconds to reach the street).     Pendulum: A pendulum on whose bob is the GY521 would measure accelerations and angular velocities which are relatively easy to calculate.Calibration (of the Gyroscope)The standard procedure used for the calibration of the accelerometer can be used for the offset control of the gyroscope, but it provides no clue about the gain error. If the gain error needs to be checked, I assume that a calibrated pendulum might be required.How Much Time for Warm-Up? And for Calibration?A chart is attached showing the readings logged as quickly as possible after powering up the Arduino. No warm-up period is apparent - or, if there is any, it seems that is very short and of no practical effect for my purposes.The question of how much time is required for calibration data reading can be converted into a statistical issue: how many samples are required from a general population to accurately estimate the average? The answer is: as many as required in order to provide stable results. There are explicit expressions for the number of samples, but, in general and when feasible, it is preferable to make as many assumptions on the population as possible. An attached chart shows the evolution of the estimation of Ax with the sampling size. After 10-15 seconds of readings the results are quite stable, and my recommendation would be to read for 20-25 s at a frequency rate of at least 25 Hz.", "step_imgs": ["https://cdn.instructables.com/FLC/DGSH/I98BK7T8/FLCDGSHI98BK7T8.LARGE.jpg", "https://cdn.instructables.com/F6V/VMYY/I98BK7T9/F6VVMYYI98BK7T9.LARGE.jpg", "https://cdn.instructables.com/FQ5/L91R/I96W6NWH/FQ5L91RI96W6NWH.LARGE.jpg", "https://cdn.instructables.com/FUZ/F098/I9GWATAE/FUZF098I9GWATAE.LARGE.gif"], "step_title": "Step 4: Use It - Calibration"}, {"step": 5, "steps_text": "Onboard!So, get on board the bus and fix the accelerologger!Precautionary remarks, though:A bus is a complex dynamic element: not all its parts are moving equally or simultaneously. Of course, the bus as a unit is moving, and with it all its constituents (including passengers). But in addition to this solidary movement there are different behaviors which are reflected in the kinematics of the components. Front and rear, left and right, low and high; frame, seats, windows, doors, handrails: all have different movements.     Therefore, what the accelerologger will record is the acceleration and angular velocities of the ... MPU6050 (or so we hope!). How much does this differ from the conditions of another element of the bus to which the accelerologger may be attached is dependent on the dynamics of the element as well as on the attachment conditions and the dimentions/weight/etc of the accelerologger. A rigid connection is likely to introduce little distortion, while a floffy link can be expected to create quite different performances.     The bus is not yours. It may be a good approach to request permission from the transportation Company, or at least inform the driver of your purpose.      If some of the travellers do not like the appearance and lights of the logger ... try politely to calm them! But before you come up the bus with your nice device...", "step_imgs": ["https://cdn.instructables.com/FP1/LCNM/I96W6OP0/FP1LCNMI96W6OP0.LARGE.jpg", "https://cdn.instructables.com/F3W/9FTC/I96W6O0E/F3W9FTCI96W6O0E.LARGE.jpg", "https://cdn.instructables.com/F2S/2FSG/I9GWAWQU/F2S2FSGI9GWAWQU.LARGE.jpg", "https://cdn.instructables.com/F2G/J8NW/I9GWAWQW/F2GJ8NWI9GWAWQW.LARGE.jpg"], "step_title": "Step 5: Use It - Get on the Bus!"}, {"step": 6, "steps_text": "The data reading  frequency, or sampling rate, can be set at the sketch (see a previous  Step), but which sampling rate is best? The answer is easy: as low as  you really need, or just a bit more to be safe. If you read too often,  you will likely get noise and tons of data which you may not know how  to use. OK then: what is the lowest samping data that you need?  Well,  It depends on your requirements! Sorry for the vagueness, but it may be  easy to understand with an example. If you drive at 100 km/h and want  to spot a bumper or a pothole which are 0.5 m long, a sampling rate of  less than 56 Hz is likely not to detect it, while a sampling at 150 Hz  will get 3 readings on the obstacle.  Now: will these 3 readings  be enough to be clearly separated from the background noise? Here I can  also not provide other answer that: \"Test it!\". (The theory says that if the sampling is done at a rate at least twice the maximum frequency included within the signal, then it is possible to recover the initial signal. Still an obstacle, though: it is not obvious which is the frequency of the signal in the example of the pothole, so tests seem to be necessary in any case. A numerical guidance to the pothole case: if there is a main frequency event once the car's wheel is, say, 5 cm off the pothole edge, then a sampling frequency of 1.1 kHz would be required).Nevertheless, some information that I have gathered on actual sampling rates: Normal personal activities: 2-10 Hz (for measurements on the body trunk).     Bus accelerations for driving quality measurements: 20-50 Hz (in some cases 1 kHz are mentioned...)Finally: remember that the maximum sampling  rate in my sketch is limited by the time required for reading and  writing, which in my case is about 20-25 ms per cycle. Therefore the  maximum sampling rate of my accelerologger is approx. 40-50 Hz. As a reference: the sample rate of the MPU6050 is 1 kHz for the accelerometer and 8 kHz for the gyroscope. On the interface: with a frequency of 400 kHz for the I2C, the maximum nominal transfer data rate is 2.6 kHz (17 bytes (accelerometer + temperature + gyroscope) at 9 (8+1) clock tics per byte). And at the other end, the transfer rate on the SD is (???).Although I have not digged on the subject, I assume that the relatively low sampling rate of this accelerologer is related to two of its features:(I think) I'm not using the asyncronous data transfer that the MPU6050 allows. Access to a FIFO buffer on the MPU can be managed through Jeff Rowberg's code.  The data storage is done opening and closing the storage file every time data is received from the MPU, which is likely a very slow process. This should be a quite easy task if a larger sampling rate is needed.", "step_imgs": ["https://cdn.instructables.com/FLA/DYJ9/I9OSS61J/FLADYJ9I9OSS61J.LARGE.jpg"], "step_title": "Step 6: What Sampling Frequency?"}, {"step": 7, "steps_text": "A Standard: EN 13816The standard EN 13816-2003 Transportation. Logistics and services is the basis in the EU for defining and measuring the quality  capability of transport providers in public passenger traffic services.The quality of the service is evaluated in different domains, and the standard includes the following ones (informative, not mandatory):Offered Service     Accesibility     Information     Regularity and Punctuality     Customer Service     Comfort   Security     Environmental ImpactWithin level 6, item 6.3 Passenger Comfort the standard includes:6.3.1 Driving     6.3.2 Start/stop     6.3.3 External factorsThe public transport company of my town is EN13816 certified. Interestingly, the policy (see here) does not mention anything related to the driving style or behavior, the  smoothness/recklessness driving as an element of the perceived quality. Or, as mentioned in other traffic quality management cases: \"driver operation of the bus in a safe and competent manner\", or \"operation of the bus in a manner so as to provide a smooth ride\".As a side comment: I think that my town's bus company is doing reasonably well - nevertheless, I also believe that driving quality can be signifficantly improved, and that this will increasingly become a must with a quickly ageing customer base. (See this for some information on people's accidents on buses).Reccommended AccelerationsThere does not seem to be a general agreement on appropriate accelerations on public ground transport systems. However, what I have been able to gather can be summarized as follows:Steady non-emergency longitudinal accelerations in the range 0.10 g to 0.15 g are acceptable in most cases.   If the passengers are properly seated, the tolerable for-and-aft acceleration levels can be higher, up to 0.20 g, as in a commercial jet  take off with usual average acceleration in the range of 0.25 g for a take-off velocity of  approx. 250 km/h (peaks can reach 0.5 g). As a reference: a VW Golf GTI  can reach 100 km/h in 7 seconds, or an average acceleration of 0.4 g.For for-and-aft decelerations in normal conditions, accepted values seem to be in a similar range of 0.10-0.15 g, with emergency brake levels of up to 0.3 g. Again, the standard car can brake at 0.6 g. (100 km/h require an actual braking distance of approx. 90 m - add to it, please, 60 m for perception and reaction).The previous figures are in line with the usual standards used in the design of roads: acceleration levels of 0.10-0.15 g in a longitudinal direction are considered manageable, and decelerations of 0.15 g as comfortable, as felt by standing bus passengers.   Upsetting acceleration values are related to jerk (acceleration rate change). Standing passengers have difficulties in maintaining their balance when the jerk is higher than 0.06 g/s. Values of longitudinal jerk larger than 0.30 g/s would seldom be acceptable for most public transportation.For transversal accelerations, values as low as 0.05 g are mentioned as threshold which cause losing balance in unsupported passengers.", "step_imgs": ["https://cdn.instructables.com/FO4/W3F8/I9QWEEW7/FO4W3F8I9QWEEW7.LARGE.jpg"], "step_title": "Step 7: Public Transport Driving Quality"}, {"step": 8, "steps_text": "Attached are images of the bus line that I have selected. Main features:Length: 8.6 km.   Difference in elevation: approx. 10 m (there is one tunnel under the railtracks, otherwise it's rather flat).   Circular, driven clockwise.   Main bends: the track has 10 main bends (see map for identification), most of which are clockwise, and sharp.   Number of stops: 28 (see map for identification).   (It has a stop in front of home...). Average speed: approx. 12-14 km/h.A chart is also included showing the bearing of the track, with labels to main geographical landmarks.Linked files for consultation:GPS coordinates (kmz file).   Path breakdown analysis (spreadsheet).", "step_imgs": ["https://cdn.instructables.com/FSS/6DTP/I9O1GZVO/FSS6DTPI9O1GZVO.LARGE.jpg", "https://cdn.instructables.com/FYW/QC31/I9O1GZRO/FYWQC31I9O1GZRO.LARGE.jpg", "https://cdn.instructables.com/FWB/45K7/I9PH080Q/FWB45K7I9PH080Q.LARGE.jpg"], "step_title": "Step 8: The Bus Line That I Have Evaluated"}, {"step": 9, "steps_text": "Raw DataAttached are some charts with the raw data (figs. 1, 2 & 3; Ax, Gz and Ay) - the spreadsheet is here. Interpretation clues:Units, in all cases:  X: time, in seconds.  Y: acceleration or angular velocity, in LSB.The GY521 was placed with the axis +Z upwards, and the axis +X forward - because of this and the bus movement I have focused only on Ax and Gz (and checked Ay).   Ax>0 means acceleration, Gz>0 means turn to the left.  The time in the raw data records is in milliseconds. It can be converted into standard CET by adding 12:21:48 h:mm:ss (of the day 14.may.2015).  A log of the trip is attached here.The raw data seem quite noisy and confusing: after all, are they really worthy? Is there any valuable, clear reading?Mapping of the Raw Data to the Bus Track Fig. 4 shows the position of the main curves of the route followed by the bus on the Gz raw data chart.The results match not only because they are visually appealing, but because the times recorded on the manual log of the trip closely correspond to those recorded by the accelerologger.From time 180-480 seconds the bus was stopped, with the engine on, waiting to  adjust the turn-around time (the same happened from 1430 to 1560 s). Fig. 5 shows the corresponding Gz records, whose average for that period is -230 LBS. Refer to the offset error for Gz in the Calibration step. Fig. 6 is the result after applying to the previous data a moving average of approx 0.2 seconds (6 consecutive records).Figures 7 & 8 are zooms on bends A-B: the first one with the raw data and a cut-off level of +- 400 LBS, and the second after applying the moving average described above and the offset corrected. The rough integration of Gz along the period corresponding to the curve A yields a result of -10870 LBS, or 82.9\u00ba for the standard sensitivity of the gyroscope. The difference in geographical bearing for curve A is 83.2\u00ba, as per the quick calculations performed on the klm file (see also a chart in previus Step). This seems a quite reasonable comparison for a rather unsophisticated calculation.The analysis of the Ax data also provides worthy data, although somehow tougher to analize. From 480 to 700 seconds the manual log reports:481: depart from stop P348539: arrival to stop P349548: depart from stop P349563: traffic light stop599: depart traffic stop632: traffic light stop645: depart traffic stop662: arrival to stop P351Figures 9 & 10 show the corresponding records, the first one unfiltered, and the second as a moving average with the same parameters as for Gz above. Finally, figure 11 shows the detail from 520 to 570 seconds, where the effects of the automatic gear changes can be appreciated both in acceleration and deceleration. The results are not as clear as for the Gz case, but still the elements of the trip can be identified.Regarding Ay, fig. 12 shows the moving average for time 830-870 seconds, corresponding to curve A. The average velocity in this curve is estimated from the records as 2.4 m/s (8.6 km/h). The average angular velocity from the gyroscope readings is approx. 8.9 deg/s. The average radius of the curve is therefore 15.5 m (r=v/w). This is a reasonable figure for a relatively closed bend and a bus. The centrifugal acceleration is therefore 0.4 m/s2 (a = v\u00b2/r = w\u00b2*r), or 6127 LSB. This, however, is not precisely matching the readings of Ay, with peaks of 4000 LSB.Finally, the records show accelerations (fore-and-aft as well as transversal) which are far exceeding the recommended values for a confortable trip: at curves, brakes for stops/traffic lights  and also at shifting gears. This confirms my experience on a bus.Next Stops?Put a bit more of data filtering (especially on accelerations).Cross check values of accelerations.", "step_imgs": ["https://cdn.instructables.com/FB3/LKUI/I9QWDJPJ/FB3LKUII9QWDJPJ.LARGE.jpg", "https://cdn.instructables.com/FXP/10IR/I9QWDJUR/FXP10IRI9QWDJUR.LARGE.jpg", "https://cdn.instructables.com/FM4/139A/I9QWDJOM/FM4139AI9QWDJOM.LARGE.jpg", "https://cdn.instructables.com/FDM/2SGZ/I9QWDJOP/FDM2SGZI9QWDJOP.LARGE.jpg", "https://cdn.instructables.com/FC3/3EMG/I9QWDJOR/FC33EMGI9QWDJOR.LARGE.jpg", "https://cdn.instructables.com/FQW/TF74/I9QWDJRF/FQWTF74I9QWDJRF.LARGE.jpg", "https://cdn.instructables.com/FQN/FXIH/I9QWDJS2/FQNFXIHI9QWDJS2.LARGE.jpg", "https://cdn.instructables.com/FDM/F0W7/I9QWDJTD/FDMF0W7I9QWDJTD.LARGE.jpg", "https://cdn.instructables.com/F81/B78F/I9QWDJU0/F81B78FI9QWDJU0.LARGE.jpg", "https://cdn.instructables.com/F0C/7KKG/I9QWDJU1/F0C7KKGI9QWDJU1.LARGE.jpg", "https://cdn.instructables.com/F87/3NFK/I9QWDJVH/F873NFKI9QWDJVH.LARGE.jpg", "https://cdn.instructables.com/FMM/1A4U/I9QWDJW4/FMM1A4UI9QWDJW4.LARGE.jpg"], "step_title": "Step 9: Results!!!"}], "channel": "Arduino"}, {"category": "technology", "description": "A quick and easy way to see (and then save) data taken using an Arduino onto your computer. (Note: not the most robust method, but it works well enough) Materials: - \u00a0Arduino (I\u2019m using an Uno) - \u00a0Computer (I have a Dell, but it shouldn\u2019t really matter if you are running Windows. Otherwise, you\u2019ll need to make some minor edits to the Python code.) - \u00a0Python, including the matplotlib, pyserial, and numpy extensions \u00a0 \u00a0 \u00a0 http://matplotlib.org/downloads.html (matplotlib) \u00a0 \u00a0 \u00a0 https://pypi.python.org/pypi/pyserial (pyserial) \u00a0 \u00a0 \u00a0 http://www.scipy.org/scipylib/download.html (numpy) - Some sort of sensor/input device (I\u2019m using an ADXL335 accelerometer) - Wires/breadboard", "title": "Using an Arduino and Python to Plot/save Data", "url": "https://www.instructables.com/id/Using-an-Arduino-and-Python-to-plotsave-data/", "section": "technology", "steps": [{"step": 1, "steps_text": "This accelerometer is extremely simple to use. It is powered off of 5VDC and each output pin (X, Y, Z) gives an analog voltage from 0-3V depending on the measured acceleration. To power it, simply connect the 5V output pin and one of the GND pins of the Arduino to the Vin pin and GND pin on the accelerometer. The X, Y, and Z pins go to any three of the analog input pins on the Arduino (I used A1, A2, and A3). You can leave the setup like this, but the analog pins on the Arduino range from 0-5V, while the accelerometer ranges from 0-3V. This means that you will only be using about half of the range of possible analog values and will have less precision in your measurements. Ideally, the ranges would be the same so the full range of analog values is available. The Arduino range can be changed by connecting a new reference voltage to the AREF pin and signifying in the code that the analog reference is external (see step 2). I didn't care too much about precision, so I just used the 3.3V output on the Arduino as my reference voltage, but the 3V output on the accelerometer should work as well.", "step_imgs": ["https://cdn.instructables.com/FF2/P8DI/HSVGHMN1/FF2P8DIHSVGHMN1.LARGE.jpg"], "step_title": "Step 1: Wiring the Circuit"}, {"step": 2, "steps_text": "The Arduino simply reads in the values on all three analog pins and sends them over serial to the computer. Tabs are added between the data to make it easier to read on the computer side. The only setup required (other than declaring variables) is to create the serial connection at a baud rate of 9600 and declare the analog reference to be external, as mentioned earlier. {{{ /* This code reads in values on analog pins A1-A3 and sends the values over serial. The outputs can be checked using the serial monitor. created 03/18/14 */ const int xpin = A3;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // x-axis const int ypin = A2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // y-axis const int zpin = A1;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // z-axis void setup() { \u00a0 Serial.begin(9600);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //setup serial connection \u00a0 analogReference(EXTERNAL);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //set external reference point for analog pins } void loop() { \u00a0 Serial.print(analogRead(xpin));\u00a0\u00a0\u00a0\u00a0 //read xpin and send value over serial \u00a0 Serial.print(\"\\t\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //send a \"tab\" over serial \u00a0 Serial.print(analogRead(ypin)); \u00a0 Serial.print(\"\\t\"); \u00a0 Serial.print(analogRead(zpin)); \u00a0 Serial.println();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //ends the line of serial communication \u00a0 \u00a0 delay(100); } }}}", "step_imgs": [], "step_title": "Step 2: Arduino Code"}, {"step": 3, "steps_text": "The Python code reads the incoming serial data, and separates each line along the tabs, giving you separate values for the X, Y, and Z data. Some processing is done to put the values into their own variables. To plot the variables, the \u201cmatplotlib\u201d library is used to create an animated graph. This results in a reasonably accurate \u201clive feed\u201d, but large amounts of sensor activity will cause the graph to lag a bit. Finally, the data is saved to a .txt file in a specified location. The data can then be read back when needed using the numpy.loadtxt() function (see next step for code). However, this file type is most easily read in Python, so if you want to open the data in a different program you\u2019ll need to use a different write function. (ex. Use .csv file format to open data in Excel) Don't forget to change the file location to match your computer's directory. See the code for more detailed comments (or Google or ask and I\u2019ll do my best to explain or point you to an explanation) {{{ ''' Reads in data over a serial connection and plots the results live. Before closing, the data is saved to a .txt file. ''' import serial import matplotlib.pyplot as plt import numpy as np import win32com.client connected = False #finds COM port that the Arduino is on (assumes only one Arduino is connected) wmi = win32com.client.GetObject(\"winmgmts:\") for port in wmi.InstancesOf(\"Win32_SerialPort\"): \u00a0\u00a0\u00a0 #print port.Name #port.DeviceID, port.Name \u00a0\u00a0\u00a0 if \"Arduino\" in port.Name: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 comPort = port.DeviceID \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 print comPort, \"is Arduino\" ser = serial.Serial(comPort, 9600) #sets up serial connection (make sure baud rate is correct - matches Arduino) while not connected: \u00a0\u00a0\u00a0 serin = ser.read() \u00a0\u00a0\u00a0 connected = True plt.ion()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 #sets plot to animation mode length = 500\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 #determines length of data taking session (in data points) x = [0]*length\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 #create empty variable of length of test y = [0]*length z = [0]*length xline, = plt.plot(x)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 #sets up future lines to be modified yline, = plt.plot(y) zline, = plt.plot(z) plt.ylim(400,700) \u00a0 \u00a0 \u00a0 \u00a0#sets the y axis limits for i in range(length):\u00a0\u00a0\u00a0\u00a0 #while you are taking data \u00a0\u00a0\u00a0 data = ser.readline()\u00a0\u00a0\u00a0 #reads until it gets a carriage return. MAKE SURE THERE IS A CARRIAGE RETURN OR IT READS FOREVER \u00a0\u00a0\u00a0 sep = data.split()\u00a0\u00a0\u00a0\u00a0\u00a0 #splits string into a list at the tabs \u00a0\u00a0\u00a0 #print sep \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 x.append(int(sep[0]))\u00a0\u00a0 #add new value as int to current list \u00a0\u00a0\u00a0 y.append(int(sep[1])) \u00a0\u00a0\u00a0 z.append(int(sep[2])) \u00a0\u00a0 \u00a0\u00a0\u00a0 del x[0] \u00a0\u00a0\u00a0 del y[0] \u00a0\u00a0\u00a0 del z[0] \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 xline.set_xdata(np.arange(len(x))) #sets xdata to new list length \u00a0\u00a0\u00a0 yline.set_xdata(np.arange(len(y))) \u00a0\u00a0\u00a0 zline.set_xdata(np.arange(len(z))) \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 xline.set_ydata(x)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 #sets ydata to new list \u00a0\u00a0\u00a0 yline.set_ydata(y) \u00a0\u00a0\u00a0 zline.set_ydata(z) \u00a0 \u00a0\u00a0\u00a0 plt.pause(0.001)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 #in seconds \u00a0\u00a0\u00a0 plt.draw()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 #draws new plot rows = zip(x, y, z)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 #combines lists together row_arr = np.array(rows)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 #creates array from list np.savetxt(\"C:\\\\Users\\\\mel\\\\Documents\\\\Instructables\\\\test_radio2.txt\", row_arr) #save data in file (load w/np.loadtxt()) ser.close() #closes serial connection (very important to do this! if you have an error partway through the code, type this into the cmd line to close the connection) }}}", "step_imgs": [], "step_title": "Step 3: Python Code"}, {"step": 4, "steps_text": "This is just the most basic plot - you can easily add axes labels, legend, etc. using matplotlib (just Google for it). I simply rotated the X axis to +/-1g for this test. When it's running, the plot will update constantly to show live movement.", "step_imgs": ["https://cdn.instructables.com/F22/U68Z/HSVGHM6E/F22U68ZHSVGHM6E.LARGE.jpg"], "step_title": "Step 4: Results"}, {"step": 5, "steps_text": "To read back the data saved with numpy.savetxt(), you use numpy.loadtxt() and assign it to a variable. The variable can then be manipulated and re-plotted (in my case, I have the \"markers\" option set so I can see the individual data points). {{{ ''' Reads and plots data from a .txt file ''' import matplotlib.pyplot as plt import numpy as np #load values from file into \"data\" data = np.loadtxt(\"C:\\\\Users\\\\me\\\\Documents\\\\Instructables\\\\test.txt\") #create empty lists for data to be sorted into x = [] y = [] z = [] #for each line in data, sort it into the appropriate list for dat in data: \u00a0\u00a0\u00a0 x.append(dat[0]) \u00a0\u00a0\u00a0 y.append(dat[1]) \u00a0\u00a0\u00a0 z.append(dat[2]) #plot each list then show the plot\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 plt.plot(x, marker = 'o') plt.plot(y, marker = 'o') plt.plot(z, marker = 'o') plt.show() }}}", "step_imgs": ["https://cdn.instructables.com/F0M/W6NQ/HSVGHM6O/F0MW6NQHSVGHM6O.LARGE.jpg"], "step_title": "Step 5: Reading Back the Data"}], "channel": "Arduino"}, {"category": "technology", "description": "This Instructable is about the programming of an Atmega328 based Arduino. It concentrates on the various aspects of the programming. This Instructable is meant as a reference for anyone trying to program an own detector. This Instructable is not about how to build a metal detector. For this see my other Instructables (using these approaches)Why? There are many great micro controller metal detectors available designs available (GoldPic, SurfPi, FoxyPi, Teemo DIY, TPIMD, FelezJoo and the TechKiwiGadgets designs here on Instructables). They use various micro controllers giving in most cases some explanation about the design, but not digging too deep into the programming, as some of them were programmed in assembler. As I did try to port some of the designs to Arduino my focus was mainly on the programming itself. During many hours of programming and testing various designs of Arduino based metal detectors I came to the point where I had a nice running detector (not too sensitive but working)  and had a pretty decent code for the detector. But looking at the code, I realized there were so many tricks and ideas implemented over the time, that a combined Instructable about how to build the detector and how to program it would be way to complex. Especially if only looking for a detector to build nobody would dig too much into the code, the code itself being usable for many other designs as well. So I decided to create this Instructable about the programming itself. This Instructable will cover the various aspects of timing, signal analyzing, data processing, data output (e. g. LCD) and testing, using interrupts and fast analog reads.Detector typesThere are different types of metal detectors. The most common types are Beat Frequency Oscillation (BFO), Induction Balance (IB) and Pulse Induction (PI). BFO and IB types of detectors are using continuous oscillations, the PI type uses a single pulse and analyses what happens thereafter. So the PI type of detector gives some nice period of time after the pulse to acquire data, analyze them, do some filtering and sending data out to displays etc. That is the reason why the PI detector was my first choice to start with.In the first versions, the timing and data acquisition was done as part of the loop() routine, creating some trouble in regard to exact timing etc. Later on, all the timing stuff etc. was transplanted into Interrupt Service Routines (ISR) so basically running in the background with only some data crunching and output routines in the loop().From this point on, the approaches described here can be used for other detector designs as well The current description focuses on PI detectors, as these were the circuits available and therefor could be tested in real life. Other designs like IB and BFO-ish will be tried out and documented at a later point of time.For the PI detectors two basic designs were used:the usual decay curve design (in my case without an additional OpAmp)the LC trap design, where the main pulse triggers a series of decaying oscillationsI did some separate Instructables about both designs which will be updated with the described approaches.", "title": "How to Program an Arduino Based Metal Detector", "url": "https://www.instructables.com/id/How-to-Program-an-Arduino-Based-Metal-Detector/", "section": "technology", "steps": [{"step": 1, "steps_text": "General thoughtsThe basic principal of a metal detector is, that the inductance / signal in a coil changes as a target comes near to the coil. The usual ways of identifying these changes is by measuring frequency shifts, decay times, change of voltage at a selected point(s) of time etc. Based on the capabilities of the ATmega328 based Arduinos these inputs can be measured by analog reads, digital reads or triggering external interrupts.This Instructable will cover these inputs.To get a sensitive detector, unfortunately the inputs will need to be measured quite fast. The ATmega running at 16MHz seems to be running fast, still in many cases this is too slow to use standard Arduino based routines. Various approaches \u201eoutside\u201c the standard Arduino routines will be given here to provide as much speed as possibleTiming, timing, timing\u2026..The crucial element of coil based metal detectors is the timing. Usually the signals are fast, so small errors in timing will lead to false readings making it difficult to obtain stable readings.The standard features for timing for the Arduino are routines like millis(), micros(), delay() and delaymicroseconds(). For most applications these routines work fine, for metal detector designs they do not perform that well.The resolution of millis() is 4\u00b5S according the reference. At the other hand, when looking at the oscillation frequency of the Arduino the delay between two pulses at 16MHz is 0,0625\u00b5S, which is 64 times the resolution. To obtain access to this 16MHz frequency for timing purpose, the most convenient way is to use the ATmega internal timers. There are in total three timers (timer0, timer1 and timer2). The timers can be set to be running at full 16MHz or lower frequencies by prescalers (dividers). The timers have different mode to behave, but in the simplest mode they simply count from 0 to a given value, trigger an Interrupt Service Routine (ISR \u2013 a small routine) and restart counting. This mode of operation is called Clear Timer on Compare (CTC). During the counting of the timer, at any time of the program the counter value can be accessed and copied to a variable. This is true for most of the time the Arduino is running. Unfortunately not only the timers trigger interrupts but many other events trigger interrupts as well. Therefore interrupts may occur at similar times, of even during the execution of an ISR. As each interrupt delays the execution of the current code this leads again to small misreadings or even completely missed values. To brings some order into this the ATmega itself treat the interrupts with different priority.Vector \tAddr\tSource  Interrupts definition\n1\t0x0000\tRESET\tExternal Pin, Power-on Reset, Brown-out Reset and Watchdog System Reset\n2\t0x0002\tINT0\tExternal Interrupt Request 0\n3\t0x0004\tINT1\tExternal Interrupt Request 0\n4\t0x0006\tPCINT0\tPin Change Interrupt Request 0\n5\t0x0008\tPCINT1\tPin Change Interrupt Request 1\n6\t0x000A\tPCINT2\tPin Change Interrupt Request 2\n7\t0x000C\tWDT\tWatchdog Time-out Interrupt\n8\t0x000E\tTIMER2_COMPA\tTimer/Counter2 Compare Match A\n9\t0x0010\tTIMER2_COMPB\tTimer/Coutner2 Compare Match B\n10\t0x0012\tTIMER2_OVF\tTimer/Counter2 Overflow\n11\t0x0014\tTIMER1_CAPT\tTimer/Counter1 Capture Event\n12\t0x0016\tTIMER1_COMPA\tTimer/Counter1 Compare Match A\n13\t0x0018\tTIMER1_COMPB\tTimer/Coutner1 Compare Match B\n14\t0x001A\tTIMER1_OVF\tTimer/Counter1 Overflow\n15\t0x001C\tTIMER0_COMPA\tTimer/Counter0 Compare Match A\n16\t0x001E\tTIMER0_COMPB\tTimer/Coutner0 Compare Match B\n17\t0x0020\tTIMER0_OVF\tTimer/Counter0 Overflow\n18\t0x0022\tSPI STC\t\tSPI Serial Transfer Complete\n19\t0x0024\tUSART_RX\tUSART Rx Complete\n20\t0x0026\tUSART_UDRE\tUSART Data Register Empty\n21\t0x0028\tUSART_TX\tUSART Tx Complete\n22\t0x002A\tADC\t\tADC Conversion Complete\n23\t0x002C\tEE\t\tREADY EEPROM Ready\n24\t0x002E\tANALOG COMP\tAnalog Comparator\n25\t0x0030 \tTWI \t\t2-wire Serial Interface (I2C)\n26\t0x0032 \tSPM READY \tStore Program Memory ReadyThe goal in the programming of stable timing is therefor to use the highest prioritized interrupts as possible and to find ways of preventing other interrupts of occurring during the ISR. This leads to the first rule in dealing with interrupts: Keep the ISRs small! (.. I will be violating this rule on a regular basis\u2026).As the standard Arduino functions know about these timers as well, quite some of the routines and libraries are using them. This means, that if we are using the timers and changing their preset values, some of the standard routines do not work anymore. This needs to be kept in mind.Delay, tone, sensor, stepper, PWM functions as well as communications might not work properly anymore.", "step_imgs": [], "step_title": "Step 1: Basics - Timing, Timers, Interrupts..."}, {"step": 2, "steps_text": "There is a great Instructable about how to use timers. I used this Instructable a reference, will only give some abstracts here. In case you want to look deeper into the timers, see the Instructable \u201eArduino Timer Interrupts: 6 Steps (with Pictures)\u201c. The basic principle is, that first of all you tell the timer0, timer1 or timer2how fast it should run (prescaler in register TCCR0B, TCCR2B, TCCR2B)to what value should be counted (value in register OCR0A, OCR1A, OCR2A)what to do at this point (settings in TCCR0A, TCCR1A, TCCR2A -> reset and restart, trigger a PWM signal etc\u2026)set the counter to a given value to start with (value in TCNT0, TCNT1, TCNT2)enabling the relevant interrupts (setting in TIMSK0, TIMSK1, TIMSK2) \u2192 this will call the ISRThen you define the ISR with the interrupt vector name e. g. ISR(TIMER0_COMPA_vect) and define what should be done during this ISR. Again, this code should be kept short, as this code can be interrupted by other interrupts at any time, which will corrupt values or lead to a crash of the program.An additional portion of information is, that the timer0 and timer2 can count to 255, the timer1 can count to 65535. How to use timers for the metal detectorAs said previously, timing is crucial for metal detectors. So all the timing relevant stuff will be done by using timers.Usually, there is an initial pulse provided to a coil. After that the reaction of a coil (could be the same coil or a different coil) is measured. During this period of measuring ALL OTHER interrupts should be prevented! Interrupt during this time, will either lead to slightly off-values, corrupted values, missed values.I use the timers for 3 different purposes:timer0 for the main event (e. g. the pulse for a pulse induction detector)timer1 for data acquisition (e. g. frequency shift detection, timing of analog to digital conversion)timer2 for tone/volume generation.timer0The main cycle of a pulse induction (PI) detector consists of two phases. Fist there is the pulse to power the coil, then there is the silence where data acquisition takes place. In case of a PI detector the pulse has a normal duration of around 250\u00b5S the silence after the pulse should be enough for data acquisition, processing and updating outputs.  So timer0 is first set to a desired \u201eevent-speed\u201c at one hand providing a pulse near to 250\u00b5S and a usable silence time. For a 200Hz PI detector this would be a prescaler of 1024 (aka 16MHz / 1024 = 15.625kHz \u2192 64\u00b5S per cycle) with a compare counter of \u201e4\u201c for the pulse and a silence counter of \u201e72\u201c.  // set timer0 - taking care of the pulse to the coil and the pause between two pulses \n// Pulse composes of 4.672ms \"off\" (72) and 0.32ms \"on\"(4)  \n// separate times for OCR0A will be set in the interrupt routine \n// Resulting frequency is 200Hz \ncli(); \nTCCR0A = 0;  // set entire TCCR0A register to 0 \nTCCR0B = 0;  // same for TCCR0B \nTCNT0 = 0;  // initialize counter value to 0\n// set compare match register to required pulse with \nOCR0A = 72;  // = (4672\u00b5S/(0.0625\u00b5S * 1024)) - 1 (must be <256) \n// turn on Clear Timer on Compare (CTC) mode \nTCCR0A |= (1 << WGM01); \n// Set CS01 and CS00 bits for 1024 prescaler \nTCCR0B |= (1 << CS02) | (1 << CS00); \n// enable timer compare interrupt \nTIMSK0 |= (1 << OCIE0A); sei();As the signal is very unsymmetrical the trick is, to set the value 4 and 72 at each interrupt. The ISR look basically like this (with a global volatile boolean \"toggle\"):ISR(TIMER0_COMPA_vect){ \nif(toggle){ \n  cli(); \n  OCR0A = 72; \t// set for a long \"off-time\" -> next interrupt timer0 in 4.672ms \n  sei(); \n} \nelse{ \n  cli(); \n  OCR0A = 4; // set for a short \"on-time\" -> next interrupt timer0 in 320\u00b5S \n  sei();\n} \ntoggle=!toggle; \n}Of course during the if\u2019s and the else\u2019s there is some additional code for setting outputs as well.timer1As the timer1 has the highest counter value (65535) is can be used to measure \u201clong\u201d periods of time with high precision. At maximum speed (16MHz) the longest event before an overrun is 4.1ms. If the change in timing of an event is small, the overruns can be even ignored. The maximum timing resolution is then 0.0625\u00b5s! That is the background timer1 is used for the data-acquisition.First of all he timer is set for maximum speed cli(); \nTCCR1A = 0;             // set entire TCCR1A register to 0 \nTCCR1B = 0;             // same for TCCR1B \nTCNT1 = 0;              // initialize counter value to 0 \n// set compare match register \nOCR1A = timer1MaxValue; // just a value to start with -> set to a long period \n\t\t\t// to prevent unwanted interrupt interference \n// turn on Clear Timer on Compare (CTC) mode \nTCCR1B |= (1 << WGM12); \n// Set CS10 no prescaler \u2192 running at full 16MHz \nTCCR1B |= (1 << CS10); \n// enable timer compare interrupt \u2192 calling the ISR \nTIMSK1 |= (1 << OCIE1A); \nsei();To start the data acquisition the timer0 restarts the timer1 after every pulse by setting the counter of timer1 to 0 ( TCNT1 = 0) . Now there are two option for data acquisition:Waiting for an event to happen, and use timer1 to see when it happened, by reading the counter  TCNT1.time an event like analog read at a specific time (using the preset compare value of timer1) after the pulse.In the first case an ISR (e. g. analog comparator, or pin change) will read the TCNT1, e. g.ISR(ANALOG_COMP_vect){\t\t// for analog comparator @ pin D6 and D7 \n  Toggles[toggleCounter]=TCNT1; \n  toggleCounter++;\n}\n In the second case the compare value OCR1A is set to value where the timer1 compare ISR will be called and an analog read will be performed. During the ISR the compare value OCR1A can be changed to a new value to repeatingly perform analog to digital conversion (ADC) cycles e. g.ISR(TIMER1_COMPA_vect){ \ncli(); \nOCR1A = timer1PauseValue;  \t// set the next interrupt to the value where a \n\t\t\t\t// next ADC will give a usefull value \nADCSRA |= (1 << ADSC);     \t// ADSC -> start the cycle -> will be cleared \n\t\t\t\t// after the conversion is done \nsei(); \n}timer2The easiest way of indicating targets is by sound. When searching for treasures, your eyes are normally focused on where to search. So they are not available to look to a display or LED. Using sound makes it easy to find the exact location when looking at the coil and listening simultaneously. To provide precision and some feeling for the target, the tone should change its volume according to the strength of the signal. So to my opinion there should be a volume modulation implemented for the speaker.This is simply done by a 32kHz PWM signal to a speaker. A standard speaker is to slow to transform a 32kHz signal to a tone. The 32kHz is \u201cinterpreted\u201d rather as an analog value. By providing an audible frequency where the \u201con\u201d-pulses consist of a 32kHz signal with varying PWM proportions the volume of the audible tone van be varied.Timer2 has the nice feature that it is the hard-wired PWM function to the pins D3 and D11These pins can be activated to PWM by setting the bits in COM2x1 (COM2A1 and COM2B1) in the register TCCR2A. Register / output A is D11 and register / output B is D3. By setting the \u201ehow to behave\u201c to \u201cfast PWM\u201d, the PWM is set to drive the pin directly without needing any ISRs! The compare value OCR2A sets the PWM ratio (OCR2A=0 \u2192 0% positive wave \u2192 0V; OCR2A=255 \u2192 100% positive wave\u2192 5V).OCR2A and therefor the PWM ratio can be set at any place in the code to change the volume.Now that we have the volume, we still need to create the audible tone/frequency. This can be done with one of the other timers in their ISR (e. g. setting OCR2A = \u201cvolume\u201d after the data acquisition and setting OCR2A=0; when starting the pulse. That creates audible tone of 200Hz).", "step_imgs": [], "step_title": "Step 2: How to Use Timers"}, {"step": 3, "steps_text": "Analog reading, but really fast.By using analogRead() it is possible to read a 10Bit value with good precision and stability. Unfortunately the maximum sampling rate is about 10kHz. This is partially due to some additional code in analogRead() partially due to the prescaler of the clock for the AD-Conversion.Fortunately the Instructable \u201eGirino - Fast Arduino Oscilloscope\u201c provides all the information about how to obtain higher sampling rates. Just by uncommenting the relevant line, the sampling of the Analog to Digital Conversion (ADC) speed can be set.// ADCSRA |= (1 << ADPS2) | (1 << ADPS0);   // 32 prescaler for 38.5 KHz \nADCSRA |= (1 << ADPS2);                   // 16 prescaler for 76.9 KHz \n// ADCSRA |= (1 << ADPS1) | (1 << ADPS0);  // 8 prescaler for 153.8 KHzTo use the ADC, there are three basic ways:free running mode \u2013 each time a conversion is finished the specific ISR is called.single conversion with interrupt \u2013 after a conversion is complete the ISR is calledsingle conversion and \u201edelaying\u201c until the value is available (like in analogRead())Although the free running mode achieves definitively the most samples during a given time, I do not recommend to use it for metal detecting purpose. Why? Due to the low priority of the interrupt (see interrupt priority table): it is at priority 22! The first few readings will most likely be precisely timed. After that, other interrupts will start to interfere and delay the ADC slightly. Will lead to small but significant deviations in timing of the ADC, thus leading to deviations in the ADC values.So what I really recommend to use is the timer1 triggered measurement by single conversion with interrupt.So each ISR of timer1 triggers a ADC simply by setting ADCSRA |= (1 << ADSC);About 270 (theoretically 208) xtal cycles later, the \u201cI-am-finished-with-the-Analog-to-Digital-Conversions\u201d ISR(ADC_vect) is called, and the value can be read. At the prescaler of 16, only 8bit out of 10bit resolution can be used, as the lower two byte will not give precise values (see data sheet) at high speeds.As the ADC will be done in the background on hardware-level, so this timeframe can be used to execute some commands during the ISR for storing the value and limiting the amount of measured values etcFor some applications the dynamics of the signal is far away from what should expected to deliver good results (seeing a complete wave during a single AD conversion). Still this seems not to be a big issue. This is most likely due to the internal sample and hold circuit inside the ATmega chip witch seems to work pretty well!Serious Bit-Banging at digital portsAt some instances the outputs of the Arduino have to be set. This can easily been done by using digitalWrite(). Still the functions have some additional overhead code what makes them slow(er), and thus needing quite some cycles.As some of the outputs are changes during ISRs, bit-banging the ports is a way better choice.The basic functions are:PORTD = PORTD | B00000100;  // setting D2 high without changing other portsPORTD = PORTD & B11111011; // setting D2 low without changing other portsPIND = PIND | B00000100;  // toggling D2 if low \u2192 high; if high \u2192 lowThe allocation of the ports are bitwisePORTD  D7    D6    D5     D4     D3     D2     D1(TXD) D0(RXD) \nPORTB  N.A.  N.A.  D13    D12    D11    D10    D9      D8 \nPORTC  A0    A1    A2     A3     A4     A5     Reset   N.A.For the powering of the coil the ports should be directly set to HIGH or LOW, for the tone output the PIND command (toggling) allows for a neat feature: Multi Tone Target Identification.If we have two points during a cycle where we toggle the pin for the speaker we can decide if we toggle the pin at both points or just at one, depending on the target. By doing this we achieve a high tone (two toggles per cycle 200Hz) or a low tone (one toggle per cycle 100Hz).Using pins for testingEspecially during experimenting with a newly developed circuit and new code it is very useful to drive an additional pin to indicate what is happening in the code. This can be used either to trigger an oscilloscope, or at some instances to show how long a certain routine in the code takes. By setting the pin high at the beginning of a routine and setting it low after it, it can be nicely seen if this piece of code interferes with interrupts or other signals or to compare which version of code is faster or slower. That became handy for the I2C problems.Attached is a picture of the analog signal (red) and the signal of a pin indicating how long the AD conversion takes.", "step_imgs": ["https://cdn.instructables.com/FE7/ZJI0/JCUUMO49/FE7ZJI0JCUUMO49.LARGE.jpg"], "step_title": "Step 3: Using Digital and Analog Pins"}, {"step": 4, "steps_text": "The main target of a detector is, to find a target and then give some information about the target to the user. One way of indicating a target is by using the speaker as explained at timer2. There are other ways, to be described.Serial Output.This is mainly used for testing and experimenting, but it is unbeatable!Serial.print() and siblings are extremely fast (if set to Serial.begin(115200)). So while trying out your circuit and get a feeling for the readings, Serial.print() can be used to send serious amounts of data to the computer. If formatted in a decent way (e.g. \u201espace\u201c between values, \u201ereturns\u201c between cycles) large amount of data can be transferred for later analysis by copying the outputs from the serial monitor to Excel or similar spreadsheet programs (I am using Libre Office).I used this extensively, and one of the detector project will incorporate to use this to print data to a 16x2 LCD at a later point of time.16x2 LCDI think this is a good way to give some additional information about the target. This can incorporate the signal strength, but at the same time provide a menu to navigate through potential settings (sensitivity, auto balancing, power, discrimination).There are two simple ways to drive a typical 16x2 LCDdirect wiring with a 4 bit transferredusing a I2C backpackI know, that there are UART packpacks as well, but they are not so common as the I2C backpack.The direct wiring is straight forward, but cumbersome, as many ports are used and some wiring is necessary. So the simplest way to use a 16x2 display should be using the I2C backpack. SHOULD BE!! Unfortunately there are some real topics here:it seems that it is using timer0 during start upI2C is incredibly slow!!!It is connected to A5 and A4.1. During lcd.begin(16,2); apparently the delay() and siblings are used (funnily enough only there). This means, that if we like to use these timers for other purposes as we do, we have to call lcd.begin(16,2) prior to setting the timers for our purpose (did cost me a bit of time\u2026.). The other calls of the LCD do not use the timers or, can live at least with modified timer settings.2. The biggest drawback was definitely the speed of I2C. During the first implementation of sending all the information to the LCD, the LCD would not show anything at all, it would just hang. I realized that sending 32 characters including a lcd.clear() was too much, so I reduced the amount to 2 characters. But even sending two characters took about 3 milliseconds, which is too long. At 200Hz working frequency the cycle consists of a 300\u00b5s pulse and 4.7ms \u201esilence. This \u201esilence\u201c is used for data acquisition (about 2.5msin my case) and data crunching (1ms in my case) leaves about 1.1ms for the LCD output. Experiments showed that even one single character takes about 1.5ms. To solve this problem the routine Wire.setClock(400000) was quite useful. Normally the I2C clock is set to 100kHz by default. By using Wire.setClock(400000) the clock can be set to 400kHz. The 100kHz default is set in the wire.begin(). This routine is called during lcd.begin(). So the Wire.setClock(400000) must be called after the lcd.begin() (\u2026. again some hours frustration).Still the issue had to be solved, that only one character could be send per cycle. To solve this, an array (16x2 characters \u2192 32 characters in total) was created, being filled with all required information for display. This array is than read one character per cycle and send to the display. 3. the I2C is by default connected to the A4 and A5. What became apparent during testing is, that driving the I2C bus is destabilizing the voltage at the analog pins (probably to all pins, but the analog pins are sensitive as it effects the ADC). This leads to the timing issue, that all I2C transmissions should be well separated to any sensitive ADC cycles.So by setting the I2C clock speed to 400kHz and sending out only one character per cycle the duration of communication to the LCD could be reduced to be finished before the next pulse was send to the coil. So A4 and A5 were nicely quite when starting the data-acquisition at the pin A0 after the pulse. The refresh rate of the LCD is therefor 200Hz/32 characters \u2192 6.25HzSoundAs discussed in the step about the timers, timer2 is used to generate a dynamic sound output for the detector. A simple speaker connected via a 100 Ohm resistor to the port A (D11) or B (D3) give a nice feeling for the signal strength and type of target (if Multi Tone Target Identification is used). To achieve this the code is not realy nice, but doing the job.At two places in the code, timed by the timer0 and eg after dataCrunching there are two snippets of code driven by the booleans \"sound\" and \"pitch\"if((sound)&&(highPitch)) { // if the speaker should sound and at high pitch  if(OCR2A)\n    OCR2A=0;\n  else\n    OCR2A=volume; \n}if(sound){            \t// if the speaker should make noise \n if(OCR2A)\n   OCR2A=0;\n else\n   OCR2A=volume;  \n}\nelse\n  OCR2A=0;Setting the booleans \"sound\" and \"pitch\" should be done at other places in the code as they are not time critical.Same counts for the variable \"volume\" as an unsigned char or byte.LED As there is usually a LED present at D13 on all Arduino boards I use this LED aswel, setting the pin by bit-banging described in the last step. During testing this gives a good impression what is currently going on, for later use, the pin can be used to drive an external LED.Attached are screenshots from different timing, made visible by an external pin. The initial pulse can be seen, than some wild oscillation. During the oscillation the data acquisition takes place. After the data acquisition the data crunchings starts (yellow signal set to high). At the end of all data crunching and data transfer the yellow signal is set to low. The pictures show the difference in duration of:only data crunchingdata crunching and sending out 50 values via Serial.print()data crunching and sending out ony 1 character to the LCD via I2C @ 100kHz", "step_imgs": ["https://cdn.instructables.com/F84/1NVE/JCUUMOTV/F841NVEJCUUMOTV.LARGE.jpg", "https://cdn.instructables.com/FU2/B9UB/JCUUMOR9/FU2B9UBJCUUMOR9.LARGE.jpg", "https://cdn.instructables.com/FMJ/GE0T/JCUUMOR7/FMJGE0TJCUUMOR7.LARGE.jpg"], "step_title": "Step 4: Interfaces and Data Output"}, {"step": 5, "steps_text": "In an ideal world, the received signal would be crystal clear, and the smallest change compared to a reference would indicate a target. Unfortunately the world is not ideal and the signals in a metal detector are noisy and dirty (especially when using so few external components as I do). To filter out the relevant part of the data, some approaches were tried out to filter the received data and even some useful ones were found.The first point of optimization is the circuit!If the circuit and the coil are scrap, not the best filtering algorithm can help you.There are some general rules, like using big condensers. Shielding the circuit will help as well and should be experimented with. One thing what really makes things difficult are spikes in the signal. If the signal goes higher than 5V or lower than 0V there are some internal circuits protecting the ATmega from blowing up. This works only if the currents are kept low. For protection this works well, for the stability of the program this is not as good.Having worked with quite \u201edirty\u201c signals, the code had hick-ups and the ADC cycles had major misreadings. This can lead to small delays in readings, missed readings, or plain unexplainable values. Optimizing the circuit is the first step to decent data. Here some individual testing needs to be done for your circuit. Approaches are:keeping connections shortusing capacitors to stabilize the supply voltagepreventing large loads on Arduino pinspreventing high currents in proximity to sensitive parts / connectionspreventing heating up/ cooling down of componentsshielding components, connections, complete circuitstwisting wirespreventing moving / lose wiresknowing what you are doing\u2026..How to interpret measured valuesThe simplest approach to identifying changes to the measured signal is in comparing the signal to a reference value for the signal. If the measured value is different to this reference value then you found something.Reality proves different.In reality you will have small deviations in your readings. These deviations are due to signal interference from the 50/60Hz signal from the main grid, high frequency signals from poorly shielded devices (AC-adaptors, computers), interference to other wireless signals (Wifi, GSM) or simply oscillations as a result from the circuit design. These interference can deviate from a reference value in such a magnitude, that the sensitivity of the detector can be rendered useless.In the next parts different approaches explained for dealing with noisy signals.Creating meansCreating a mean value over the last few values is a good point to start. This way small deviations in positive and negative direction will be leveled out. Depending on the magnitude and appearance of the noise the amount of values to create the average might be choosen differentlyThe easiest way is to define an array and fill your obtained values into this array, increment by each cycle. Each cycle you add up all the values, and compare them to the reference. Small deviations will be eliminated. This is easily implemented by a global counter which is incremented by each cycle. If it reaches a \u201emaxValue\u201c, it is set to 0.Each cycle, a for-loop counts from 0 to the \u201emaxValue\u201c to grate the sum. Dividing the sum by the maxValue can be done does not really makes sense. The reference value could compare directly to the sum.Advantage: easy to implement, fast code, simple to read.Disadvantage: small delay (which is probably not relevant), only usable for little noise#define maxValue 20 \nint valueCounter=0; \nint valueSamples[maxValue]; \n\nvoid dataCrunching(void ){\nint i;\ndouble average;\n  valueSamples[valueCounter]=nextValue;\n  valueCounter++;\n  if(valueCounter>(maxValue-1))\n    valueCounter=0;\n  average=0;\n for(i=0; i<maxValue; i++)\n   average=average+valueSamples[i];\n}Observing bordersif the signal is too volatile an other approach could be looking at the minimum or maximum values in an array. This is especially useful, if the signal has the tendency to deviate especially in one direction. Again an array is used, filled with one value per cycle. Each cycle the array is checked for the e. g. lowest value. This value is then compared to the reference value. Creating e. g. the lowest value can be done, by giving a variable a high value to start with (e. g. 255) and then checking in the for-loop if the given array value is smallerif(minValue<array[i])  minValue=array[i];after the loop minValue has the smallest value of the array.Advantage: even noisy signals can be analyzed pretty wellDisadvantage: array need to be large enough (can slow down reaction speed)#define maxValue 20 \nint valueCounter=0; \nint valueSamples[maxValue]; \n\nvoid dataCrunching(void){\nint i;\nint minValue;\n  valueSamples[valueCounter]=nextValue;\n  valueCounter++;\n  if(valueCounter>(maxValue-1))\n    valueCounter=0;\n  minValue=32767;\n  for(i=0;i<maxValue;i++){\n    if(minValueminValue=valueSamples[i];\n  }\n}Ignoring ValuesSometimes the there are some glitches in the signal or plain misreadings. If these values are added to the array, they will completely corrupt the analysis of the array. To prevent this, values which are \u201enot trustworthy\u201c can be filtered out by setting \u201eexpectation-borders\u201c. The simplest way of doing so, is to look at the average in the array and only accept values in a +/- range of the average. I do not recommend to do so! Why not? It might lead to the situation, that the average value get \u201estuck\u201c. If the readings are slowly going up, and then suddenly back to \u201enormal\u201c, the average values will stuck with the high values, as the normal values might be out of the +/- range.Better to use the reference value for this.If the signal is outside of a +/- range in regard to the reference value in the array is just not replaced, the old value remains in the array. This leads to an array full of values in the same range. Comparing the average of the array to the reference value will be quite sensitive to small changesAdvantage: good way to filter out glitches and major misreadings, even small changes can be detected in a noisy signal.Disadvantage: enough values need to be within the range, reference value and range should be chosen with care.#define maxValue 20\nint valueCounter=0;\nint valueSamples[maxValue];\nint limit=10;\nint referenceValue;\t// needs to be created somewhere in the program!!!\n\nvoid dataCrunching(void){\nint i;\nint diff;\n  diff=abs(nextValue-referenceValue)\t\t// create the difference\n  if(diff<limit)\t\t\t\t// if difference larger than \"limit\"\n    valueSamples[valueCounter]=nextValue;\n  valueCounter++;\n  if(valueCounter>(maxValue-1))\n    valueCounter=0;\n  average=0;\n  for(i=0;i<maxValue;i++)\n    average=average+valueSamples[i];\n}Average single valuesOne way of filtering out small deviations is to use the previous value multiply it by a factor add the new value and divide by the (factor+1). Advantage: very easy to implement, filters out small noiseDisadvantage: ignores small changes, even if they are persistent (new value needs to deviate more than \u201efactor\u201c to influence the result after the division)#define maxValue 20\nint valueCounter=0;\nint valueSamples[maxValue];\nint factor=3;\n\nvoid dataCrunching(void){\nint i;\ndouble filterValue;\n  filterValue=valueSamples[valueCounter];\n  filterValue=filterValue*factor;\n  filterValue=filterValue+nextValue;\n  valueSamples[valueCounter]=filterValue/(factor+1);\n  valueCounter++;\n  if(valueCounter>(maxValue-1))\n    valueCounter=0;\n  average=0;\n  for(i=0; i<maxValue;i++)\n    average=average+valueSamples[i];\n}Using higher/lower counterIn this case the measured value would be compared to a previously created average. If the value is larger then the average a counter diffCounter would be incremented. If the value is smaller, the diffCounter would be decreased. If the diffCounter reaches a maximum value maxDiffCounter, the average is incremented and the diffCounter is set to 0. If the diffCounter goes below 0, the average is decreased and the diffCounter is set to maxDiffCounter.Advantage: even very noisy signal can be analyzed.Disadvantage: the distribution of high/lows should be \u201estable\u201c, indications of deviations could be pretty slow#define maxDiffCounter 30\nint diffCounter=0;\nint referenceValue;\t   // needs to be created elsewhere in the program!!!\nint sampleValue;\nint average=0;\n\nvoid dataCrunching(void){\nint i;\ndouble average;\n  if(nextValue>referenceValue)\t\t// if larger than the reference\n    diffCounter++;\t\t\t// increase the diffCounter\n  else if(nextValue<referenceValue)\t// if smalle than the reference\n   diffCounter--;\t\t\t// decrease the difCounter\n  if(diffCounter>maxDiffCounter){\t// maximum value reached\n    average++;\t\t\t\t// correct the average\n    diffCounter=0;\t\t\t// restart at 0\n  }\n  else if(diffCounter<0){\t\t// minimum value reached\t\n    average--;\t\t\t\t// correct the average\n    diffCounter=maxDiffCounter;\t\t// restart at maximum value\n  }\n}\tCreating reference ValuesThe easy part in the data crunching ware the different approaches to filter out noise. A different topic is how to create a reference value to measure against.Again there are different approaches with different advantages and disadvantages. There are different ways to use an external input to obtain a reference value. using a push button, when pressed the recent value will be used as a referencehaving a dial to set a proper referenceusing push buttons +/- to set a reference value.They are old school except for variant one, which can be used for pin pointing targets as well.Still the more convenient way is to have an algorithm in place to create this value. I would create a first routine called calibrate() where I would have a \u201cwarm-up\u201d of the circuit and then a period of time where I would create an average value with the minimum of filters set. Why minimum filters? The reference will have a start value of 0 or any other value. Except if the proximate value is know (stored) the real value can be either near or far from this initial value. So we need to move freely towards the real reference.The second step is then to average the reference with all required filters just to find the \u201creal\u201d reference. At that point of time you will have a good reference.Now we will have to deal with drift. Drift can occur due to temperature drift or to a change of the characteristics of the soil. So some kind adjusting of the reference value is useful.My personal approach is to use a higher/lower (as decribed) counter for this. To prevent too fast changes of the reference value, the maximum counter value for changing the reference value can be set quite high (100-500) this compensates temperature. This maximum value for the counter could be set via a menu according to the users requirementUsing a push button approach for a pin pointing mode of operation would simply disable the adjustment of the reference value.", "step_imgs": ["https://cdn.instructables.com/FLB/L2VJ/JCUUMRYG/FLBL2VJJCUUMRYG.LARGE.jpg", "https://cdn.instructables.com/FHN/NFWH/JCUUMRYI/FHNNFWHJCUUMRYI.LARGE.jpg", "https://cdn.instructables.com/FMX/5NWY/JCUUMRYE/FMX5NWYJCUUMRYE.LARGE.jpg", "https://cdn.instructables.com/FE9/D6L2/JCUUMRYF/FE9D6L2JCUUMRYF.LARGE.jpg"], "step_title": "Step 5: Data Crunching"}, {"step": 6, "steps_text": "Testing The best code remains theory until it is tested. As the testing took the main part of the design, at least I would like to share some experiences.As explained earlier the Serial.print() stuff is pretty fast even for large amount of data. So during development I really recommend using the serial functions to print as many information to your computer as relevant. Here my recommendation is: Start with the raw data! If things are not running smoothly, try to get an impression what you code is dealing with. If you look at the filtered data, you might miss significant information. Her you might find glitches, drifting of signals or repeating pattern of deviations. The first step then would be looking at numbers, the second step would be looking at curves (created via spreadsheet programs like Excel or Libre Office). To get there, print the values of interest separated by \u201c \u201c (space) and separate the cycles with a new line (e. g. by using a Serial.prinln(\u201c\u201d)).When going into filtering, these values can be analyzed by numbers as well, probably using additionally a LED as indication.When working with analog signals an oscilloscope will come in handy. This is especially the case when the results are unexplainable. These results can be glitches of especially high or low values, repeating pattern of deviation. Single channel oscilloscopes can do a good job, my favorite approach is to use a two channel oscilloscope and use an additional pin for triggering the refresh.Reasons for misreadingsduring many hours of testing I came across different problems resulting in a malfunctioning of the detector.Although the ATmega  chip incorporates some basic pin protection it reacts funny when challenged. Over and under voltage voltage will lead to hick-ups in the code (stalling for a short period of time), a reboot of the chip or in worst case a dead pin. So make sure the pins are well protected. When using diodes to Vcc and GND, keep in mind, that they have a forward voltage of a few millivolts, thus creating small under or over voltages. One other phenomenon is that AD conversion can be disturbed by over or under voltages leading to glitches (values being plain 255 where they should be different or deviating largely in single occasions). Overlaying signals can destabilize readings. So when getting funny readings, try to touch different  components to see if these patterns increase or not (ONLY IF DEALING WITH LOW VOLTAGES!). This might lead to components picking up the noise, needing some shielding or rearranging.Lose wires can generate some noise as well, so do not move components during testingInterfering interrupts will lead to either missed data (value skipped) or to additional delays in the ISR. Being aware of the priority of the interrupt can help, as higher priority ISR will not be interrupted by lower priority interrupts. Accessing the same variables at the same time or changing register values while they are in use will lead to a total halt of the program. So keep an eye on the overall timing of the code when changing  timing of the interrupts dynamically.To find conflicts in timing, use an external pins to indicate when and how long a certain part of the code is running. This of coarse requires an oscilloscope. A different approach is to use the timer1 counter value to be simply printed to the serial monitor. Get the timer1 value at the start of a routine by calling:start=TCNT1; and at the end of the routine:end==TCNT1;by sending the start and end value to the serial monitor, some feeling can be provided for the timing.ConclusionAlthough there are way better micro controllers to use for metal detectors (faster, more precise) the Arduino gives some great approaches. These approaches try to get a maximum of precision and/or speed. There are some basic ways to deal with noisy signals too. But one important thing remains: if the circuit is primitive or poor, the overall results will be too. At the other hand the initially mentioned available circuits (GoldPic, SurfPi, FoxyPi, Teemo DIY, TPIMD, FelezJoo and the TechKiwiGadgets designs here on Instructables) can be used in connection with an Arduino with the above approaches, replacing the intended micro controllers with you own code. As a reference I attached the full code with the implementation of allmost all described features. The required circuit is the LC-Trap circuit with the A0 connected to D6. I will do a separate Instructable to explain the background to the circuit and code in detail.Have fun. P.S. If you found some usefull ideas for you project in this Instructabel, please be so nice and reference to this Instructable", "step_imgs": ["https://cdn.instructables.com/FHQ/BNKJ/JCUUMNHJ/FHQBNKJJCUUMNHJ.LARGE.jpg", "https://cdn.instructables.com/F84/1NVE/JCUUMOTV/F841NVEJCUUMOTV.LARGE.jpg", "https://cdn.instructables.com/FE7/ZJI0/JCUUMO49/FE7ZJI0JCUUMO49.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 6: Testing...."}], "channel": "Arduino"}, {"category": "technology", "description": "Edited 21/07/2016. I have another tutorial with 2 DS18B20 (datalogger).It follows the same concepts of this. Link on the step 6.See you there! Hi, this instructable is for those who want to log data from their sensors but don\u00b4t need a bunch of data.  I want to explain how we can control the sampling  rate with the RTC and then show/save the data. We are going to test, step by step,  the two parts of this shield. I will assume that you are familiar with the Arduino environment at a basic level.I have translated this tutorial  to share it with you, so excuse my english.Feel free to correct me in the comments because this is a fun way to learn. Summary of the steps: I recommend to go step by step, because is easier to find errors than in a large/complex code . If you already have knowledge, you can skip steps.1.-Materials. All you need for this tutorial2.- Adafruit guide (It does not take long). I don\u00b4t want to rewrite the guide because if you are using arduino, you have read a lot of guides, books and tutorials like me. This guide will give you all that you need to know: how to set and test your shield, even if it\u00b4s not your particular shield, as in my case.3.- Testing SD card. We will write data on the sd card with a simple sketch to ensure that it works.4.-Testing the RTC. We will begin to use the RTC to control the sample rate and show data by serial monitor.5.- SD and RTC together. The same excercise  using the entire shield.6.- Sensor data logger. Now we conect a sensor and log data to sd card.", "title": "Arduino Data Logger Shield. How to Control Sample Rate With Rtc", "url": "https://www.instructables.com/id/Arduino-Data-Logger-Shield-How-to-Control-Sample-R/", "section": "technology", "steps": [{"step": 1, "steps_text": "1.- Arduino UNO (tested on arduino uno and Funduino)2.- Logger shield (mine is from a local vendor not adafruit shield)3.-DTH 11 module4.-Connectors5.- Adafruit logger shield guide (PDF below)6.- SD card or micro SD card7.- CR1220 battery (if not included)", "step_imgs": ["https://cdn.instructables.com/FC1/IX0C/IQCBHX94/FC1IX0CIQCBHX94.LARGE.jpg", "https://cdn.instructables.com/F00/OOUO/IQCBHXBL/F00OOUOIQCBHXBL.LARGE.jpg", "https://cdn.instructables.com/FS5/R5WM/IQCBHZON/FS5R5WMIQCBHZON.LARGE.jpg", "https://cdn.instructables.com/F7R/39J4/IQFCEVD1/F7R39J4IQFCEVD1.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 1: Materials"}, {"step": 2, "steps_text": "Like i\u00b4ve said this guide is for the adafruit logger shield but it worked fine for me. You have to read and test the codes(you don\u00b4t need to make the light and temperature logger ). It does not take long. At this point you have the actual time and date and a formated/ tested sd card. Also  how to solder pins if you have a new shield.Considerations-You will add the libraries needed like RTClib.-You must know the pins of your shied. Read the datasheet of your shield.The CS (chipSelect) pin is the most important. In my case is the 8 and maybe not yours.Common pins are 4, 8, 10. You must change the chipSelect to your pin.-In my case, i did not need to put the pin 10 of the arduino as an output -->   pinMode(10 , OUTPUT);-I had problems with the \"CardInfo\"  using IDE 1.6.5. No problems with IDE 1.6.9-I am using an ultra cheap 2GB sd card  , and works fine.", "step_imgs": ["https://cdn.instructables.com/FOW/SVP1/IQCBHXUA/FOWSVP1IQCBHXUA.LARGE.jpg"], "step_title": "Step 2: Adafruit Guide"}, {"step": 3, "steps_text": "Now we are ready to write a simple \"Hello World\" on the sd card.This sketch is very simple (no serial monitor).1.-Make sure that you have the libraries needed :SD, SPI, WIRE2.-Remember to change your chipSelect        const int chipSelect = 8;         //Maybe not yours!!.You have to put your cs pin here3.-Uncomment this line if you need.//pinMode(10 , OUTPUT);                // Uncomment if necesary.I did not need4.- You can change \"Datos\" but you will have to change the lines that content this word.Example:File myData;myData=SD.open...........myData.println...............myData.close.........This sketch writes 2 headers in the void setup just once . Then hello world1 and hello world2 every second (void loop) on your sd card. Give it a minute and then check your sd card. Now check the file in your computer and you will have something like in the picture.The most common problems are: the pin 10  of the arduino as output or not , wrong chipSelect or bad sd card.", "step_imgs": ["https://cdn.instructables.com/FNG/IDY6/IQFCEAVQ/FNGIDY6IQFCEAVQ.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 3: Testing SD Card"}, {"step": 4, "steps_text": "This is the reason for this tutorial. We\u00b4ll learn how to control the sample rate with a simple \"if\" comparation. You can \"do\" something with this instruction too, not just print.-First the libraries #include                         //Libraries we need#include \"RTClib.h\"-The clockRTC_DS1307 RTC ;                  // define the Real Time Clock object-The void setupSerial.begin(9600);                    //Must match with the serial monitorWire.begin();RTC.begin();-In the void loop we call the clock to \"know\" the date and time and then compare it with the \"if\" function.DateTime now = RTC.now();         // Clock callif(now.second()==00){                    //Sample every minuteSo if the second is 0 we have a \"new\" minute and write date , time and message to the serial monitor (see the picture)This is the sketch that i use. When i want to work with the logger , i uncomment the line // sample every hour ,because this is the sample rate that i want. Just use one at the timeif(now.second()==00){                                               //Sample every minute//if(now.minute()==00 && now.second()==00){        //Sample every hourThe delay 1000 is important because if you don\u00b4t use it , you will have more than one data in \"that\" second. Try itNow you know that if you compare the now.hour() , now.minute() and now.second , etc, you can control your sample rate. Remember that your RTC has the real time so you are logging accurate information.So we have:-Every minuteif(now.second()==00){Print what you want}-Every hourif(now.minute()==00 && now.second()==00){Print what you want}-Every 10 min.if(now.minute()==00 && now.second()==00){Print what you want}if(now.minute()==10 && now.second()==00){Print what you want}if(now.minute()==20 && now.second()==00){Print what you want}if(now.minute()==30 && now.second()==00){Print what you want}if(now.minute()==40 && now.second()==00){Print what you want}if(now.minute()==50 && now.second()==00){Print what you want}-Every 30 minif(now.minute()==00 && now.second()==00){ Print what you want}if(now.minute()==30 && now.second()==00){Print what you want }", "step_imgs": ["https://cdn.instructables.com/F2W/XQ3V/IQFCEIE9/F2WXQ3VIQFCEIE9.LARGE.jpg", "https://cdn.instructables.com/FOI/AYU8/IQFCEVQ2/FOIAYU8IQFCEVQ2.LARGE.jpg", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 4: Testing the RTC"}, {"step": 5, "steps_text": "Now we\u00b4ll write \"Hello World\"to de sd card with time stamp.I have mixed the two sketch and changed the sd card instead the serial monitor.Consider the same precautions of the previous steps.If everything works fine , you will have the same information like in the picture.You can try with others sample ratesThis is structure to print:void loop(){DateTime now = RTC.now();                        //Clock call-The sampling rate we wantif(now.second()==0){                            //Sample every minute-Reopen the file (first open was for headers )Logfile=SD.open(\"Logfile.csv\",FILE_WRITE);       //Will open and will write date and message-The date and time. You can change the ordernow =RTC.now();Logfile.print(now.year(), DEC);                //Print date and time(not saved yet) Logfile.print(\"/\"); Logfile.print(now.month(), DEC); Logfile.print(\"/\"); Logfile.print(now.day(), DEC); Logfile.print(\" \"); Logfile.print(now.hour(), DEC); Logfile.print(\":\"); Logfile.print(now.minute(), DEC); Logfile.print(\":\"); Logfile.print(now.second(), DEC);-We print the message or valuesLogfile.print(\" Hello World\");                   //Print message(not saved yet) Logfile.println();                               //Jump to the next line Logfile.close();                                 //Print saved  }   delay(1000);                                    //One data per second}", "step_imgs": ["https://cdn.instructables.com/FTF/J1LW/IQFCETNM/FTFJ1LWIQFCETNM.LARGE.jpg", "/assets/img/pixel.png"], "step_title": "Step 5: SD and RTC Together"}, {"step": 6, "steps_text": "If you want, You can make this temperature datalogger:Arduino Data Logger With 2 DS18B20 and Sample Rate Controlhttps://www.instructables.com/id/Arduino-Data-Logger-With-2-DS18B20-and-Sample-Rate/Now we add the code for the sensor. I am using the DHT 11 sensor module (with the circuit ready). If not ,follow the instructions of the DHT library. This is not a fast sensor and sometimes you don\u00b4t get data . It\u00b4s just to show you how it works.We take the code of the last step and add the lines we need. You can take this example and add other sensor.I\u00b4m using the pin 2 of the arduino to conect with the sensor data ,Vcc to 5V  and GND to GND.We also have to change the prints.Logfile.println(\"  Date    Time    Humidity   Temp\");     //Print headers (not saved yet)--------------------------------------------------------------------------Logfile.print(h);                               //Print humidity(not saved yet)Logfile.print(\"%\");                             //Print simbol Logfile.print(\"  \");                            //Space between data Logfile.print(t);                               //Print temperature Logfile.print(\"\u00b0C\");                            //Print simbol Logfile.println();                               //Jump to the next line Logfile.close();                                 //Print savedYou can use the sample rate of the above steps. You can polish the codes according to your needs.I hope this tutorial is useful for you !", "step_imgs": ["https://cdn.instructables.com/FLT/H8P4/IQGWUZJ9/FLTH8P4IQGWUZJ9.LARGE.jpg", "https://cdn.instructables.com/F7R/39J4/IQFCEVD1/F7R39J4IQFCEVD1.LARGE.jpg", "https://cdn.instructables.com/F1S/LUYV/IQFCEW37/F1SLUYVIQFCEW37.LARGE.jpg", "https://cdn.instructables.com/F9L/XLDL/IQFHJO8K/F9LXLDLIQFHJO8K.LARGE.jpg", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 6: Working With a Sensor"}], "channel": "Arduino"}, {"category": "technology", "description": "OverviewMass spectrometry (MS) is a proven analytical method used to glean information about the chemical structure of a chemical sample.  MS is applied to fields as disparate as airport security, food and wine analysis, drug and explosives analysis, as well as most fields of chemical and biological research.  MS works by ionizing, or bestowing a net charge, on a sample of molecules and then sorting the ions based on their mass-to-charge ratio.  Since the particle has a one electron negative charge or one proton positive charge, the mass spectrometer can make use of electrical and/or magnetic fields to essentially sort molecules by their masses.  The charged molecules are then guided by electromagnetic attraction or repulsion to a detector mechanism.  A typical mass spectrum (shown below) plots the different mass-to-charge ratios (m/z) against their abundances (occurrence of a certain ion divided by the occurrence of the most plentiful ion) within the sample.Aspiring chemists and biologists, as well as anyone interested in gaining a greater understanding of these fields, can benefit from a greater understanding of MS.  This Instructable will provide a set of instructions for the reading and comprehension of a simple mass spectrum of a halogenated alkane (haloalkane), or a compound containing only hydrogen, carbon and a halogen.  Haloalkanes will be analyzed both because of their wide use as chemical solvents and because understanding of their spectra forms a good baseline for future learning in the MS field.  The above information will be explained in more detail in the coming steps to share insight into how a mass spectrometrist can use a mass spectrum to determine the identity of an unknown chemical sample.Materials:  Four-function calculator, notebook, Periodic Table of Elements (optional)Time Investment:  10 to 15 minutesExperience Required:  High school level knowledge of chemistry (i.e. atoms, elements, Periodic Table)", "title": "How to Read a Simple Mass Spectrum", "url": "https://www.instructables.com/id/How-to-Read-a-Simple-Mass-Spectrum/", "section": "technology", "steps": [{"step": 1, "steps_text": "The molecular ion represents the entire molecule in question, prior to any fragmentation.  Each analyte molecule is given a charge of one, so the molecular ion m/z value represents the molecules total mass. Ionization, specifically electron impact (EI) ionization, is used to remove an electron from an analyte molecule so that it can be analyzed by the electrical and magnetic fields of the mass spectrometer.  EI, however, is a \u201chard\u201d ionization source that can cause molecules to fragment, or break into multiple pieces.  It is therefore important to first identify the molecular (complete) ion.1.       The molecular ion is typically represented on the mass spectrum as the peak with the highest m/z ratio.  Find and record this value in your notebook.Example:  In the EI mass spectrum of water (shown above) a large peak is seen at m/z value 18.  Water has a weight of 18 atomic mass units, or Daltons, so the peak at m/z 18 represents the molecular ion.  The smaller peak at m/z 17 represents a water molecule in which a hydrogen is removed by fragmentation.", "step_imgs": ["https://cdn.instructables.com/F56/X7VB/IVO3HWSQ/F56X7VBIVO3HWSQ.LARGE.jpg"], "step_title": "Step 1: Step 1:  Identify the Molecular Ion"}, {"step": 2, "steps_text": "The molecular ion reflects the complete weight of an analyte molecule, but, considering the fact that there are dozens of stable elements, the molecule\u2019s weight alone will not reveal its identity.  Fortunately, individual molecules have relatively unique EI fragmentation patterns.  The different peaks on a mass spectrum reveal the compounds identity, so, as shown below, a mass spectrometrist should identify all major spectral peaks.  A major peak is the most abundant peak within a cluster of smaller peaks.  For this introductory Instructable, the largest (most abundant) peak in each cluster will represent the entire cluster.1.       Use a highlighter to identify the most abundant peak in each cluster.2.       Determine the numerical m/z value for each of these major peaks and write all of them down in your notebook.-Note that the molecular ion is not necessarily the most abundant peak.  The most abundant peak is, by naming convention, the base peak.Example:  Major peaks at m/z 15, 29, 43, 57, and 184 (see above sample spectrum).", "step_imgs": ["https://cdn.instructables.com/FNI/9L07/IVO3HVWJ/FNI9L07IVO3HVWJ.LARGE.jpg"], "step_title": "Step 2: Step 2:  Identify Major Fragmentation Clusters"}, {"step": 3, "steps_text": "Smaller peaks clustered around each major peak are largely present due to differences in which of the two fragments retains the ion, gain or loss of protons, and naturally occurring elemental isotopes.  For a simple alkane or halogenated alkane the \u2206m (mass difference between two singly charged ions) values will typically involve the gain or loss of about 14 or 15 Daltons between major peak clusters.  These mass differences represent the gain or loss of a methyl (-CH3) or methylene (-CH2-) from the larger ion.  Some long or branched molecules exhibit advanced fragmentation patterns, so you should assume the presence of a halogen only if there is a 17 Dalton or greater \u2206m value between major peaks in a haloalkane.1.       Use the simplified \u201cmass spectrum\u201d from Step 2 to determine the mass difference (\u2206m) between each peak and the next peak on the spectrum.2.       Use your calculator and list of major m/z peaks to determine numerical \u2206m values.  Write these values down in your notebook.Example:  \u2206m values between major peaks (starting from the left, m/z 15) are 14, 14, 14, and 127 Daltons.", "step_imgs": ["https://cdn.instructables.com/F07/X8EF/IVO3HVZ0/F07X8EFIVO3HVZ0.LARGE.jpg"], "step_title": "Step 3: Step 3:  Determine the \u2206m for Each Major Peak"}, {"step": 4, "steps_text": "Mass differences between major peaks will often exceed the 14 or 15 mass units representing a methyl or methylene carbon.  A \u2206m value greater than 16 Daltons indicates the presence of a heteroatom, or atom that is not carbon or hydrogen (for our study, a halogen).  Common halogens (Group 17 on the Periodic Table) include fluorine, chlorine, bromine and iodine.  These can essentially replace one hydrogen-to-carbon bond of an alkane and dramatically alter its chemical and physical properties.  Luckily, singularly halogenated alkanes have easily identifiable mass spectra (see iodobutane spectra below).1.       Check your list of mass differences created in Step 3.  If one of these \u2206m values is larger than 16 mass units, use the Periodic Table to determine which halogen the molecule contains.2.       Use the Periodic Table (or the table above, for convenience) to determine if the halogen is element F, Cl, Br, or I.  Write this halogen down in your notebook.Example:  The \u2206m value of 127 Daltons from Step 3 indicates the presence of an iodine atom in the example spectra (see previous table).", "step_imgs": ["https://cdn.instructables.com/F36/3HW2/IVO3HW0G/F363HW2IVO3HW0G.LARGE.jpg", "https://cdn.instructables.com/FUT/PLS4/IVO3HW6M/FUTPLS4IVO3HW6M.LARGE.jpg"], "step_title": "Step 4: Step 4:  Identify Any Heteroatoms"}, {"step": 5, "steps_text": "Now that the halogen has been identified, the length of the carbon chain itself can be determined.  The general chemical formula of an alkane is CnH2n+2, but, since the halogen effectively replaces one of the iodobutane hydrogens, the modified alkane formula is CnH2n+1X (where X is a halogen).1.       Look to the largest peak on your mass spectrum that does not include the halogen (molecular ion mass minus halogen mass).2.       Use this mass, algebra and the masses of carbon and hydrogen to solve for n (see example).3.       Add this number back into the chemical formula (CnH2n+1) and append the halogen for the complete chemical formula.  Write this down in your notebook.Example:  The largest non-halogenated m/z value from Step 2 is 57.  By plugging this into the equation above (CnH2n+1X) and substituting the atomic masses of carbon (12 Da.) and hydrogen (1 Da.) (12n + 1(2n+1) = 57; see Periodic Table for masses), the example alkane formula can be determined to be C4H9X.  The previously determined halogen (iodine) can then be added to this formula for a final identification of C4H9I.", "step_imgs": ["https://cdn.instructables.com/F6H/X8IH/IVO3HWBD/F6HX8IHIVO3HWBD.LARGE.jpg"], "step_title": "Step 5: Step 5:  Identify Remainder of Molecule"}, {"step": 6, "steps_text": "1.      Combine the name from the number of carbons with the halogen prefix from the tables above to give the total chemical name.  Write this down in your notebook.Example:  C4H9I = butane (C4) + iodo- (I) = iodobutane", "step_imgs": ["https://cdn.instructables.com/F64/HUUN/IVO3HWJW/F64HUUNIVO3HWJW.LARGE.jpg"], "step_title": "Step 6: Step 6:  Name the Molecule   "}, {"step": 7, "steps_text": "The National Institute of Standards and Technology (NIST) database contains a collection of standardized mass spectra.  This database can be used to confirm a naming decision made based on a mass spectrum.1.   Simply use a Google search of \u201c[chemical name] NIST EI Spectra\u201d and go to the http://webbook.nist.gov option to check your work.  The two spectra (provided and NIST standard) should match closely.  A close match indicates correct identification.1.       If the major peaks of the NIST mass spectrum do not match your teaching spectra:\u00b7       Recheck your naming of the chemical formula (Step 6)\u00b7       Recheck your identification of major peaks for a missed cluster of peaks (Step 2)Example:  See NIST EI spectra of iodobutane (above).  This closely matches the example spectra in Steps 2 and 3.Further InformationYou now have a basic knowledge of the landmarks and meaning of a simple mass spectrum.  If this topic interests you, consider exploring the following intermediate topics:\u00b7       MS analysis of oxygen (and other non-halogen heteroatom) containing compounds, such as alcohols, ethers and carboxylic acids\u00b7       MS identification of hydrocarbon isomers (molecules with the same chemical formula but containing different bond patterns)\u00b7       MS application to protein analysis (proteomics)The following link will take interested readers to a good intermediate level primer on mass spectrometry (courtesy of Thermo Fisher Scientific):https://www.thermofisher.com/us/en/home/life-science/protein-biology/protein-biology-learning-center/protein-biology-resource-library/pierce-protein-methods/overview-mass-spectrometry.html", "step_imgs": ["https://cdn.instructables.com/F90/5ZJG/IVO3HWO6/F905ZJGIVO3HWO6.LARGE.jpg"], "step_title": "Step 7: Step 7:  Check Your Work"}], "channel": "Science"}, {"category": "technology", "description": "OverviewMass spectrometry (MS) is a proven analytical method used to glean information about the chemical structure of a chemical sample.  MS is applied to fields as disparate as airport security, food and wine analysis, drug and explosives analysis, as well as most fields of chemical and biological research.  MS works by ionizing, or bestowing a net charge, on a sample of molecules and then sorting the ions based on their mass-to-charge ratio.  Since the particle has a one electron negative charge or one proton positive charge, the mass spectrometer can make use of electrical and/or magnetic fields to essentially sort molecules by their masses.  The charged molecules are then guided by electromagnetic attraction or repulsion to a detector mechanism.  A typical mass spectrum (shown below) plots the different mass-to-charge ratios (m/z) against their abundances (occurrence of a certain ion divided by the occurrence of the most plentiful ion) within the sample.Aspiring chemists and biologists, as well as anyone interested in gaining a greater understanding of these fields, can benefit from a greater understanding of MS.  This Instructable will provide a set of instructions for the reading and comprehension of a simple mass spectrum of a halogenated alkane (haloalkane), or a compound containing only hydrogen, carbon and a halogen.  Haloalkanes will be analyzed both because of their wide use as chemical solvents and because understanding of their spectra forms a good baseline for future learning in the MS field.  The above information will be explained in more detail in the coming steps to share insight into how a mass spectrometrist can use a mass spectrum to determine the identity of an unknown chemical sample.Materials:  Four-function calculator, notebook, Periodic Table of Elements (optional)Time Investment:  10 to 15 minutesExperience Required:  High school level knowledge of chemistry (i.e. atoms, elements, Periodic Table)", "title": "How to Read a Simple Mass Spectrum", "url": "https://www.instructables.com/id/How-to-Read-a-Simple-Mass-Spectrum/", "section": "technology", "steps": [{"step": 1, "steps_text": "The molecular ion represents the entire molecule in question, prior to any fragmentation.  Each analyte molecule is given a charge of one, so the molecular ion m/z value represents the molecules total mass. Ionization, specifically electron impact (EI) ionization, is used to remove an electron from an analyte molecule so that it can be analyzed by the electrical and magnetic fields of the mass spectrometer.  EI, however, is a \u201chard\u201d ionization source that can cause molecules to fragment, or break into multiple pieces.  It is therefore important to first identify the molecular (complete) ion.1.       The molecular ion is typically represented on the mass spectrum as the peak with the highest m/z ratio.  Find and record this value in your notebook.Example:  In the EI mass spectrum of water (shown above) a large peak is seen at m/z value 18.  Water has a weight of 18 atomic mass units, or Daltons, so the peak at m/z 18 represents the molecular ion.  The smaller peak at m/z 17 represents a water molecule in which a hydrogen is removed by fragmentation.", "step_imgs": ["https://cdn.instructables.com/F56/X7VB/IVO3HWSQ/F56X7VBIVO3HWSQ.LARGE.jpg"], "step_title": "Step 1: Step 1:  Identify the Molecular Ion"}, {"step": 2, "steps_text": "The molecular ion reflects the complete weight of an analyte molecule, but, considering the fact that there are dozens of stable elements, the molecule\u2019s weight alone will not reveal its identity.  Fortunately, individual molecules have relatively unique EI fragmentation patterns.  The different peaks on a mass spectrum reveal the compounds identity, so, as shown below, a mass spectrometrist should identify all major spectral peaks.  A major peak is the most abundant peak within a cluster of smaller peaks.  For this introductory Instructable, the largest (most abundant) peak in each cluster will represent the entire cluster.1.       Use a highlighter to identify the most abundant peak in each cluster.2.       Determine the numerical m/z value for each of these major peaks and write all of them down in your notebook.-Note that the molecular ion is not necessarily the most abundant peak.  The most abundant peak is, by naming convention, the base peak.Example:  Major peaks at m/z 15, 29, 43, 57, and 184 (see above sample spectrum).", "step_imgs": ["https://cdn.instructables.com/FNI/9L07/IVO3HVWJ/FNI9L07IVO3HVWJ.LARGE.jpg"], "step_title": "Step 2: Step 2:  Identify Major Fragmentation Clusters"}, {"step": 3, "steps_text": "Smaller peaks clustered around each major peak are largely present due to differences in which of the two fragments retains the ion, gain or loss of protons, and naturally occurring elemental isotopes.  For a simple alkane or halogenated alkane the \u2206m (mass difference between two singly charged ions) values will typically involve the gain or loss of about 14 or 15 Daltons between major peak clusters.  These mass differences represent the gain or loss of a methyl (-CH3) or methylene (-CH2-) from the larger ion.  Some long or branched molecules exhibit advanced fragmentation patterns, so you should assume the presence of a halogen only if there is a 17 Dalton or greater \u2206m value between major peaks in a haloalkane.1.       Use the simplified \u201cmass spectrum\u201d from Step 2 to determine the mass difference (\u2206m) between each peak and the next peak on the spectrum.2.       Use your calculator and list of major m/z peaks to determine numerical \u2206m values.  Write these values down in your notebook.Example:  \u2206m values between major peaks (starting from the left, m/z 15) are 14, 14, 14, and 127 Daltons.", "step_imgs": ["https://cdn.instructables.com/F07/X8EF/IVO3HVZ0/F07X8EFIVO3HVZ0.LARGE.jpg"], "step_title": "Step 3: Step 3:  Determine the \u2206m for Each Major Peak"}, {"step": 4, "steps_text": "Mass differences between major peaks will often exceed the 14 or 15 mass units representing a methyl or methylene carbon.  A \u2206m value greater than 16 Daltons indicates the presence of a heteroatom, or atom that is not carbon or hydrogen (for our study, a halogen).  Common halogens (Group 17 on the Periodic Table) include fluorine, chlorine, bromine and iodine.  These can essentially replace one hydrogen-to-carbon bond of an alkane and dramatically alter its chemical and physical properties.  Luckily, singularly halogenated alkanes have easily identifiable mass spectra (see iodobutane spectra below).1.       Check your list of mass differences created in Step 3.  If one of these \u2206m values is larger than 16 mass units, use the Periodic Table to determine which halogen the molecule contains.2.       Use the Periodic Table (or the table above, for convenience) to determine if the halogen is element F, Cl, Br, or I.  Write this halogen down in your notebook.Example:  The \u2206m value of 127 Daltons from Step 3 indicates the presence of an iodine atom in the example spectra (see previous table).", "step_imgs": ["https://cdn.instructables.com/F36/3HW2/IVO3HW0G/F363HW2IVO3HW0G.LARGE.jpg", "https://cdn.instructables.com/FUT/PLS4/IVO3HW6M/FUTPLS4IVO3HW6M.LARGE.jpg"], "step_title": "Step 4: Step 4:  Identify Any Heteroatoms"}, {"step": 5, "steps_text": "Now that the halogen has been identified, the length of the carbon chain itself can be determined.  The general chemical formula of an alkane is CnH2n+2, but, since the halogen effectively replaces one of the iodobutane hydrogens, the modified alkane formula is CnH2n+1X (where X is a halogen).1.       Look to the largest peak on your mass spectrum that does not include the halogen (molecular ion mass minus halogen mass).2.       Use this mass, algebra and the masses of carbon and hydrogen to solve for n (see example).3.       Add this number back into the chemical formula (CnH2n+1) and append the halogen for the complete chemical formula.  Write this down in your notebook.Example:  The largest non-halogenated m/z value from Step 2 is 57.  By plugging this into the equation above (CnH2n+1X) and substituting the atomic masses of carbon (12 Da.) and hydrogen (1 Da.) (12n + 1(2n+1) = 57; see Periodic Table for masses), the example alkane formula can be determined to be C4H9X.  The previously determined halogen (iodine) can then be added to this formula for a final identification of C4H9I.", "step_imgs": ["https://cdn.instructables.com/F6H/X8IH/IVO3HWBD/F6HX8IHIVO3HWBD.LARGE.jpg"], "step_title": "Step 5: Step 5:  Identify Remainder of Molecule"}, {"step": 6, "steps_text": "1.      Combine the name from the number of carbons with the halogen prefix from the tables above to give the total chemical name.  Write this down in your notebook.Example:  C4H9I = butane (C4) + iodo- (I) = iodobutane", "step_imgs": ["https://cdn.instructables.com/F64/HUUN/IVO3HWJW/F64HUUNIVO3HWJW.LARGE.jpg"], "step_title": "Step 6: Step 6:  Name the Molecule   "}, {"step": 7, "steps_text": "The National Institute of Standards and Technology (NIST) database contains a collection of standardized mass spectra.  This database can be used to confirm a naming decision made based on a mass spectrum.1.   Simply use a Google search of \u201c[chemical name] NIST EI Spectra\u201d and go to the http://webbook.nist.gov option to check your work.  The two spectra (provided and NIST standard) should match closely.  A close match indicates correct identification.1.       If the major peaks of the NIST mass spectrum do not match your teaching spectra:\u00b7       Recheck your naming of the chemical formula (Step 6)\u00b7       Recheck your identification of major peaks for a missed cluster of peaks (Step 2)Example:  See NIST EI spectra of iodobutane (above).  This closely matches the example spectra in Steps 2 and 3.Further InformationYou now have a basic knowledge of the landmarks and meaning of a simple mass spectrum.  If this topic interests you, consider exploring the following intermediate topics:\u00b7       MS analysis of oxygen (and other non-halogen heteroatom) containing compounds, such as alcohols, ethers and carboxylic acids\u00b7       MS identification of hydrocarbon isomers (molecules with the same chemical formula but containing different bond patterns)\u00b7       MS application to protein analysis (proteomics)The following link will take interested readers to a good intermediate level primer on mass spectrometry (courtesy of Thermo Fisher Scientific):https://www.thermofisher.com/us/en/home/life-science/protein-biology/protein-biology-learning-center/protein-biology-resource-library/pierce-protein-methods/overview-mass-spectrometry.html", "step_imgs": ["https://cdn.instructables.com/F90/5ZJG/IVO3HWO6/F905ZJGIVO3HWO6.LARGE.jpg"], "step_title": "Step 7: Step 7:  Check Your Work"}], "channel": "Science"}, {"category": "technology", "description": "OverviewMass spectrometry (MS) is a proven analytical method used to glean information about the chemical structure of a chemical sample.  MS is applied to fields as disparate as airport security, food and wine analysis, drug and explosives analysis, as well as most fields of chemical and biological research.  MS works by ionizing, or bestowing a net charge, on a sample of molecules and then sorting the ions based on their mass-to-charge ratio.  Since the particle has a one electron negative charge or one proton positive charge, the mass spectrometer can make use of electrical and/or magnetic fields to essentially sort molecules by their masses.  The charged molecules are then guided by electromagnetic attraction or repulsion to a detector mechanism.  A typical mass spectrum (shown below) plots the different mass-to-charge ratios (m/z) against their abundances (occurrence of a certain ion divided by the occurrence of the most plentiful ion) within the sample.Aspiring chemists and biologists, as well as anyone interested in gaining a greater understanding of these fields, can benefit from a greater understanding of MS.  This Instructable will provide a set of instructions for the reading and comprehension of a simple mass spectrum of a halogenated alkane (haloalkane), or a compound containing only hydrogen, carbon and a halogen.  Haloalkanes will be analyzed both because of their wide use as chemical solvents and because understanding of their spectra forms a good baseline for future learning in the MS field.  The above information will be explained in more detail in the coming steps to share insight into how a mass spectrometrist can use a mass spectrum to determine the identity of an unknown chemical sample.Materials:  Four-function calculator, notebook, Periodic Table of Elements (optional)Time Investment:  10 to 15 minutesExperience Required:  High school level knowledge of chemistry (i.e. atoms, elements, Periodic Table)", "title": "How to Read a Simple Mass Spectrum", "url": "https://www.instructables.com/id/How-to-Read-a-Simple-Mass-Spectrum/", "section": "technology", "steps": [{"step": 1, "steps_text": "The molecular ion represents the entire molecule in question, prior to any fragmentation.  Each analyte molecule is given a charge of one, so the molecular ion m/z value represents the molecules total mass. Ionization, specifically electron impact (EI) ionization, is used to remove an electron from an analyte molecule so that it can be analyzed by the electrical and magnetic fields of the mass spectrometer.  EI, however, is a \u201chard\u201d ionization source that can cause molecules to fragment, or break into multiple pieces.  It is therefore important to first identify the molecular (complete) ion.1.       The molecular ion is typically represented on the mass spectrum as the peak with the highest m/z ratio.  Find and record this value in your notebook.Example:  In the EI mass spectrum of water (shown above) a large peak is seen at m/z value 18.  Water has a weight of 18 atomic mass units, or Daltons, so the peak at m/z 18 represents the molecular ion.  The smaller peak at m/z 17 represents a water molecule in which a hydrogen is removed by fragmentation.", "step_imgs": ["https://cdn.instructables.com/F56/X7VB/IVO3HWSQ/F56X7VBIVO3HWSQ.LARGE.jpg"], "step_title": "Step 1: Step 1:  Identify the Molecular Ion"}, {"step": 2, "steps_text": "The molecular ion reflects the complete weight of an analyte molecule, but, considering the fact that there are dozens of stable elements, the molecule\u2019s weight alone will not reveal its identity.  Fortunately, individual molecules have relatively unique EI fragmentation patterns.  The different peaks on a mass spectrum reveal the compounds identity, so, as shown below, a mass spectrometrist should identify all major spectral peaks.  A major peak is the most abundant peak within a cluster of smaller peaks.  For this introductory Instructable, the largest (most abundant) peak in each cluster will represent the entire cluster.1.       Use a highlighter to identify the most abundant peak in each cluster.2.       Determine the numerical m/z value for each of these major peaks and write all of them down in your notebook.-Note that the molecular ion is not necessarily the most abundant peak.  The most abundant peak is, by naming convention, the base peak.Example:  Major peaks at m/z 15, 29, 43, 57, and 184 (see above sample spectrum).", "step_imgs": ["https://cdn.instructables.com/FNI/9L07/IVO3HVWJ/FNI9L07IVO3HVWJ.LARGE.jpg"], "step_title": "Step 2: Step 2:  Identify Major Fragmentation Clusters"}, {"step": 3, "steps_text": "Smaller peaks clustered around each major peak are largely present due to differences in which of the two fragments retains the ion, gain or loss of protons, and naturally occurring elemental isotopes.  For a simple alkane or halogenated alkane the \u2206m (mass difference between two singly charged ions) values will typically involve the gain or loss of about 14 or 15 Daltons between major peak clusters.  These mass differences represent the gain or loss of a methyl (-CH3) or methylene (-CH2-) from the larger ion.  Some long or branched molecules exhibit advanced fragmentation patterns, so you should assume the presence of a halogen only if there is a 17 Dalton or greater \u2206m value between major peaks in a haloalkane.1.       Use the simplified \u201cmass spectrum\u201d from Step 2 to determine the mass difference (\u2206m) between each peak and the next peak on the spectrum.2.       Use your calculator and list of major m/z peaks to determine numerical \u2206m values.  Write these values down in your notebook.Example:  \u2206m values between major peaks (starting from the left, m/z 15) are 14, 14, 14, and 127 Daltons.", "step_imgs": ["https://cdn.instructables.com/F07/X8EF/IVO3HVZ0/F07X8EFIVO3HVZ0.LARGE.jpg"], "step_title": "Step 3: Step 3:  Determine the \u2206m for Each Major Peak"}, {"step": 4, "steps_text": "Mass differences between major peaks will often exceed the 14 or 15 mass units representing a methyl or methylene carbon.  A \u2206m value greater than 16 Daltons indicates the presence of a heteroatom, or atom that is not carbon or hydrogen (for our study, a halogen).  Common halogens (Group 17 on the Periodic Table) include fluorine, chlorine, bromine and iodine.  These can essentially replace one hydrogen-to-carbon bond of an alkane and dramatically alter its chemical and physical properties.  Luckily, singularly halogenated alkanes have easily identifiable mass spectra (see iodobutane spectra below).1.       Check your list of mass differences created in Step 3.  If one of these \u2206m values is larger than 16 mass units, use the Periodic Table to determine which halogen the molecule contains.2.       Use the Periodic Table (or the table above, for convenience) to determine if the halogen is element F, Cl, Br, or I.  Write this halogen down in your notebook.Example:  The \u2206m value of 127 Daltons from Step 3 indicates the presence of an iodine atom in the example spectra (see previous table).", "step_imgs": ["https://cdn.instructables.com/F36/3HW2/IVO3HW0G/F363HW2IVO3HW0G.LARGE.jpg", "https://cdn.instructables.com/FUT/PLS4/IVO3HW6M/FUTPLS4IVO3HW6M.LARGE.jpg"], "step_title": "Step 4: Step 4:  Identify Any Heteroatoms"}, {"step": 5, "steps_text": "Now that the halogen has been identified, the length of the carbon chain itself can be determined.  The general chemical formula of an alkane is CnH2n+2, but, since the halogen effectively replaces one of the iodobutane hydrogens, the modified alkane formula is CnH2n+1X (where X is a halogen).1.       Look to the largest peak on your mass spectrum that does not include the halogen (molecular ion mass minus halogen mass).2.       Use this mass, algebra and the masses of carbon and hydrogen to solve for n (see example).3.       Add this number back into the chemical formula (CnH2n+1) and append the halogen for the complete chemical formula.  Write this down in your notebook.Example:  The largest non-halogenated m/z value from Step 2 is 57.  By plugging this into the equation above (CnH2n+1X) and substituting the atomic masses of carbon (12 Da.) and hydrogen (1 Da.) (12n + 1(2n+1) = 57; see Periodic Table for masses), the example alkane formula can be determined to be C4H9X.  The previously determined halogen (iodine) can then be added to this formula for a final identification of C4H9I.", "step_imgs": ["https://cdn.instructables.com/F6H/X8IH/IVO3HWBD/F6HX8IHIVO3HWBD.LARGE.jpg"], "step_title": "Step 5: Step 5:  Identify Remainder of Molecule"}, {"step": 6, "steps_text": "1.      Combine the name from the number of carbons with the halogen prefix from the tables above to give the total chemical name.  Write this down in your notebook.Example:  C4H9I = butane (C4) + iodo- (I) = iodobutane", "step_imgs": ["https://cdn.instructables.com/F64/HUUN/IVO3HWJW/F64HUUNIVO3HWJW.LARGE.jpg"], "step_title": "Step 6: Step 6:  Name the Molecule   "}, {"step": 7, "steps_text": "The National Institute of Standards and Technology (NIST) database contains a collection of standardized mass spectra.  This database can be used to confirm a naming decision made based on a mass spectrum.1.   Simply use a Google search of \u201c[chemical name] NIST EI Spectra\u201d and go to the http://webbook.nist.gov option to check your work.  The two spectra (provided and NIST standard) should match closely.  A close match indicates correct identification.1.       If the major peaks of the NIST mass spectrum do not match your teaching spectra:\u00b7       Recheck your naming of the chemical formula (Step 6)\u00b7       Recheck your identification of major peaks for a missed cluster of peaks (Step 2)Example:  See NIST EI spectra of iodobutane (above).  This closely matches the example spectra in Steps 2 and 3.Further InformationYou now have a basic knowledge of the landmarks and meaning of a simple mass spectrum.  If this topic interests you, consider exploring the following intermediate topics:\u00b7       MS analysis of oxygen (and other non-halogen heteroatom) containing compounds, such as alcohols, ethers and carboxylic acids\u00b7       MS identification of hydrocarbon isomers (molecules with the same chemical formula but containing different bond patterns)\u00b7       MS application to protein analysis (proteomics)The following link will take interested readers to a good intermediate level primer on mass spectrometry (courtesy of Thermo Fisher Scientific):https://www.thermofisher.com/us/en/home/life-science/protein-biology/protein-biology-learning-center/protein-biology-resource-library/pierce-protein-methods/overview-mass-spectrometry.html", "step_imgs": ["https://cdn.instructables.com/F90/5ZJG/IVO3HWO6/F905ZJGIVO3HWO6.LARGE.jpg"], "step_title": "Step 7: Step 7:  Check Your Work"}], "channel": "Science"}, {"category": "technology", "description": "OverviewMass spectrometry (MS) is a proven analytical method used to glean information about the chemical structure of a chemical sample.  MS is applied to fields as disparate as airport security, food and wine analysis, drug and explosives analysis, as well as most fields of chemical and biological research.  MS works by ionizing, or bestowing a net charge, on a sample of molecules and then sorting the ions based on their mass-to-charge ratio.  Since the particle has a one electron negative charge or one proton positive charge, the mass spectrometer can make use of electrical and/or magnetic fields to essentially sort molecules by their masses.  The charged molecules are then guided by electromagnetic attraction or repulsion to a detector mechanism.  A typical mass spectrum (shown below) plots the different mass-to-charge ratios (m/z) against their abundances (occurrence of a certain ion divided by the occurrence of the most plentiful ion) within the sample.Aspiring chemists and biologists, as well as anyone interested in gaining a greater understanding of these fields, can benefit from a greater understanding of MS.  This Instructable will provide a set of instructions for the reading and comprehension of a simple mass spectrum of a halogenated alkane (haloalkane), or a compound containing only hydrogen, carbon and a halogen.  Haloalkanes will be analyzed both because of their wide use as chemical solvents and because understanding of their spectra forms a good baseline for future learning in the MS field.  The above information will be explained in more detail in the coming steps to share insight into how a mass spectrometrist can use a mass spectrum to determine the identity of an unknown chemical sample.Materials:  Four-function calculator, notebook, Periodic Table of Elements (optional)Time Investment:  10 to 15 minutesExperience Required:  High school level knowledge of chemistry (i.e. atoms, elements, Periodic Table)", "title": "How to Read a Simple Mass Spectrum", "url": "https://www.instructables.com/id/How-to-Read-a-Simple-Mass-Spectrum/", "section": "technology", "steps": [{"step": 1, "steps_text": "The molecular ion represents the entire molecule in question, prior to any fragmentation.  Each analyte molecule is given a charge of one, so the molecular ion m/z value represents the molecules total mass. Ionization, specifically electron impact (EI) ionization, is used to remove an electron from an analyte molecule so that it can be analyzed by the electrical and magnetic fields of the mass spectrometer.  EI, however, is a \u201chard\u201d ionization source that can cause molecules to fragment, or break into multiple pieces.  It is therefore important to first identify the molecular (complete) ion.1.       The molecular ion is typically represented on the mass spectrum as the peak with the highest m/z ratio.  Find and record this value in your notebook.Example:  In the EI mass spectrum of water (shown above) a large peak is seen at m/z value 18.  Water has a weight of 18 atomic mass units, or Daltons, so the peak at m/z 18 represents the molecular ion.  The smaller peak at m/z 17 represents a water molecule in which a hydrogen is removed by fragmentation.", "step_imgs": ["https://cdn.instructables.com/F56/X7VB/IVO3HWSQ/F56X7VBIVO3HWSQ.LARGE.jpg"], "step_title": "Step 1: Step 1:  Identify the Molecular Ion"}, {"step": 2, "steps_text": "The molecular ion reflects the complete weight of an analyte molecule, but, considering the fact that there are dozens of stable elements, the molecule\u2019s weight alone will not reveal its identity.  Fortunately, individual molecules have relatively unique EI fragmentation patterns.  The different peaks on a mass spectrum reveal the compounds identity, so, as shown below, a mass spectrometrist should identify all major spectral peaks.  A major peak is the most abundant peak within a cluster of smaller peaks.  For this introductory Instructable, the largest (most abundant) peak in each cluster will represent the entire cluster.1.       Use a highlighter to identify the most abundant peak in each cluster.2.       Determine the numerical m/z value for each of these major peaks and write all of them down in your notebook.-Note that the molecular ion is not necessarily the most abundant peak.  The most abundant peak is, by naming convention, the base peak.Example:  Major peaks at m/z 15, 29, 43, 57, and 184 (see above sample spectrum).", "step_imgs": ["https://cdn.instructables.com/FNI/9L07/IVO3HVWJ/FNI9L07IVO3HVWJ.LARGE.jpg"], "step_title": "Step 2: Step 2:  Identify Major Fragmentation Clusters"}, {"step": 3, "steps_text": "Smaller peaks clustered around each major peak are largely present due to differences in which of the two fragments retains the ion, gain or loss of protons, and naturally occurring elemental isotopes.  For a simple alkane or halogenated alkane the \u2206m (mass difference between two singly charged ions) values will typically involve the gain or loss of about 14 or 15 Daltons between major peak clusters.  These mass differences represent the gain or loss of a methyl (-CH3) or methylene (-CH2-) from the larger ion.  Some long or branched molecules exhibit advanced fragmentation patterns, so you should assume the presence of a halogen only if there is a 17 Dalton or greater \u2206m value between major peaks in a haloalkane.1.       Use the simplified \u201cmass spectrum\u201d from Step 2 to determine the mass difference (\u2206m) between each peak and the next peak on the spectrum.2.       Use your calculator and list of major m/z peaks to determine numerical \u2206m values.  Write these values down in your notebook.Example:  \u2206m values between major peaks (starting from the left, m/z 15) are 14, 14, 14, and 127 Daltons.", "step_imgs": ["https://cdn.instructables.com/F07/X8EF/IVO3HVZ0/F07X8EFIVO3HVZ0.LARGE.jpg"], "step_title": "Step 3: Step 3:  Determine the \u2206m for Each Major Peak"}, {"step": 4, "steps_text": "Mass differences between major peaks will often exceed the 14 or 15 mass units representing a methyl or methylene carbon.  A \u2206m value greater than 16 Daltons indicates the presence of a heteroatom, or atom that is not carbon or hydrogen (for our study, a halogen).  Common halogens (Group 17 on the Periodic Table) include fluorine, chlorine, bromine and iodine.  These can essentially replace one hydrogen-to-carbon bond of an alkane and dramatically alter its chemical and physical properties.  Luckily, singularly halogenated alkanes have easily identifiable mass spectra (see iodobutane spectra below).1.       Check your list of mass differences created in Step 3.  If one of these \u2206m values is larger than 16 mass units, use the Periodic Table to determine which halogen the molecule contains.2.       Use the Periodic Table (or the table above, for convenience) to determine if the halogen is element F, Cl, Br, or I.  Write this halogen down in your notebook.Example:  The \u2206m value of 127 Daltons from Step 3 indicates the presence of an iodine atom in the example spectra (see previous table).", "step_imgs": ["https://cdn.instructables.com/F36/3HW2/IVO3HW0G/F363HW2IVO3HW0G.LARGE.jpg", "https://cdn.instructables.com/FUT/PLS4/IVO3HW6M/FUTPLS4IVO3HW6M.LARGE.jpg"], "step_title": "Step 4: Step 4:  Identify Any Heteroatoms"}, {"step": 5, "steps_text": "Now that the halogen has been identified, the length of the carbon chain itself can be determined.  The general chemical formula of an alkane is CnH2n+2, but, since the halogen effectively replaces one of the iodobutane hydrogens, the modified alkane formula is CnH2n+1X (where X is a halogen).1.       Look to the largest peak on your mass spectrum that does not include the halogen (molecular ion mass minus halogen mass).2.       Use this mass, algebra and the masses of carbon and hydrogen to solve for n (see example).3.       Add this number back into the chemical formula (CnH2n+1) and append the halogen for the complete chemical formula.  Write this down in your notebook.Example:  The largest non-halogenated m/z value from Step 2 is 57.  By plugging this into the equation above (CnH2n+1X) and substituting the atomic masses of carbon (12 Da.) and hydrogen (1 Da.) (12n + 1(2n+1) = 57; see Periodic Table for masses), the example alkane formula can be determined to be C4H9X.  The previously determined halogen (iodine) can then be added to this formula for a final identification of C4H9I.", "step_imgs": ["https://cdn.instructables.com/F6H/X8IH/IVO3HWBD/F6HX8IHIVO3HWBD.LARGE.jpg"], "step_title": "Step 5: Step 5:  Identify Remainder of Molecule"}, {"step": 6, "steps_text": "1.      Combine the name from the number of carbons with the halogen prefix from the tables above to give the total chemical name.  Write this down in your notebook.Example:  C4H9I = butane (C4) + iodo- (I) = iodobutane", "step_imgs": ["https://cdn.instructables.com/F64/HUUN/IVO3HWJW/F64HUUNIVO3HWJW.LARGE.jpg"], "step_title": "Step 6: Step 6:  Name the Molecule   "}, {"step": 7, "steps_text": "The National Institute of Standards and Technology (NIST) database contains a collection of standardized mass spectra.  This database can be used to confirm a naming decision made based on a mass spectrum.1.   Simply use a Google search of \u201c[chemical name] NIST EI Spectra\u201d and go to the http://webbook.nist.gov option to check your work.  The two spectra (provided and NIST standard) should match closely.  A close match indicates correct identification.1.       If the major peaks of the NIST mass spectrum do not match your teaching spectra:\u00b7       Recheck your naming of the chemical formula (Step 6)\u00b7       Recheck your identification of major peaks for a missed cluster of peaks (Step 2)Example:  See NIST EI spectra of iodobutane (above).  This closely matches the example spectra in Steps 2 and 3.Further InformationYou now have a basic knowledge of the landmarks and meaning of a simple mass spectrum.  If this topic interests you, consider exploring the following intermediate topics:\u00b7       MS analysis of oxygen (and other non-halogen heteroatom) containing compounds, such as alcohols, ethers and carboxylic acids\u00b7       MS identification of hydrocarbon isomers (molecules with the same chemical formula but containing different bond patterns)\u00b7       MS application to protein analysis (proteomics)The following link will take interested readers to a good intermediate level primer on mass spectrometry (courtesy of Thermo Fisher Scientific):https://www.thermofisher.com/us/en/home/life-science/protein-biology/protein-biology-learning-center/protein-biology-resource-library/pierce-protein-methods/overview-mass-spectrometry.html", "step_imgs": ["https://cdn.instructables.com/F90/5ZJG/IVO3HWO6/F905ZJGIVO3HWO6.LARGE.jpg"], "step_title": "Step 7: Step 7:  Check Your Work"}], "channel": "Science"}, {"category": "technology", "description": "Understanding Cumulative Frequency and Cumulate Frequency CurvesCumulative frequency is a concept that is used in multiple disciplines, including research psychology, to help data analysts determine the total frequency of some sort of occurrence up to a given value. Finding cumulative frequency would be useful, for example, if a researcher collected the IQ scores of a group of college students and wanted to know how often students earned a score of 119 or lower.Cumulative frequency can be graphically represented in several ways, but is most commonly shown through a cumulative frequency curve. Cumulative frequency curves look very similar to line graphs, and help analysts visualize information and predict future trends in data.Things You'll Need:Writing utensil Calculator (optional) Paper Ruler or other straight edgeDataset", "title": "How to Calculate Cumulative Frequency and Draw a Cumulative Frequency Curve", "url": "https://www.instructables.com/id/How-to-Calculate-Cumulative-Frequency-and-Draw-a-C/", "section": "technology", "steps": [{"step": 1, "steps_text": "This will help you organize your frequency information. You will need to:Identify your measurement interval categories.Place frequency data into the cells below the appropriate intervals.Let\u2019s say, for example, you wanted to input frequency information about the amount of sleep 15 of your friends got last night into a table. Your friends report that they slept 6, 4, 11, 8, 9, 3, 5, 6, 6, 7, 8, 4, 2, 7, and 4 hours. Look to Figure 1 to see how these data would be represented in a frequency table.", "step_imgs": ["https://cdn.instructables.com/F9J/6KTI/INETULWA/F9J6KTIINETULWA.LARGE.jpg"], "step_title": "Step 1: Place Frequency Data Into a Table"}, {"step": 2, "steps_text": "To find the cumulative frequency of each interval, locate the frequency score of the interval and add to it all frequency scores falling before it.Place cumulative frequency data into a row of cells below the frequency cells.Look to Figure 2 to see how the data from the example presented in Step 1 would look in a cumulative frequency table.", "step_imgs": ["https://cdn.instructables.com/F9F/TEMK/INETULWB/F9FTEMKINETULWB.LARGE.jpg"], "step_title": "Step 2: Find Cumulative Frequency of Each Interval and Input It Into a Table"}, {"step": 3, "steps_text": "Draw one vertical and one horizontal axis using your ruler or other straight edge.Label the vertical axis \"Cumulative Frequency\" and section it off into evenly spaced segments. The scale you use to section off the axis will depend on the range of your frequency data, but will always begin with 0. Label the horizontal axis as the measurement you're taking and section it off into segments that reflect your measurement intervals. Each segment should be labeled in accordance with the higher number of the interval being represented.Figure 3 shows how a plane for the sleep example would be drawn.", "step_imgs": ["https://cdn.instructables.com/FM1/W1O4/INI7T8GP/FM1W1O4INI7T8GP.LARGE.jpg"], "step_title": "Step 3: Set Up Your Plane for the Cumulative Frequency Curve"}, {"step": 4, "steps_text": "Plot each cumulative frequency data point on your plane with a small \"x\". Connect consecutive points together with straight lines with the help of your ruler or other straight edge.Figure 4 shows how the cumulative frequency data points would be plotted and connected for the sleep example.", "step_imgs": ["https://cdn.instructables.com/FNF/1LEF/INI7T8GS/FNF1LEFINI7T8GS.LARGE.jpg"], "step_title": "Step 4: Plot and Connect Cumulative Frequency Data Points"}, {"step": 5, "steps_text": "Use the cumulative frequency table and curve to learn more about your data.Going back to the sleep example, you may wonder how many of your friends slept 7 hours or less last night. To find out, you should look to the cumulative frequency number under the \u201c6-7 hours\u201d category of your cumulative frequency table. This will reveal that 11 of your friends got 7 hours or less of sleep last night.Looking at your cumulative frequency curve will help you visualize and notice new things about your data. In the sleep example, you may notice a sharp increase from the 3-hour mark to the 7-hour mark. This demonstrates that the majority of your friends got 3 to 7 hours of sleep last night.", "step_imgs": [], "step_title": "Step 5: Interpret Your Cumulative Frequency Table and Curve"}], "channel": "Science"}, {"category": "technology", "description": "Understanding Cumulative Frequency and Cumulate Frequency CurvesCumulative frequency is a concept that is used in multiple disciplines, including research psychology, to help data analysts determine the total frequency of some sort of occurrence up to a given value. Finding cumulative frequency would be useful, for example, if a researcher collected the IQ scores of a group of college students and wanted to know how often students earned a score of 119 or lower.Cumulative frequency can be graphically represented in several ways, but is most commonly shown through a cumulative frequency curve. Cumulative frequency curves look very similar to line graphs, and help analysts visualize information and predict future trends in data.Things You'll Need:Writing utensil Calculator (optional) Paper Ruler or other straight edgeDataset", "title": "How to Calculate Cumulative Frequency and Draw a Cumulative Frequency Curve", "url": "https://www.instructables.com/id/How-to-Calculate-Cumulative-Frequency-and-Draw-a-C/", "section": "technology", "steps": [{"step": 1, "steps_text": "This will help you organize your frequency information. You will need to:Identify your measurement interval categories.Place frequency data into the cells below the appropriate intervals.Let\u2019s say, for example, you wanted to input frequency information about the amount of sleep 15 of your friends got last night into a table. Your friends report that they slept 6, 4, 11, 8, 9, 3, 5, 6, 6, 7, 8, 4, 2, 7, and 4 hours. Look to Figure 1 to see how these data would be represented in a frequency table.", "step_imgs": ["https://cdn.instructables.com/F9J/6KTI/INETULWA/F9J6KTIINETULWA.LARGE.jpg"], "step_title": "Step 1: Place Frequency Data Into a Table"}, {"step": 2, "steps_text": "To find the cumulative frequency of each interval, locate the frequency score of the interval and add to it all frequency scores falling before it.Place cumulative frequency data into a row of cells below the frequency cells.Look to Figure 2 to see how the data from the example presented in Step 1 would look in a cumulative frequency table.", "step_imgs": ["https://cdn.instructables.com/F9F/TEMK/INETULWB/F9FTEMKINETULWB.LARGE.jpg"], "step_title": "Step 2: Find Cumulative Frequency of Each Interval and Input It Into a Table"}, {"step": 3, "steps_text": "Draw one vertical and one horizontal axis using your ruler or other straight edge.Label the vertical axis \"Cumulative Frequency\" and section it off into evenly spaced segments. The scale you use to section off the axis will depend on the range of your frequency data, but will always begin with 0. Label the horizontal axis as the measurement you're taking and section it off into segments that reflect your measurement intervals. Each segment should be labeled in accordance with the higher number of the interval being represented.Figure 3 shows how a plane for the sleep example would be drawn.", "step_imgs": ["https://cdn.instructables.com/FM1/W1O4/INI7T8GP/FM1W1O4INI7T8GP.LARGE.jpg"], "step_title": "Step 3: Set Up Your Plane for the Cumulative Frequency Curve"}, {"step": 4, "steps_text": "Plot each cumulative frequency data point on your plane with a small \"x\". Connect consecutive points together with straight lines with the help of your ruler or other straight edge.Figure 4 shows how the cumulative frequency data points would be plotted and connected for the sleep example.", "step_imgs": ["https://cdn.instructables.com/FNF/1LEF/INI7T8GS/FNF1LEFINI7T8GS.LARGE.jpg"], "step_title": "Step 4: Plot and Connect Cumulative Frequency Data Points"}, {"step": 5, "steps_text": "Use the cumulative frequency table and curve to learn more about your data.Going back to the sleep example, you may wonder how many of your friends slept 7 hours or less last night. To find out, you should look to the cumulative frequency number under the \u201c6-7 hours\u201d category of your cumulative frequency table. This will reveal that 11 of your friends got 7 hours or less of sleep last night.Looking at your cumulative frequency curve will help you visualize and notice new things about your data. In the sleep example, you may notice a sharp increase from the 3-hour mark to the 7-hour mark. This demonstrates that the majority of your friends got 3 to 7 hours of sleep last night.", "step_imgs": [], "step_title": "Step 5: Interpret Your Cumulative Frequency Table and Curve"}], "channel": "Science"}, {"category": "technology", "description": "This instructable will teach you how to write a simple yet proper lab report for a college level General Chemistry lab course. In order to complete this lab, you will need access to a Microsoft Word program; any versions will work. This is a general guideline, some teachers may have other requirements.\u00a0", "title": "How to Write a General Chemistry Lab Report", "url": "https://www.instructables.com/id/How-to-Write-a-General-Chemistry-Lab-Report/", "section": "technology", "steps": [{"step": 1, "steps_text": "All parts of the lab report should be in past-tense and no personal pronouns should be used. For example, no \"I's\" or \"we's.\" Font is of personal preference but a clearly readable font such as Times New Roman, Arial, or Cambria is ideal. Font size is of personal preference but 11 to 14 is reasonable.\u00a0", "step_imgs": ["https://cdn.instructables.com/FKK/UUPQ/HTFYE8ZL/FKKUUPQHTFYE8ZL.LARGE.jpg"], "step_title": "Step 1: "}, {"step": 2, "steps_text": "First, you will construct the title page. On the upper right hand side of the page, you will want to include your name, your class information, the date of submission, and your team members names. Each one of these points should be on a separate line.", "step_imgs": ["https://cdn.instructables.com/FAT/C3CI/HTG5GZDX/FATC3CIHTG5GZDX.LARGE.jpg"], "step_title": "Step 2: "}, {"step": 3, "steps_text": "The second part of the title page is the title in the middle of the page. \u00a0All of the following points should be centered in the middle of the page and on separate lines. This should include the class title, the title of the experiment, and the titles of the parts within the experiment. The semester is optional. This is everything that will be included on the title page.\u00a0", "step_imgs": ["https://cdn.instructables.com/FPD/R94V/HTG5GZGU/FPDR94VHTG5GZGU.LARGE.jpg"], "step_title": "Step 3: "}, {"step": 4, "steps_text": "On the next page will be the introduction. The heading should read \"Introduction.\" On the next line you will write a brief paragraph, no more than 5 sentences, to introduce the lab to the reader. The main methods used in the experiment and the main goal of the experiment should be included. Any equations, values, or terms necessary for completion of the lab should be defined in the introduction.\u00a0", "step_imgs": ["https://cdn.instructables.com/F68/706V/HTG5GZI1/F68706VHTG5GZI1.LARGE.jpg"], "step_title": "Step 4: "}, {"step": 5, "steps_text": "The next part of the lab report will be the body. The body of the lab report should be divided by the parts of the lab. Three major components should be included under each part of the lab; the procedure, the data, and observations. Each component will be discussed in more detail in the following steps.\u00a0", "step_imgs": ["https://cdn.instructables.com/FXQ/6MX8/HTG5GZOM/FXQ6MX8HTG5GZOM.LARGE.jpg"], "step_title": "Step 5: "}, {"step": 6, "steps_text": "The parts of the lab should be a clear heading, such as \"Part A\" and the procedure should be a clear heading under each part as well. You will need to include all steps of the lab in the report. Each step should be numbered and the numbers should correspond to the numbers in the lab. Each step should not be word for word from the lab but should be a simplified, summary of the step. Try to keep each step as a one sentence direction.\u00a0", "step_imgs": ["https://cdn.instructables.com/F9O/D0FG/HTGFBKTM/F9OD0FGHTGFBKTM.LARGE.jpg"], "step_title": "Step 6: "}, {"step": 7, "steps_text": "The next part of the body is the data. This should have a clear heading as well. The data should include all values, calculations, tables, and/or graphs that are necessary for the lab. Each lab will vary with how much and what type of data to be included. All values should include units and all calculations should have work shown. Tables should include labels and graphs should always have a title and labeled axes.\u00a0", "step_imgs": ["https://cdn.instructables.com/F9T/ECTA/HTG5GZW4/F9TECTAHTG5GZW4.LARGE.jpg"], "step_title": "Step 7: "}, {"step": 8, "steps_text": "The last part of the body is the observations. Observations include all physical, notable changes occurring throughout the experiment. Initial and final observations are also necessary for some labs. Observations could be included in the data if it is presented in a table form as in this example.\u00a0", "step_imgs": ["https://cdn.instructables.com/FSP/LV4V/HTFYECNB/FSPLV4VHTFYECNB.LARGE.jpg"], "step_title": "Step 8: "}, {"step": 9, "steps_text": "You will need to repeat the procedures, data, and observations for all other parts of the lab as well.\u00a0", "step_imgs": ["https://cdn.instructables.com/FKN/YMM9/HTG5GZYU/FKNYMM9HTG5GZYU.LARGE.jpg"], "step_title": "Step 9: "}, {"step": 10, "steps_text": "After the body is the answers to the questions within the labs. Most teachers don't require the questions to be written in the lab report but just detailed answers to all the questions.\u00a0", "step_imgs": ["https://cdn.instructables.com/FOL/0EDY/HTGFBKXG/FOL0EDYHTGFBKXG.LARGE.jpg"], "step_title": "Step 10: "}, {"step": 11, "steps_text": "The last part of the lab is the conclusion. The conclusion should include the result to the main goal stated in the introduction. Any significant values that were obtained and/or percent errors correlated with the values should be included. Any other significant concepts obtained from the completion of the lab should be included in the conclusion. Then, your lab report is complete!", "step_imgs": ["https://cdn.instructables.com/FD9/53YU/HTFYED1A/FD953YUHTFYED1A.LARGE.jpg", "https://cdn.instructables.com/FIW/P7IQ/HTKXZ7WB/FIWP7IQHTKXZ7WB.LARGE.jpg"], "step_title": "Step 11: "}], "channel": "Computers"}, {"category": "technology", "description": "This instructable will teach you how to write a simple yet proper lab report for a college level General Chemistry lab course. In order to complete this lab, you will need access to a Microsoft Word program; any versions will work. This is a general guideline, some teachers may have other requirements.\u00a0", "title": "How to Write a General Chemistry Lab Report", "url": "https://www.instructables.com/id/How-to-Write-a-General-Chemistry-Lab-Report/", "section": "technology", "steps": [{"step": 1, "steps_text": "All parts of the lab report should be in past-tense and no personal pronouns should be used. For example, no \"I's\" or \"we's.\" Font is of personal preference but a clearly readable font such as Times New Roman, Arial, or Cambria is ideal. Font size is of personal preference but 11 to 14 is reasonable.\u00a0", "step_imgs": ["https://cdn.instructables.com/FKK/UUPQ/HTFYE8ZL/FKKUUPQHTFYE8ZL.LARGE.jpg"], "step_title": "Step 1: "}, {"step": 2, "steps_text": "First, you will construct the title page. On the upper right hand side of the page, you will want to include your name, your class information, the date of submission, and your team members names. Each one of these points should be on a separate line.", "step_imgs": ["https://cdn.instructables.com/FAT/C3CI/HTG5GZDX/FATC3CIHTG5GZDX.LARGE.jpg"], "step_title": "Step 2: "}, {"step": 3, "steps_text": "The second part of the title page is the title in the middle of the page. \u00a0All of the following points should be centered in the middle of the page and on separate lines. This should include the class title, the title of the experiment, and the titles of the parts within the experiment. The semester is optional. This is everything that will be included on the title page.\u00a0", "step_imgs": ["https://cdn.instructables.com/FPD/R94V/HTG5GZGU/FPDR94VHTG5GZGU.LARGE.jpg"], "step_title": "Step 3: "}, {"step": 4, "steps_text": "On the next page will be the introduction. The heading should read \"Introduction.\" On the next line you will write a brief paragraph, no more than 5 sentences, to introduce the lab to the reader. The main methods used in the experiment and the main goal of the experiment should be included. Any equations, values, or terms necessary for completion of the lab should be defined in the introduction.\u00a0", "step_imgs": ["https://cdn.instructables.com/F68/706V/HTG5GZI1/F68706VHTG5GZI1.LARGE.jpg"], "step_title": "Step 4: "}, {"step": 5, "steps_text": "The next part of the lab report will be the body. The body of the lab report should be divided by the parts of the lab. Three major components should be included under each part of the lab; the procedure, the data, and observations. Each component will be discussed in more detail in the following steps.\u00a0", "step_imgs": ["https://cdn.instructables.com/FXQ/6MX8/HTG5GZOM/FXQ6MX8HTG5GZOM.LARGE.jpg"], "step_title": "Step 5: "}, {"step": 6, "steps_text": "The parts of the lab should be a clear heading, such as \"Part A\" and the procedure should be a clear heading under each part as well. You will need to include all steps of the lab in the report. Each step should be numbered and the numbers should correspond to the numbers in the lab. Each step should not be word for word from the lab but should be a simplified, summary of the step. Try to keep each step as a one sentence direction.\u00a0", "step_imgs": ["https://cdn.instructables.com/F9O/D0FG/HTGFBKTM/F9OD0FGHTGFBKTM.LARGE.jpg"], "step_title": "Step 6: "}, {"step": 7, "steps_text": "The next part of the body is the data. This should have a clear heading as well. The data should include all values, calculations, tables, and/or graphs that are necessary for the lab. Each lab will vary with how much and what type of data to be included. All values should include units and all calculations should have work shown. Tables should include labels and graphs should always have a title and labeled axes.\u00a0", "step_imgs": ["https://cdn.instructables.com/F9T/ECTA/HTG5GZW4/F9TECTAHTG5GZW4.LARGE.jpg"], "step_title": "Step 7: "}, {"step": 8, "steps_text": "The last part of the body is the observations. Observations include all physical, notable changes occurring throughout the experiment. Initial and final observations are also necessary for some labs. Observations could be included in the data if it is presented in a table form as in this example.\u00a0", "step_imgs": ["https://cdn.instructables.com/FSP/LV4V/HTFYECNB/FSPLV4VHTFYECNB.LARGE.jpg"], "step_title": "Step 8: "}, {"step": 9, "steps_text": "You will need to repeat the procedures, data, and observations for all other parts of the lab as well.\u00a0", "step_imgs": ["https://cdn.instructables.com/FKN/YMM9/HTG5GZYU/FKNYMM9HTG5GZYU.LARGE.jpg"], "step_title": "Step 9: "}, {"step": 10, "steps_text": "After the body is the answers to the questions within the labs. Most teachers don't require the questions to be written in the lab report but just detailed answers to all the questions.\u00a0", "step_imgs": ["https://cdn.instructables.com/FOL/0EDY/HTGFBKXG/FOL0EDYHTGFBKXG.LARGE.jpg"], "step_title": "Step 10: "}, {"step": 11, "steps_text": "The last part of the lab is the conclusion. The conclusion should include the result to the main goal stated in the introduction. Any significant values that were obtained and/or percent errors correlated with the values should be included. Any other significant concepts obtained from the completion of the lab should be included in the conclusion. Then, your lab report is complete!", "step_imgs": ["https://cdn.instructables.com/FD9/53YU/HTFYED1A/FD953YUHTFYED1A.LARGE.jpg", "https://cdn.instructables.com/FIW/P7IQ/HTKXZ7WB/FIWP7IQHTKXZ7WB.LARGE.jpg"], "step_title": "Step 11: "}], "channel": "Computers"}, {"category": "technology", "description": "This instructable will teach you how to write a simple yet proper lab report for a college level General Chemistry lab course. In order to complete this lab, you will need access to a Microsoft Word program; any versions will work. This is a general guideline, some teachers may have other requirements.\u00a0", "title": "How to Write a General Chemistry Lab Report", "url": "https://www.instructables.com/id/How-to-Write-a-General-Chemistry-Lab-Report/", "section": "technology", "steps": [{"step": 1, "steps_text": "All parts of the lab report should be in past-tense and no personal pronouns should be used. For example, no \"I's\" or \"we's.\" Font is of personal preference but a clearly readable font such as Times New Roman, Arial, or Cambria is ideal. Font size is of personal preference but 11 to 14 is reasonable.\u00a0", "step_imgs": ["https://cdn.instructables.com/FKK/UUPQ/HTFYE8ZL/FKKUUPQHTFYE8ZL.LARGE.jpg"], "step_title": "Step 1: "}, {"step": 2, "steps_text": "First, you will construct the title page. On the upper right hand side of the page, you will want to include your name, your class information, the date of submission, and your team members names. Each one of these points should be on a separate line.", "step_imgs": ["https://cdn.instructables.com/FAT/C3CI/HTG5GZDX/FATC3CIHTG5GZDX.LARGE.jpg"], "step_title": "Step 2: "}, {"step": 3, "steps_text": "The second part of the title page is the title in the middle of the page. \u00a0All of the following points should be centered in the middle of the page and on separate lines. This should include the class title, the title of the experiment, and the titles of the parts within the experiment. The semester is optional. This is everything that will be included on the title page.\u00a0", "step_imgs": ["https://cdn.instructables.com/FPD/R94V/HTG5GZGU/FPDR94VHTG5GZGU.LARGE.jpg"], "step_title": "Step 3: "}, {"step": 4, "steps_text": "On the next page will be the introduction. The heading should read \"Introduction.\" On the next line you will write a brief paragraph, no more than 5 sentences, to introduce the lab to the reader. The main methods used in the experiment and the main goal of the experiment should be included. Any equations, values, or terms necessary for completion of the lab should be defined in the introduction.\u00a0", "step_imgs": ["https://cdn.instructables.com/F68/706V/HTG5GZI1/F68706VHTG5GZI1.LARGE.jpg"], "step_title": "Step 4: "}, {"step": 5, "steps_text": "The next part of the lab report will be the body. The body of the lab report should be divided by the parts of the lab. Three major components should be included under each part of the lab; the procedure, the data, and observations. Each component will be discussed in more detail in the following steps.\u00a0", "step_imgs": ["https://cdn.instructables.com/FXQ/6MX8/HTG5GZOM/FXQ6MX8HTG5GZOM.LARGE.jpg"], "step_title": "Step 5: "}, {"step": 6, "steps_text": "The parts of the lab should be a clear heading, such as \"Part A\" and the procedure should be a clear heading under each part as well. You will need to include all steps of the lab in the report. Each step should be numbered and the numbers should correspond to the numbers in the lab. Each step should not be word for word from the lab but should be a simplified, summary of the step. Try to keep each step as a one sentence direction.\u00a0", "step_imgs": ["https://cdn.instructables.com/F9O/D0FG/HTGFBKTM/F9OD0FGHTGFBKTM.LARGE.jpg"], "step_title": "Step 6: "}, {"step": 7, "steps_text": "The next part of the body is the data. This should have a clear heading as well. The data should include all values, calculations, tables, and/or graphs that are necessary for the lab. Each lab will vary with how much and what type of data to be included. All values should include units and all calculations should have work shown. Tables should include labels and graphs should always have a title and labeled axes.\u00a0", "step_imgs": ["https://cdn.instructables.com/F9T/ECTA/HTG5GZW4/F9TECTAHTG5GZW4.LARGE.jpg"], "step_title": "Step 7: "}, {"step": 8, "steps_text": "The last part of the body is the observations. Observations include all physical, notable changes occurring throughout the experiment. Initial and final observations are also necessary for some labs. Observations could be included in the data if it is presented in a table form as in this example.\u00a0", "step_imgs": ["https://cdn.instructables.com/FSP/LV4V/HTFYECNB/FSPLV4VHTFYECNB.LARGE.jpg"], "step_title": "Step 8: "}, {"step": 9, "steps_text": "You will need to repeat the procedures, data, and observations for all other parts of the lab as well.\u00a0", "step_imgs": ["https://cdn.instructables.com/FKN/YMM9/HTG5GZYU/FKNYMM9HTG5GZYU.LARGE.jpg"], "step_title": "Step 9: "}, {"step": 10, "steps_text": "After the body is the answers to the questions within the labs. Most teachers don't require the questions to be written in the lab report but just detailed answers to all the questions.\u00a0", "step_imgs": ["https://cdn.instructables.com/FOL/0EDY/HTGFBKXG/FOL0EDYHTGFBKXG.LARGE.jpg"], "step_title": "Step 10: "}, {"step": 11, "steps_text": "The last part of the lab is the conclusion. The conclusion should include the result to the main goal stated in the introduction. Any significant values that were obtained and/or percent errors correlated with the values should be included. Any other significant concepts obtained from the completion of the lab should be included in the conclusion. Then, your lab report is complete!", "step_imgs": ["https://cdn.instructables.com/FD9/53YU/HTFYED1A/FD953YUHTFYED1A.LARGE.jpg", "https://cdn.instructables.com/FIW/P7IQ/HTKXZ7WB/FIWP7IQHTKXZ7WB.LARGE.jpg"], "step_title": "Step 11: "}], "channel": "Computers"}, {"category": "technology", "description": "This instructable will teach you how to write a simple yet proper lab report for a college level General Chemistry lab course. In order to complete this lab, you will need access to a Microsoft Word program; any versions will work. This is a general guideline, some teachers may have other requirements.\u00a0", "title": "How to Write a General Chemistry Lab Report", "url": "https://www.instructables.com/id/How-to-Write-a-General-Chemistry-Lab-Report/", "section": "technology", "steps": [{"step": 1, "steps_text": "All parts of the lab report should be in past-tense and no personal pronouns should be used. For example, no \"I's\" or \"we's.\" Font is of personal preference but a clearly readable font such as Times New Roman, Arial, or Cambria is ideal. Font size is of personal preference but 11 to 14 is reasonable.\u00a0", "step_imgs": ["https://cdn.instructables.com/FKK/UUPQ/HTFYE8ZL/FKKUUPQHTFYE8ZL.LARGE.jpg"], "step_title": "Step 1: "}, {"step": 2, "steps_text": "First, you will construct the title page. On the upper right hand side of the page, you will want to include your name, your class information, the date of submission, and your team members names. Each one of these points should be on a separate line.", "step_imgs": ["https://cdn.instructables.com/FAT/C3CI/HTG5GZDX/FATC3CIHTG5GZDX.LARGE.jpg"], "step_title": "Step 2: "}, {"step": 3, "steps_text": "The second part of the title page is the title in the middle of the page. \u00a0All of the following points should be centered in the middle of the page and on separate lines. This should include the class title, the title of the experiment, and the titles of the parts within the experiment. The semester is optional. This is everything that will be included on the title page.\u00a0", "step_imgs": ["https://cdn.instructables.com/FPD/R94V/HTG5GZGU/FPDR94VHTG5GZGU.LARGE.jpg"], "step_title": "Step 3: "}, {"step": 4, "steps_text": "On the next page will be the introduction. The heading should read \"Introduction.\" On the next line you will write a brief paragraph, no more than 5 sentences, to introduce the lab to the reader. The main methods used in the experiment and the main goal of the experiment should be included. Any equations, values, or terms necessary for completion of the lab should be defined in the introduction.\u00a0", "step_imgs": ["https://cdn.instructables.com/F68/706V/HTG5GZI1/F68706VHTG5GZI1.LARGE.jpg"], "step_title": "Step 4: "}, {"step": 5, "steps_text": "The next part of the lab report will be the body. The body of the lab report should be divided by the parts of the lab. Three major components should be included under each part of the lab; the procedure, the data, and observations. Each component will be discussed in more detail in the following steps.\u00a0", "step_imgs": ["https://cdn.instructables.com/FXQ/6MX8/HTG5GZOM/FXQ6MX8HTG5GZOM.LARGE.jpg"], "step_title": "Step 5: "}, {"step": 6, "steps_text": "The parts of the lab should be a clear heading, such as \"Part A\" and the procedure should be a clear heading under each part as well. You will need to include all steps of the lab in the report. Each step should be numbered and the numbers should correspond to the numbers in the lab. Each step should not be word for word from the lab but should be a simplified, summary of the step. Try to keep each step as a one sentence direction.\u00a0", "step_imgs": ["https://cdn.instructables.com/F9O/D0FG/HTGFBKTM/F9OD0FGHTGFBKTM.LARGE.jpg"], "step_title": "Step 6: "}, {"step": 7, "steps_text": "The next part of the body is the data. This should have a clear heading as well. The data should include all values, calculations, tables, and/or graphs that are necessary for the lab. Each lab will vary with how much and what type of data to be included. All values should include units and all calculations should have work shown. Tables should include labels and graphs should always have a title and labeled axes.\u00a0", "step_imgs": ["https://cdn.instructables.com/F9T/ECTA/HTG5GZW4/F9TECTAHTG5GZW4.LARGE.jpg"], "step_title": "Step 7: "}, {"step": 8, "steps_text": "The last part of the body is the observations. Observations include all physical, notable changes occurring throughout the experiment. Initial and final observations are also necessary for some labs. Observations could be included in the data if it is presented in a table form as in this example.\u00a0", "step_imgs": ["https://cdn.instructables.com/FSP/LV4V/HTFYECNB/FSPLV4VHTFYECNB.LARGE.jpg"], "step_title": "Step 8: "}, {"step": 9, "steps_text": "You will need to repeat the procedures, data, and observations for all other parts of the lab as well.\u00a0", "step_imgs": ["https://cdn.instructables.com/FKN/YMM9/HTG5GZYU/FKNYMM9HTG5GZYU.LARGE.jpg"], "step_title": "Step 9: "}, {"step": 10, "steps_text": "After the body is the answers to the questions within the labs. Most teachers don't require the questions to be written in the lab report but just detailed answers to all the questions.\u00a0", "step_imgs": ["https://cdn.instructables.com/FOL/0EDY/HTGFBKXG/FOL0EDYHTGFBKXG.LARGE.jpg"], "step_title": "Step 10: "}, {"step": 11, "steps_text": "The last part of the lab is the conclusion. The conclusion should include the result to the main goal stated in the introduction. Any significant values that were obtained and/or percent errors correlated with the values should be included. Any other significant concepts obtained from the completion of the lab should be included in the conclusion. Then, your lab report is complete!", "step_imgs": ["https://cdn.instructables.com/FD9/53YU/HTFYED1A/FD953YUHTFYED1A.LARGE.jpg", "https://cdn.instructables.com/FIW/P7IQ/HTKXZ7WB/FIWP7IQHTKXZ7WB.LARGE.jpg"], "step_title": "Step 11: "}], "channel": "Computers"}, {"category": "technology", "description": "This tutorial is gonna teach you some basics on using 5kg balance module or load cell. ", "title": "How to Interface With 5kg Balance Module or Load Cell", "url": "https://www.instructables.com/id/How-to-Interface-With-5kg-Balance-Module-or-Load-C/", "section": "technology", "steps": [{"step": 1, "steps_text": "Description:This 5kg balance module is a weight sensor module which can be used to measure the weight of object. It comes with HX711 ADC tiny controller board which eases the communication between the load cell and microcontroller. It is quite easy to use since it is capable of interfacing with Arduino. The maximum weight it can measure is 5kg. And also, it comes with a standard weight load which is used in calibration. Specifications:Voltage: 5VDCDiameter: 10cmHeight: 3.5cmMax. Load: 5kg", "step_imgs": [], "step_title": "Step 1: Introduction"}, {"step": 2, "steps_text": "Specifications of HX711 ADC Module:Differential Input Voltage: \u00b140mV (Full-scale differential input voltage is \u00b140mV)Data Accuracy: 24 bit (24 bit analog-to-digital converter chip)Refresh Frequency: 10/80 HzOperating Voltage: 2.7V to 5VDCOperating Current: <10mA", "step_imgs": ["https://cdn.instructables.com/FWW/9ZC5/IRXTRHO0/FWW9ZC5IRXTRHO0.LARGE.jpg"], "step_title": "Step 2: Pin Definition of HX711 ADC Module"}, {"step": 3, "steps_text": "The above hardware installation is just for reference. You can connect the components according to your pin assignments in your Arduino source code. ", "step_imgs": ["https://cdn.instructables.com/F26/FHWX/IRXTQIZ9/F26FHWXIRXTQIZ9.LARGE.jpg"], "step_title": "Step 3: Sample Hardware Installation"}, {"step": 4, "steps_text": "In the attachment section, there are altogether three files being uploaded.File Name: HX711.zipKindly download the library attached below for your own use. File Name: calibration.zipIn order to get the accurate reading, you will have to know the calibration factor. Firstly, setup your scale and start the sketch without a weight on the scale. Once readings are displayed, place the weight on the scale. Press 'a' or 'z' to adjust the calibration factor until the output readings match the known weight. 'a' is to increase the calibration factor whereas 'z' is to decrease the calibration factor.  A video is uploaded to show the steps of calibrating the calibration factor.File Name: single_hx711.zipAfter the calibration is done, upload the file named single_hx711 into your Arduino. Now, your load cell is able to measure the weight.", "step_imgs": ["/assets/img/pixel.png", "/assets/img/pixel.png", "/assets/img/pixel.png"], "step_title": "Step 4: Sample Source Code"}, {"step": 5, "steps_text": "", "step_imgs": ["https://cdn.instructables.com/FQ0/03C6/IRXTY8ZB/FQ003C6IRXTY8ZB.LARGE.jpg", "https://cdn.instructables.com/F8K/ULCF/IRXTY8ZE/F8KULCFIRXTY8ZE.LARGE.jpg"], "step_title": "Step 5: Ways to Open Serial Monitor"}, {"step": 6, "steps_text": "Place anything onto the load cell and Now you are ready to measure anything. Remember do not place anything that exceeds a weight of 5kg. ", "step_imgs": ["https://cdn.instructables.com/FUV/TLI7/IRXTY9KX/FUVTLI7IRXTY9KX.LARGE.jpg"], "step_title": "Step 6: Result"}, {"step": 7, "steps_text": "Here in this part, an additional sample source code is attached. This sample source is applicable when more HX711 ADC module is connected to one Arduino board. ", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 7: Additional Sample Source Code"}], "channel": "Sensors"}, {"category": "technology", "description": "This Instructable describes how to make a tension scale using readily available off the shelf parts.Materials needed:1. Arduino - this design uses a standard Arduino Uno, other Arduino versions or clones should work also2. HX711 on breakout board - This microchip is specially made for amplifying the signals from load cells and reporting them to another mircocontroller. The load cells plug into this board, and this board tells the Arduino what the load cells measure.3. Tension load cell (40 kg) with brackets.  There are 2 options to get one of these.  You can purchase one already made (easy), or you can take apart a cheap digital luggage scale and remove the load cell (harder but you might already have one lying around).  You can buy one already made with an HX711 here: https://www.amazon.com/dp/B07F922RZCIf you do purchase the kit please leave a review! It is really helpful for future buyers.4. Mounting hardware.  Depending on your application this could be rope, screws, zip ties, anything to attached the brackets to the force you want to measure.5. Wires in various colors for connecting all the parts6. Power supply for Arduino", "title": "Arduino Tension Scale With 40 Kg Luggage Load Cell and HX711 Amplifier", "url": "https://www.instructables.com/id/Arduino-Tension-Scale-With-40-Kg-Luggage-Load-Cell/", "section": "technology", "steps": [{"step": 1, "steps_text": "First we are going to mount the load cell. Your mount will be unique, but here are the guidelines you need to follow:1. The steel load cell is a plate with strain gauges glued to the middle.  The load cell measures force by sensing how much the load cell is bending.2. Brackets attach through holes in the ends of the load cell beam.  The brackets are shaped so the pulling force is applied at the center of the load cell beam.  Because of their shape and the attachment location, the load cell beam bends when the brackets are pulled.3. Hook the brackets to what you want to measure.  It is best to to this with something that can move freely (like chain, hooks, strong string, or zip ties).  You want the load cell and bracket assembly to be able to center itself in the direction of the load so the measurement is accurate.", "step_imgs": ["https://cdn.instructables.com/FUV/ZYN6/JK2UGVZY/FUVZYN6JK2UGVZY.LARGE.jpg", "https://cdn.instructables.com/FLE/5CRS/JK2UGVZZ/FLE5CRSJK2UGVZZ.LARGE.jpg", "https://cdn.instructables.com/FQK/Z6TN/JK2UGW00/FQKZ6TNJK2UGW00.LARGE.jpg"], "step_title": "Step 1: Mount the Load Cell"}, {"step": 2, "steps_text": "See the wiring diagram for how to connect the load cells, HX711, and Arduino.On luggage style load cells like the one shown, multiple strain gauges are already wired together to for a Wheatstone bridge. All you need to do is connect the wires to the HX711 board in the correct orientation.", "step_imgs": ["https://cdn.instructables.com/FGG/8QC9/JK2UGW01/FGG8QC9JK2UGW01.LARGE.jpg"], "step_title": "Step 2: Wire the Load Cell and HX711"}, {"step": 3, "steps_text": "The HX711 library is available here: https://github.com/bogde/HX711See this link on the Arduino website for instructions on how to add the library to your Arduino IDE: https://www.arduino.cc/en/Guide/Libraries", "step_imgs": [], "step_title": "Step 3: Add HX711 Library to Your Arduino IDE"}, {"step": 4, "steps_text": "Sparkfun has great Arduino programs to run the scale. The most up to date versions are available on GitHub and reprinted below: https://github.com/sparkfun/HX711-Load-Cell-AmplifierThe first software step is to determine calibration factors for the scale. To do this, run this code/*\n Example using the SparkFun HX711 breakout board with a scale\n By: Nathan Seidle\n SparkFun Electronics\n Date: November 19th, 2014\n License: This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).\n\n This is the calibration sketch. Use it to determine the calibration_factor that the main example uses. It also\n outputs the zero_factor useful for projects that have a permanent mass on the scale in between power cycles.\n\n Setup your scale and start the sketch WITHOUT a weight on the scale\n Once readings are displayed place the weight on the scale\n Press +/- or a/z to adjust the calibration_factor until the output readings match the known weight\n Use this calibration_factor on the example sketch\n\n This example assumes pounds (lbs). If you prefer kilograms, change the Serial.print(\" lbs\"); line to kg. The\n calibration factor will be significantly different but it will be linearly related to lbs (1 lbs = 0.453592 kg).\n\n Your calibration factor may be very positive or very negative. It all depends on the setup of your scale system\n and the direction the sensors deflect from zero state\n This example code uses bogde's excellent library:\"https://github.com/bogde/HX711\"\n bogde's library is released under a GNU GENERAL PUBLIC LICENSE\n Arduino pin 2 -> HX711 CLK\n 3 -> DOUT\n 5V -> VCC\n GND -> GND\n\n Most any pin on the Arduino Uno will be compatible with DOUT/CLK.\n\n The HX711 board can be powered from 2.7V to 5V so the Arduino 5V power should be fine.\n\n*/\n\n#include \"HX711.h\"\n\n#define DOUT  3\n#define CLK  2\n\nHX711 scale;\n\nfloat calibration_factor = -7050; //-7050 worked for my 440lb max scale setup\n\nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"HX711 calibration sketch\");\n  Serial.println(\"Remove all weight from scale\");\n  Serial.println(\"After readings begin, place known weight on scale\");\n  Serial.println(\"Press + or a to increase calibration factor\");\n  Serial.println(\"Press - or z to decrease calibration factor\");\n\n  scale.begin(DOUT, CLK);\n  scale.set_scale();\n  scale.tare(); //Reset the scale to 0\n\n  long zero_factor = scale.read_average(); //Get a baseline reading\n  Serial.print(\"Zero factor: \"); //This can be used to remove the need to tare the scale. Useful in permanent scale projects.\n  Serial.println(zero_factor);\n}\n\nvoid loop() {\n\n  scale.set_scale(calibration_factor); //Adjust to this calibration factor\n\n  Serial.print(\"Reading: \");\n  Serial.print(scale.get_units(), 1);\n  Serial.print(\" lbs\"); //Change this to kg and re-adjust the calibration factor if you follow SI units like a sane person\n  Serial.print(\" calibration_factor: \");\n  Serial.print(calibration_factor);\n  Serial.println();\n\n  if(Serial.available())\n  {\n    char temp = Serial.read();\n    if(temp == '+' || temp == 'a')\n      calibration_factor += 10;\n    else if(temp == '-' || temp == 'z')\n      calibration_factor -= 10;\n  }\n}After calibrating the scale, you can run this sample program, then hack it up for your own purposes:/*\n Example using the SparkFun HX711 breakout board with a scale\n By: Nathan Seidle\n SparkFun Electronics\n Date: November 19th, 2014\n License: This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).\n\n This example demonstrates basic scale output. See the calibration sketch to get the calibration_factor for your\n specific load cell setup.\n\n This example code uses bogde's excellent library: \"https://github.com/bogde/HX711\"\n bogde's library is released under a GNU GENERAL PUBLIC LICENSE\n\n The HX711 does one thing well: read load cells. The breakout board is compatible with any wheat-stone bridge\n based load cell which should allow a user to measure everything from a few grams to tens of tons.\n Arduino pin 2 -> HX711 CLK\n 3 -> DAT\n 5V -> VCC\n GND -> GND\n\n The HX711 board can be powered from 2.7V to 5V so the Arduino 5V power should be fine.\n\n*/\n\n#include \"HX711.h\"\n\n#define calibration_factor -7050.0 //This value is obtained using the SparkFun_HX711_Calibration sketch\n\n#define DOUT  3\n#define CLK  2\n\nHX711 scale;\n\nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"HX711 scale demo\");\n\n  scale.begin(DOUT, CLK);\n  scale.set_scale(calibration_factor); //This value is obtained by using the SparkFun_HX711_Calibration sketch\n  scale.tare(); //Assuming there is no weight on the scale at start up, reset the scale to 0\n\n  Serial.println(\"Readings:\");\n}\n\nvoid loop() {\n  Serial.print(\"Reading: \");\n  Serial.print(scale.get_units(), 1); //scale.get_units() returns a float\n  Serial.print(\" lbs\"); //You can change this to kg but you'll need to refactor the calibration_factor\n  Serial.println();\n}", "step_imgs": ["https://cdn.instructables.com/F6U/OE24/JK2UGW1G/F6UOE24JK2UGW1G.LARGE.jpg"], "step_title": "Step 4: Calibrate and Weigh!"}], "channel": "Arduino"}, {"category": "technology", "description": "When I worked at Intel as a hardware designer, I used a logic analyzer to debug microprocessors and chipsets. A logic analyzer is a machine that connects to your circuit and converts what's happening in the circuit into a waveform on a screen. It lets you visually inspect how different parts of the circuit behave and interact with each other over time, which can expose the source of bugs. I recently ran into a rather sneaky bug in a circuit I'm building. Since I can't afford the million dollar analyzers I used at Intel, I made a simpler one using my Arduino Uno, Node.js and HTML; it's perfect for typical maker projects.In this Instructable I'll show you how to turn an Arduino Uno into a four-channel logic analyzer that can sample at about 10~20 microseconds to a depth of 8kb samples for one channel, or 2kb/ch for four. You control the Arduino with a web browser, which in turn uses HTML5, JavaScript, and Node.js to interface to the hardware, and collect and render data: there's no intermediate step where you have to collect and then download the data and feed it to a GUI, it is done automatically.", "title": "Arduinolyzer.js: Turn Your Arduino Into a Logic Analyzer", "url": "https://www.instructables.com/id/Arduinolyzerjs-Turn-your-Arduino-into-a-Logic-Anal/", "section": "technology", "steps": [{"step": 1, "steps_text": "This project is practically an academic decathlon of programming languages, IDEs, and software packages.As a good citizen of Instructables, I tested as best I could and avoided hacking trial-and-error solutions. But my validation resources are limited. Hopefully I designed within specifications well enough that you won't encounter any compatibility issues. Fingers crossed.Here is a list of the software:O/S: Mac OS X Mavericks  Browsers: Chrome Version 37.0.2062.122 and Safari Version 7.0.6 (9537.78.2)  jquery.js: v2.1.1  socket.io.js: 2.0.0  node.js: v0.10.29  Arduino IDE: 1.0.5  See my package.json file for all the npm module versionsAs for hardware, I used a Rev1 Arduino UNO.", "step_imgs": [], "step_title": "Step 1: Development System"}, {"step": 2, "steps_text": "The stack starts with HTML5 and client-side JavaScript controls to handle all the button clicks and scroll events from the user interface. The JS client communicates with the localhost server running node.js using AJAX POST to a dedicated server endpoint. In addition to serving the user interface, the node.js server manages the serialport object, with it directing communications to the Arduino. The Arduino sketch either polls the serial port for a command string from the server, or samples the DUT on its I/O ports, returning the data on the serial port when sampling finishes. The server reformats the data into a JSON object and sends it to the client via a socket.io push. This complex stack uses a variety of API's, but the code is fairly short (barely a hundred lines for each module). I'll explain each layer in the stack in the following sections.", "step_imgs": ["https://cdn.instructables.com/FMU/OK11/I0HYQALQ/FMUOK11I0HYQALQ.LARGE.jpg"], "step_title": "Step 2: The Software Stack"}, {"step": 3, "steps_text": "The index.html file served by the node.js server at  http://localhost:8080  displays a control panel. In the panel, a configuration menu appears on the left-hand side, and the screen canvas on the right hand side, with a summary line beneath the configuration. The canvas auto-fits to the screen, and +/- zoom buttons allow you to blow up the waveform and scroll through it. The summary line provides a brief English translation of what will happen when you press Start. The configuration menu is a 1:1 match of the Arduino sketch functionality: each control corresponds to a TTY config command to which the Arduino responds. We'll talk more about the controls later during the Arduino sketch. For now, it is only important to remember that the input controls are converted into a command string and sent to the Arduino when you press the Start button.The JavaScript located in controls.js communicates in four directions:HTML5 to Client/JS: clicks on the screen are managed by several jQuery .on('click') handlers      Client/JS to HTML5: Client/JS updates the summary box, the status of the start/wait button, and the canvas      Client/JS to Server: Client/JS sends AJAX requests to the server to initiate sampling      Server to Client: The server sends data back to the Client/JS via socket.io asynchronous pushEvery time you press a control, the status bar updates with a description of what will happen, and if appropriate, a time estimate. Pressing Start causes the JS to compile the input controls into a command string and send it off to the server, and changes the Start button to Wait. (Currently there's no way to stop the execution since the Arduino ignores the serial port while sampling.)When the sampling finishes, the server sends the data back to the client JS using a socket.io asynch push. The last step in the push handler renders the data to the canvas and switch the Wait button back to Start.A singleton JavaScript object named viewport manages the canvas and renders the channels' data. During render(), the viewport object scales the data to fit the screen, since the canvas can handle subpixel coordinates nicely. This means if the Arduino collected more samples than the width of the screen, the waveforms may appear as solid blocks. To address this problem, I added zoom buttons to expand the data. Note:I originally had coded markers and a time axes, but I removed them because the code was blowing up. I wanted the code to be as small as possible. I'll leave it to the reader to make aesthetic modifications. However, having a time-axis does improve usability when zooming: you won't lose your place as easy. Instead, I added some simple grey rectangles surrounding the channel waveforms, making it easier to identify high and low signals that don't change.", "step_imgs": ["https://cdn.instructables.com/F1R/JMOA/I0HYQAM8/F1RJMOAI0HYQAM8.LARGE.jpg", "https://cdn.instructables.com/F9A/H3K9/I0NOHH57/F9AH3K9I0NOHH57.LARGE.jpg", "https://cdn.instructables.com/FKN/M46F/I0HYS8XN/FKNM46FI0HYS8XN.LARGE.jpg"], "step_title": "Step 3: HTML5 and JavaScript"}, {"step": 4, "steps_text": "Here are the server's main tasks:Initialize the serial port and boot the Arduino  Start an HTTP server  Serve the index.html page (and all static pages from \"/\")  Respond to the AJAX POST to \"/start\" by delivering the data to the Arduino via the serial port object  Register a callback to listen to the Arduino for completion  Receive and package the Arduino data into a JSON object and send it to the client via socket.ioThis is all done in about a hundred lines of code thanks to existing npm modules. The server accepts one command-line parameter, the name of the serial port (/dev/tty* on mac/unix, and COM* on Windows).[Caveat: This is my first time using the serialPort package. I didn't have any problems, but I don't have that feeling of really understanding it yet, which makes me uneasy. Sometimes the debug console has weird characters in it when the Arduino boots. It could be due to the TTY not being flushed, or it could be due to something I don't understand about serial port timing. Please let me know if you have any issues.]Before server.js starts the HTTP service with the Express app listener, it initializes the serial port provided by the first argument on the command line. There needs to be a three-second timeout waiting for the device to boot. I added additional preventative measures to wait for the \"initialized\" string from the Arduino before the user can send data.Client to Server CommunicationThere are only two endpoints exposed by the server, POST to \"/start\" and GET from \"/\".The Client to Server call via AJAX is handled by a formidable form object. The Express app endpoint \"localhost:8080/start\" captures the POST transmission via the form object, which comes in as text JSON object natively. I don't really need an object, I could have used a text string, but I left some flexibility. I didn't even register an .on() callback with the POST object, I simply refer to the \"fields\" parameter during the parse() call.The index.html page is served using the Express static page server module. Everything in the public/ folder can be served that way, including CSS and JS modules.Server to Arduino CommunicationSince the client already formatted the command string, the server simply writes it to the serial port as-is using serialport.write() via the analyzer object.Arduino to Server CommunicationThe response from the Arduino comes in on the serial port's .on('data') callback in the analyzer objectServer to Client CommunicationThe data callback also handles packaging the data into a JSON object and firing it back to the client via a socket.io push. (This is all very exciting and refreshing compared to doing web push back in the late 1990's!)I added some log commands so that I can watch the data streams from both the Arduino and the client. I also use the morgan package to trace the HTTP requests.", "step_imgs": ["https://cdn.instructables.com/FU4/M3DB/I0HYS8TO/FU4M3DBI0HYS8TO.LARGE.jpg"], "step_title": "Step 4: Node.js Server"}, {"step": 5, "steps_text": "The Arduino sketch contains a state machine that either listens for serial commands to parse, or launches a data acquisition session. Data acquisition occurs in the form of either edge-triggered sampling or time-based polling. Time based-polling can be trigged by a rising and/or falling edge.I set up the code to use the following Arduino Uno pins (not to be confused with the ATmega pins):Pin 2: Interrupt 0, the trigger       Pin 8: Channel 1       Pin 9: Channel 2       Pin 10: Channel 3       Pin 11: Channel 4Command LoopThe serial command loop polls the serial port and waits for characters to arrive. Each command is a string of characters that ends with a '%'. When a '%' is parsed, the current string buffer is shipped off to the router. (The JavaScript client will send one large string with all of the commands.)Commands:reset%: clear the context global variables       ch{1-4}%: Enable channels 1, 2, 3, or 4       time%n%: Set the sample time to 'n' microseconds.       limit%n%: Limit the number of byte samples to 'n'. I added this to give myself some way to manage the sample time since I can't interrupt it without losing data       rising%: sample on the rising edge of the trigger       falling%: sample on the falling edge of the trigger (note sampling works on both edges, they aren't mutex)       once%: Perform a one-shot trigger that starts polling mode       start%: Compile the above options into global variables, set the function pointers and callbacks, and start the sampling loopAfter receiving the start% command, the sketch configures the global context variables and switches from command parsing to sampling. It cannot be interrupted until it completes and returns data, unless you do a hard reset via button or power.Time-Based SamplingIf the user did not select any triggering, the sketch determines which time routine it should use. There are three:As fast as possible: this has no delay for maximum speed      delay_ms(): this uses the delay() function       delay_us(): this uses the delayMicroseconds() function, which has a max limit of 16,383 us.The sketch assigns the proper function to a function pointer rather than using if/else conditionals, this speeds execution, and allows better abstraction.One-Shot TriggerIf the user selected one-shot mode, an interrupt service routine (ISR) is set to INT0 (the trigger), for either RISING, FALLING, or CHANGE. The ISR will then detach the interrupt and invoke time-based sampling as specified above.Edge-TriggeringEdge-triggered sampling skips the time based routines and collects one sample per trigger. The sketch attaches an ISR to INT0 similar to one-shot mode, but instead of detaching the interrupt and calling the time-based routine, it simply collects one sample per interrupt. As you can tell, if the interrupts arrive faster than the code can process, data will be lost. The limit is around 20us due to the large amount of code in the sample routines.Data SamplingAll of the sampling invocation methods use the same low-level data acquisition functions.In attempt to limit the overhead, I wrote four different sampling routines based on the number of channels selected, and call a function pointer instead of if/else. Each routine has its own optimizations. The start% command handler sets the proper function pointer.The sketch stores the samples in a byte buffer[1080]. This translates to 8640 bit samples for one channel. The number of byte samples must be divisible by 2, 3, and 4. Since I allow 1, 2, 3 or 4 channels to be active, I need to partition the buffer array so that I don't have to perform any special boundary checks. Making the size divisible by 12 is the best way to handle this. I don't enforce it in the code, but I do in the HTML5 interface: notice that the samples control increments by 96 (12 * 8) and stops at 8640 (1080 * 8). As bits are read, they are shifted and packed into each byte. After every 8 bits, a byte is stored at the index and the index is incremented. When the index equals the storage depth, sampling completes and the data is sent. If one channel is selected, data is written to buffer[index]. If two channels are selected, bytes are written to buffer[index] and buffer[index + offset_2]; offset_2 = MAX_BYTE_SAMPLES * 1 / 2 and index is half of what it is in one-channel mode. Three channels write to buffer[index], buffer[index + offset_2] and buffer[index + offset_3]; offset_2 = MAX_BYTE_SAMPLES * 1 / 3 and offset_3 = MAX_BYTE_SAMPLES * 2 / 3, index is 1/3rd of it's max value in one-channel mode, etc.Once the the buffer fills or the index exceeds the limit%, the sample routines halt and the data is sent back.Data SendThe data send routine returns the number of samples collected (divided by the # of channels used), and the channels' binary data. Since the user may select any configuration of channels, this routine decodes the channels used and labels them accordingly (a bit of a hassle, actually, I know there's a faster solution out there...). It also brackets the transmission with begindata and enddata to help the server coordinate its parser.NoteYou may notice gratuitous global variables. I did this because I'm trying to get a handle on how to minimize the memory footprint to make room for more sample capacity. One area that needs work: I used a lot of String objects which grow and shrink, and I have a lot of debug char* strings floating around in there. I avoided using malloc() and declared the sample buffer on the heap. I found that 1080 bytes is about the most I can use reliably without crashing the sketch. My to-do list includes understanding memory management better on the ATmega and avr-dude / gcc and re-writing this sketch to be more predictable w.r.t. memory usage.", "step_imgs": ["https://cdn.instructables.com/F2E/1ZB3/I0HYS8ZD/F2E1ZB3I0HYS8ZD.LARGE.jpg", "https://cdn.instructables.com/FCI/LFMF/I0HYQALP/FCILFMFI0HYQALP.LARGE.jpg", "https://cdn.instructables.com/FA8/W8LF/I0HZ2F7B/FA8W8LFI0HZ2F7B.LARGE.jpg"], "step_title": "Step 5: Arduino Sketch"}, {"step": 6, "steps_text": "Download the code from my github account (via SSH):% git clone git@github.com:petertorelli/Arduinolyzer.js.git[Note: I had originally included the code in this Instructable, but decided against it because it would mean the same code would be in two places. Trying to keep code in two places coherent is time consuming without a revision system. Learning how to use github may take some time, but is worth the investment.]You will need a bunch of node packages. Fortunately npm handles this nicely via the package.json file:% npm installThis will automatically parse package.json and install the modules into node_modules/.Plug in your Arduino, upload the sketch, and launch the server from your terminal, example:% node server.js /dev/tty.usbmodem1411Where /dev/tty.usbmodem1411 is your Arduino location. If I could test this on Windows, it would be COM1 or something similar.Now open your browser and go to  http://localhost:8080.You should see the control panel as pictured above.. If not, refer to the terminal to see what error messages. Here is what a successful launch looks like (I chmod my .js servers +x) in the node terminal window:% ~/proj/Arduinolyzer.js % ./server.js /dev/tty.usbmodem1411\nUsing device at: /dev/tty.usbmodem1411\ninitializing serial Arduino...\nexecuting 3s delay for port to init...\nServer ready\nArduinoData: initialized\nGET / 304 4.564 ms - -\nGET /controls.css 304 2.373 ms - -\nGET /jquery.js 304 1.513 ms - -\nGET /socket.io.js 304 1.477 ms - -\nGET /controls.js 304 1.566 ms - - ", "step_imgs": ["https://cdn.instructables.com/FZI/IPNW/I0HYS493/FZIIPNWI0HYS493.LARGE.jpg"], "step_title": "Step 6: Putting It All Together!"}, {"step": 7, "steps_text": "To verify the Arduinolyzer is working, I programmed an Arduino Micro to increment a four-bit value at 50ms intervals and write the output to its pins. Using bit one as a trigger I captured the first image shown above. There's no picture of this hardware, but I use it as my test rig to make sure the sampler is working if I'm ever in doubt of the data I'm collecting.The next two pictures are of a project I'm building. It is a pressure sensitive pad that counts objects moving over it when the pad is pressed. The objects move very, very quickly, passing by in mere milliseconds. Debug LEDs don't work because I can't simply add a software delay loop to the universe (I know, bummer). With the Arduinolyzer, I was able to measure the state of the pad and the objects passing over it.The first waveform shows the pad sensing pressure, and then the single blips on the three other channels indicate a single object passing overhead. (The pressure sensors are high and low for about 500 milliseconds and the objects pass overhead in about 20ms.) The second waveform shows two objects passing during the sensing intervals. I was able to spot two bugs on the hardware which were due to timing issues in the downstream logic. By adjusting the clocking of downstream flops, I was able to clear up the channels that had time delays. I found these bugs almost instantly after collecting the waveforms, as opposed to weeks of staring at schematics waiting for the problem to jump out at me.", "step_imgs": ["https://cdn.instructables.com/FCK/FNEE/I0HYS4R4/FCKFNEEI0HYS4R4.LARGE.jpg", "https://cdn.instructables.com/F1C/SSGO/I0HYQAOO/F1CSSGOI0HYQAOO.LARGE.jpg", "https://cdn.instructables.com/FLK/843A/I0HYQAOR/FLK843AI0HYQAOR.LARGE.jpg", "https://cdn.instructables.com/F68/TVZ1/I0HYQAMA/F68TVZ1I0HYQAMA.LARGE.jpg", "https://cdn.instructables.com/F3T/X0QF/I0HYQAMC/F3TX0QFI0HYQAMC.LARGE.jpg"], "step_title": "Step 7: Take Some Measurements!"}, {"step": 8, "steps_text": "There's not a lot of code in this project, but there are many interfaces, all with their own quirks, and I'm eager to learn where I can bulletproof the stack.There are definitely some areas I'd like to improve, such as optimizing the sampling routines and memory usage, and porting to faster hardware like a Raspberry Pi or an Edison (I would like to be able to sample sub-microsecond data, and have more channels and greater sample depth). I'd even like to jazz up the user interface to add better timescales, save/restore, markers, and more complex triggering (IF / AND / OR).I think I can squeeze the server code down even smaller, since it is nothing more than essentially middleware from the client to the hardware.I recommend that you keep the browser debug console open to catch errors and to follow the status messages. JavaScript console.log() either writes to the browser console (client) or the terminal (server). There are a ton of debug and inspection features built into Chrome and Firefox that I never new existed until about 8 months ago, and they still blow my mind with their intuitive operation (unlike the Microsoft .Net IDE, ugh).When all else fails, kill the server process, reboot it, reset the Arduino and reload the client page!I hope you find this useful! Please let me know if you find errors or can't make it work, your input will make it a better Instructable!Thanks,Peter", "step_imgs": [], "step_title": "Step 8: Post Mortem: Thoughts"}], "channel": "Arduino"}, {"category": "technology", "description": "The purpose of these instructions is to show you how to read a .aiff sound file. Like any other binary files, .aiff file is also consists of different memory chunks. This tutorial will read through the common chunk of the file. After this tutorial you should be able to read the other chunks using the same logic. Reading an .aiff file is extremely useful, mostly because it is one of the very common types of the sound files. \u00a0Moreover, reading .aiff file is very similar to reading any type of binary file. In other words, as long as you know the format (the format of .aiff files can be seen at the main picture above), you can read any binary files using the same logic that is used in .aiff files. To understand these instructions you must have at least basic understanding of C code and compiling C code. You need to know how to use arrays and strings in C as well. The most importantly, you need to be familiar with the binary-decimal conversions and the bit-wise operations in C. However, unlike most of the binary file tutorials, this tutorial does not require for you to have any knowledge about pointers. These instructions should not take more than three hours to finish but the proficient C programmers can finish this in thirty minutes.", "title": "How to Read .aiff Files Using C", "url": "https://www.instructables.com/id/How-to-Read-aiff-Files-using-C/", "section": "technology", "steps": [{"step": 1, "steps_text": "1) Ask the user to enter the path to the file (see the top picture above).2) Scan the path to the file (see the bottom picture above).", "step_imgs": ["https://cdn.instructables.com/F2X/JOID/HLZRU3XV/F2XJOIDHLZRU3XV.LARGE.jpg", "https://cdn.instructables.com/FBW/A6RC/HLZRQP79/FBWA6RCHLZRQP79.LARGE.jpg"], "step_title": "Step 1: Get the Path to the File"}, {"step": 2, "steps_text": "- Use \"fopen\" to open the file in \"r\" mode (see the top image above).+ Caution: Use \"rb\" mode if you are working with windows operating system.\u00a0Note: \"fopen\" will return a nonzero value if the file is opened successfully. Therefore, you can use an if statement to check whether the file is actually opened or not (see the bottom image above).", "step_imgs": ["https://cdn.instructables.com/FC3/472P/HLZRWAUK/FC3472PHLZRWAUK.LARGE.jpg", "https://cdn.instructables.com/F3O/92G6/HLZRU3ZM/F3O92G6HLZRU3ZM.LARGE.jpg"], "step_title": "Step 2: Open the File"}, {"step": 3, "steps_text": "- Use \"fscanf: function to read the first four characters.Note: This function works exactly the same way as \"scanf\" except you need to specify the target first (see the picture above).Note: You can also use the \"fread\" function as well, to make this step easier. However, the usage of this function requires some knowledge of pointers and not used in this entire tutorial.- Read one character at a time.+ Caution: In binary files, there are no spaces therefore, trying to read a string, an integer or a float will not work and you can easily get lost in the file (assuming that you are using \"fscanf\" function). As you can see from the very first picture of this tutorial, the .aiff file starts with word \"FORM\", which is exactly four bytes. Therefore, the first four bytes that you will read always needs to be the word \"FORM\".Note: You can read all the character in the file using the logic in this step.", "step_imgs": ["https://cdn.instructables.com/F7Y/V058/HLZRH3DC/F7YV058HLZRH3DC.LARGE.jpg"], "step_title": "Step 3: Read the Characters 'F', 'O', 'R', 'M'"}, {"step": 4, "steps_text": "According to the format of the .aiff files the next four bytes needs to be the remaining number of bytes in the entire file (as seen from the very first picture of this tutorial). The problem is that you can only read single byte at a time. Therefore, you have to mix all the bytes in the correct order.1) Read the next four bytes in a character array.2) Merge the four bytes to an unsigned type data.Note: To merge the four bytes you need to use bit-wise operations. The .aiff file uses big-endian format (Most significant bit goes to the leftmost side)- Set your unsigned variable to zero.- Shift the first character you read 24 (3*8\u00a0 (it is the the fourth byte and 1 byte= 8 bits)) to the left.- Bit-vise or the value you gain with your unsigned variable.- Do the same steps for the rest of the bytes, except decrease the byte number (e.g., 16 (2*8) for the second byte) (see picture above).Note: You can read all the integer type data using the logic in this step.", "step_imgs": ["https://cdn.instructables.com/FM6/W8I7/HLZRO81L/FM6W8I7HLZRO81L.LARGE.jpg"], "step_title": "Step 4: Read the Number of Bytes Left in the File"}, {"step": 5, "steps_text": "- Read the next four bytes.Note: Refer to the step 3.Note: After you read these bytes you can check whether the file format is actually .aiff or not (see picture above).", "step_imgs": ["https://cdn.instructables.com/F1Y/FGD3/HLZRO88V/F1YFGD3HLZRO88V.LARGE.jpg"], "step_title": "Step 5: Read the ID ('A', 'I', 'F', 'F') of the File"}, {"step": 6, "steps_text": "At this point, the file consists of different chunks. Each of them is starting with a four byte identification and then four byte number, which is the remaining number of the bytes in the chunk (as seen on the format picture at the beginning of the tutorial). You have to skip until you come across the chunk that you wanted (in this case, it is the common chunk).1) Read the identification of the chunk (see picture above). \u00a0\u00a0\u00a0 - Refer to the step 3.2) Read the four byte size f the chunk (see picture above). \u00a0\u00a0\u00a0 - Refer to the step 4 (you can use integer type for this).Note: For alignment purposes each chunk needs to consist of even number of bytes. If size is specified as an odd number, this means there is a meaningless zero byte at the end so just add one to your size.3) Check if you are at the correct chunk or not (see picture above). \u00a0\u00a0 - Use a simple if statement.4) Use a loop to skip through the rest of the chunk using your size variable (see picture above).", "step_imgs": ["https://cdn.instructables.com/FCX/ELHD/HLZRU4CS/FCXELHDHLZRU4CS.LARGE.jpg"], "step_title": "Step 6: Skip Until You Found the Correct Chunk"}, {"step": 7, "steps_text": "The format picture (the very first picture of this tutorial), shows what else is in this chunk and how much bytes each of them are. Using this format you can read the numbers until sample rate (which is the next step).1) Read the next two bytes, which is number of channels. \u00a0\u00a0 - Refer to the step 4.2) Read the next four bytes, which is number of frames (samples). \u00a0\u00a0\u00a0 - Refer to the step 4.3) Read the next two bytes, which is the bit depth (bits used per samples). \u00a0\u00a0\u00a0 - Refer to the step 4.", "step_imgs": ["https://cdn.instructables.com/FQY/XHE6/HLZRO8A5/FQYXHE6HLZRO8A5.LARGE.jpg"], "step_title": "Step 7: Read the Channels, Samples and Bit Depth"}, {"step": 8, "steps_text": "Unlike other variables, sample rate is given in Extended 80-bit floating-point format (For details about this format visit http://en.wikipedia.org/wiki/Extended_precision). Therefore, you need to convert it to a float type.1) Read next 10 bytes into a character array.2) Read the sign bit. \u00a0 - The eighth bit of your first character (1:negative, 0:positive).3) Read the exponent bits. \u00a0 - The rest of your first character and your second character. \u00a0 Note: You can simply clean the sign bit and merge those two characters into an integer (refer to step 4).4) Subtract the biased (for this format it is: 16383) from exponent.5) Covert fraction bits to the decimal. \u00a0 - These are the rest of the characters of your array. \u00a0 a) Set your float variable to zero. \u00a0 b) Multiply each bit with 2^(exponent). \u00a0 c) Add the result to your float variable. \u00a0 d) Subtract one from exponent after each bit until all the bits are done.6) Adjust the sign using your sign bit. \u00a0 Note: You can simply use an if statement.", "step_imgs": ["https://cdn.instructables.com/FRW/Y150/HLZRU4GC/FRWY150HLZRU4GC.LARGE.jpg"], "step_title": "Step 8: Read the Sample Rate"}, {"step": 9, "steps_text": "1) Divide number of samples to the sample rate and store it to the seconds.2) Divide seconds to sixty and store it to minutes.3) Divide minutes to sixty and store it to hours.", "step_imgs": ["https://cdn.instructables.com/F2T/17QW/HLZRO8EI/F2T17QWHLZRO8EI.LARGE.jpg"], "step_title": "Step 9: Calculate the Duration"}, {"step": 10, "steps_text": "- Use \"fclose\" to close the file.Caution: Do not forget to close the file. If you do forget it,\u00a0 a memory leak may occur.", "step_imgs": ["https://cdn.instructables.com/FSX/SYDY/HLZRQQDT/FSXSYDYHLZRQQDT.LARGE.jpg"], "step_title": "Step 10: Close the File"}, {"step": 11, "steps_text": "\n          Congratulations! Now you have read an .aiff file successfully. You will now be able to get any information you want form an .aiff file. You can also apply the steps you learned here to read other type of binary files as well.", "step_imgs": [], "step_title": "Step 11: Conclusion"}], "channel": "Computers"}, {"category": "technology", "description": "This instructable shows you how to remotely log and plot data at up to ~2k (2000) samples/sec using a local network formed from an Adafruit WICED, a GL AR150 mini 5V router and an Android mobile running pfodApp.(V2.0.224+). Since all these devices run from 5V, this set up is suitable for field and lab work. These instructions are also available here.First let's define what we mean by High Speed Data Logging. For this tutorial, it means a sustained data rate of up to ~40K bytes/sec. That is, being able to sample at ~2000 samples/sec and send the time stamped measurement to a remote Android running pfodApp for logging and plotting with each measurement being approximately 20 bytes (depending on the number of bytes in the time stamp and sample data). While higher burst sampling rates are possible by relying on the internal and network buffers, this page only considers sustained real time sampling rates.First we will discuss the bottlenecks that restrict the data rate and presents a series of simple test programs to help you quantify them. When using pfodApp to log and plot the data, you can turn on the debug logging to record the rate at which the app is processing the data. That rate varies between mobiles and Android versions and also varies depending of what other apps are running.The tests here show that using an Adafruit WICED Feather sending data via a GL AR150 mini router to a ASUS zenfone5,running pfodApp (V2.0.224+), you can log an plot at ~40Kb/sec. On a Nexus P6 you can log and plot at ~48K bytes/sec. If you have a laptop handy you can use TeraTerm or CoolTerm to log the data directly to it and so avoiding using pfodApp. However pfodApp/pfodDesignerV2 makes it easy to control other functions on your Arduino as well as collecting and plotting the data.", "title": "Remote High Speed Data Logging Using Arduino/GL AR150/Android/pfodApp", "url": "https://www.instructables.com/id/Remote-High-Speed-Data-Logging-Using-ArduinoGL-AR1/", "section": "technology", "steps": [{"step": 1, "steps_text": "There are four (4) possible bottlenecks in logging/plotting high speed data :-Speed of sampling the data in the Arduino Speed of transferring the data to the communication shield or sub-system  Speed of the communication channel  Speed of the receiving Android device. Looking at these in turn", "step_imgs": [], "step_title": "Step 1: Bottlenecks to High Speed Data"}, {"step": 2, "steps_text": "The sampling rate in the Arduino needs to be faster then the desired samples/sec because the Arduino needs to do other work, like scaling and handling the communications, as well as doing the sampling. Sometimes the measurement hardware has sever sample/sec limitations or the protocol (SPI, Serial, I2C, etc) used to connect the measurement hardware to the Ardunio limits the maximum samples/sec.This example sketch, SamplingSpeedTest_Serial.ino, lets you test the maximum samples / sec for your measurement hardware. It uses analogRead() but you should replace the line of code with what ever code you need to get the sample. You should also add any extra code you need to scale/normalize the reading and prepare the measurement time stamp. (If you find the scaling calculations are taking too long, try removing all floating point calculations and send the data as integers.) The SampleSpeedTest_Serial.ino is initially set to work with Arduino boards and to send the data to a NullPrint. Here are some results for typical boards. Aduino Mega/UnoUsing NullPrint 1000 loops in:839mS-> Sample rate:1.19k samples/sec  Example data record:  15041440,0.14 Arduino 101 Using NullPrint 1000 loops in:83mS-> Sample rate:12.05k samples/sec Example data record:  10534130,0.09 To test the Adafruit WICED you need to uncomment the #define USE_WICED line at the top of the SampleSpeedTest_Serial.ino sketch. WICED has non-standard pin names and pinModes (and some non-standard function names also). For the WICED board the results are higher. WICED also has an ADC higher speed burst mode using an internal buffer, but that is not used here. Adafruit WICEDUsing NullPrint 1000 loops in:71mS -> Sample rate:14.08k samples/sec  Example data record:  10951026,0.31", "step_imgs": [], "step_title": "Step 2: 1. Speed of Sampling the Data in the Arduino"}, {"step": 3, "steps_text": "If your board does not include an integrated communication system you need to either send the data to the Serial port (USB) or transfer the data to a Wifi/Ethernet/Bluetooth shield to send it remotely. The speed of to transfer to the communication shield or sub-system is the next possible bottleneck.Serial connectionsUsing Serial, each byte of data is transmitted as 10 bits, 1 start, 8 data and 1 stop bit. So a 115200 baud Serial connection can transfer about 115200/10 = 11520 bytes/sec. If there are 14 bytes in each data record (as there are in these tests), that implies to transmit one data record at 115200baud takes ~1.2mS or ~1215mS for 1000 records. (or 14580mS at 9600baud)To test the USB serial transfer rate, in SampleSpeedTest_Serial.ino, set boolean useNullPrint = false;and set the baudrateconst unsigned long baudRate = 115200;Here is the result for Arduino Mega and Uno at 9600baudArduino Mega/UnoUsing Serial at 9600 1000 loops in:15600mS -> Sample rate:0.06kHzExample data record: 88322384,0.31 and at 115200baudArduino Mega/UnoUsing Serial at 115200 1000 loops in:1275mS -> Sample rate:0.77kHzExample data record:17686572,0.26Here is the result for the Arduino 101 at 115200baudArduino 101Using Serial at 115200 1000 loops in:1142mS -> Sample rate:0.88kHzExample data record:16888890,0.09To test the Adafruit WICED you again need to uncomment the #define USE_WICEDline at the top of the SampleSpeedTest_Serial.ino sketch.The Adafruit WICED has a high speed USB serial connection which ignores the baud rate setting and just sends as fast as it can, ~60K bytes/secAdafruit WICEDUsing Serial at 115200 1000 loops in:235mS -> Sample rate:4.26k samples/secExample data record:11908689,0.29So if you can connect directly to your computer via USB then WICED can log data at about 60K bytes/sec directly.If you instead send the WICED data to a standard serial port, e.g. Serial1, then the results are the same as the Arduino boards.Arduino Ethernet Shield V1 SPI connection.The sketch, SamplingSpeedTest_Ethernet.ino, tests the Ethernet Shield sample rate, connection to TeraTerm running on computer connected to the same networkThe Arduino Ethernet Shield V1 SPI connection/shield is very slow. Using Ethernet Shield V1 1000 loops in:2877mS -> Sample rate:0.35kHzExample data record:56096860,0.27It is not clear if this slowness is due to a) slow SPI speed or b) slow TCP/IP handling on the Ethernet shield. Adding buffering (see below) did not significantly improve the result. This shield has been replaced by a newer Arduino Ethernet Shield V3 but that shield has not been tested.Direct ConnectionsSome boards provide direct transfer of the data to an on-board communication module. Examples of these boards are Adafruit WICED, ESP8266, ESP32, Arduino 101, etc. This on-board transfer is difficult to measure but is usually not the limiting factor.", "step_imgs": [], "step_title": "Step 3: 2. Speed of Transferring the Data to the Communication Shield or Sub-system"}, {"step": 4, "steps_text": "The next bottleneck is the remote transfer of the data from the Arduino communication module to the remote Android mobile or computer. For Android the following options are available, slowest to fastest, SMS, Bluetooth Low Energy, Bluetooth (Classic), WiFi/Ethernet (TCP/IP). For computers generally only Bluetooth (Classic) and WiFi/Ethernet (TCP/IP) are available.Since we are considering high speed data logging, only TCP/IP will be considered. As noted above, the Arduino Ethernet V1 shields are slow and so Ethernet will not be considered further here. (Arduino Ethernet Shield V3 has not been tested). This leaves WiFi as the communication channel for high speed data logging.Not all WiFi (TCP/IP) implementations have the same speed. In particular the WiFi built into the ESP8266 can only send one packet at a time and waits for that packet to be ACKed before sending the next one. This severely limits its through put. The ESP32 may be better but the Arduino support is currently (as of 4th December 2015) incomplete. The Adafruit WICED board has a better TCP/IP implementation but even with this board, the default code will send lots of small packets. The sketch, WICED_simpleWifiSpeed.ino, finds the speed using the default code with small packets.Using (unbuffered) Adafruit WICED 1000 loops in:5031mS -> Sample rate:0.20k samples/secExample data record:60091255,0.85Lots a small TCP/IP packets severely limits the through put. Adding buffering to the output, so that the data is held until there is a (almost) full TCP/IP packet and then sending it, gives a much faster through put. The buffered files are in this zip file.Using buffered Adafruit WICED 1000000 loops in:131509mS -> Sample rate:7604.04 samples/secTime left to completion: 0.00 secExample data record:1301195611,1.23The buffering class used here is pfodBufferedClient and is it is zipped up with the revised sketch, WICED_bufferedWifiSpeed.ino, in this zip file. Adafruit WICED has a client.usePacketBuffering(true) method, that also does buffering. Unfortunately it will wait for ever to send a partial buffer if you don't call flush(). The pfodBufferedClient class has a short timeout which sends the packet if nothing has been added in the last 10mS. This timeout is checked on each call to read() available(), peek() or stop() and so is more convenient to use. Adding this buffering to the Arduino Ethernet Shield V1 did not significantly increase its through put.So to summarize so far, of the various boards I have to hand, the Adafruit WICED is the fastest. Over a 20min test it sent about about ~120K bytes/sec to TeraTerm running on my computer. If you have a computer handy on the WiFi network then you can use TeraTerm or CoolTerm to capture the data to a file. On the other hand if you are using pfodApp to control the board and capture and chart the samples, the data rate also depends on the processing speed of your Android device and its TCP/IP buffers.", "step_imgs": [], "step_title": "Step 4: 3. Speed of the Communication Channel"}, {"step": 5, "steps_text": "The final bottleneck in high speed data logging is the receiving device, be it a computer or a mobile. The previous section tested the speed connecting to a computer. For testing connecting to an Android mobile, pfodApp will be used. For 'remote' data logging a small portable wifi router is used, GL AR150.To test the Android mobile's speed, the free pfodDesignerV2 app was used to design a simple menu with just one button which opens a single plot of the sampled analog data. Adafruit WICED and pfodDesignerV2 covers designing a menu for WICED and Adding a Chart and Logging Data on How to Display/Plot Arduino Data on Android has details on setting up a chart with one plot and logging data.The resulting sketch generated by pfodDesignerV2 for the WICED target is WICED_chart.ino and produces the following menu and chart. Data samples are only sent at 1/sec.The WICED_chart.ino sketch was then modified to add buffering and to send the data at a much faster rate. The files use for the following tests are in pfodWICED_highSpeedChart.zip Unzip those to your Arduino directory and compile and load the WICED board with the pfodWICED_highSpeedChart sketch.Install pfodApp and set up a connection to your WICED board as described in pfodAppForAndroidGettingStarted.pdf. To see in more detail what is happening, in pfodApp open Add/Edit for the WICED connection and tick the Log Debug data tick box. This will log to the WICED_debug.txt file under /pfodAppDebugData directory on your mobile. By default, Log Plot Data is ticked and pfodApp saves any data received to a file on your Android device under the /pfodAppRawData directory.After you exit pfodApp (which flushes the last buffer), transfer the /pfodAppDebugData/WICED_debug.txt file to you computer (using say the wifi file transfer app) and open it in a text editor. You will find lines like< 1481329581822 4.962sec dataRate:42Kbytes/sec { }\u2026..137033.63,1145.00,,> 1481329581860 0.038sec dataRate:42Kbytes/sec {}137034.66,1156.00,,In this instance pfodApp was running on an ASUS zenfone5 mobile, running Android 4.4.2. The dataRate: is the Kbytes/sec since the last pfod message. The data rate varies between mobiles and Android versions and also varies depending of what other apps are running.The < \u2026 { } is a keep alive message sent very 5sec if no other pfod commands are being sent by the user. The > \u2026 {} is the response back from the WICED board 0.038sec later. If the data rate is too high for the Android mobile to handle then the 0.038sec will progressively get longer and longer and eventually exceed the connection timeout (default 10sec) and cause the pfodApp to disconnect and reconnect.The pfodApp chart is updated about once per sec. You can freeze the plot by putting your finger on the chart. You can also use two fingers to zoom the chart and drag the chart.Reducing the PLOT_DATA_INTERVAL to 500uS unsigned long PLOT_DATA_INTERVAL = 500;// uS == 0.5mS == 2kHz samples , edit this to change the plot data intervaldoubles the sample rate so that the data rate is about 40Kbytes/sec.The ASUS zenphone5 running Android 4.4.2 has a processing dataRate is about 40Kb/sec, if the WICED's data rate exceeds that, pfodApp cannot keep up and quickly times out. You can set the pfodApp connection time out to 0 so it never times out, but eventually the WiFi TCP buffers will fill up and block the data being sent.When running pfodApp on a Nexus P6 you can reduce the PLOT_DATA_INTERVAL to 400uS unsigned long PLOT_DATA_INTERVAL = 400;// uS == 0.4mS == 2.5kHz samples , edit this to change the plot data intervalwhich give a data rate of about 48Kb/sec.ConclusionThere are a number of factors that limit the data rate for an Arduino/Android based system. Of the boards I have here, the Adafruit WICED connected via WiFi to a ASUS zenfone5 or Nexus P6 running pfodApp (V2.0.224+), was the fastest, achieving ~40Kb/sec (~2000 samples/sec.) The pfodApp can also plot the data and you can freeze the plot by putting you finger on it. Using a 5V mini router, like the GL AR150, allows you to take the whole set up out in the field.", "step_imgs": ["https://cdn.instructables.com/FRL/DHT6/IWH3AH3Z/FRLDHT6IWH3AH3Z.LARGE.jpg", "https://cdn.instructables.com/F75/NN9E/IWH3AH40/F75NN9EIWH3AH40.LARGE.jpg", "https://cdn.instructables.com/FAP/6US9/IWH3AH41/FAP6US9IWH3AH41.LARGE.jpg", "https://cdn.instructables.com/FMX/9ECS/IWH3AH4F/FMX9ECSIWH3AH4F.LARGE.jpg"], "step_title": "Step 5: 4. Speed of the Receiving Android Device"}], "channel": "Arduino"}, {"category": "technology", "description": "If you have IoT devices and you need a cloud service to store your measurements... :)", "title": "IoT-HUB-Live Integration (ESP 8266, Arduino)", "url": "https://www.instructables.com/id/IoT-HUB-Live-Integration/", "section": "technology", "steps": [{"step": 1, "steps_text": "It is simple: type the https://iothub.live into your browser. :)", "step_imgs": ["https://cdn.instructables.com/F6H/PGY7/JGCJFP8Z/F6HPGY7JGCJFP8Z.LARGE.jpg"], "step_title": "Step 1: Open the IoT-HUB-Live Site"}, {"step": 2, "steps_text": "If you follow the \"Sign up\" link, you can see your identifier (generated) and your secret (also generated). You can modify the secret and the email field only.", "step_imgs": ["https://cdn.instructables.com/FVJ/HMA7/JGCJFPAG/FVJHMA7JGCJFPAG.LARGE.jpg"], "step_title": "Step 2: Sign Up"}, {"step": 3, "steps_text": "After a successful registration you must write down your credentials because of we won't display your secret anymore and you can request secret replacement via email only (if you filled up the email field).", "step_imgs": ["https://cdn.instructables.com/F6J/HSJ3/JGCJFPGL/F6JHSJ3JGCJFPGL.LARGE.jpg"], "step_title": "Step 3: Write Down Your Credentials"}, {"step": 4, "steps_text": "After the registration you can log in into the site. Also, you can use the \"Login\" button on the top-right of the page.", "step_imgs": ["https://cdn.instructables.com/F65/3SJH/JGCJFQ39/F653SJHJGCJFQ39.LARGE.jpg"], "step_title": "Step 4: Log in to the Site"}, {"step": 5, "steps_text": "After log in, you can see the list of your nodes (it is empty now), a node corresponds to an IoT sensor. So that, you can create your first node, for example the name of the node is \"My precious\" and the description \"WeMOS D1 mini\".", "step_imgs": ["https://cdn.instructables.com/FLU/TOQQ/JGCJFQ91/FLUTOQQJGCJFQ91.LARGE.jpg"], "step_title": "Step 5: List of You Nodes"}, {"step": 6, "steps_text": "After the node addition, you can see your new node in the list. You can select it by the \"Node ID\" of the node.", "step_imgs": ["https://cdn.instructables.com/FEZ/IWL2/JGCJFSDP/FEZIWL2JGCJFSDP.LARGE.jpg"], "step_title": "Step 6: List of Your Nodes"}, {"step": 7, "steps_text": "Every node has fields, a field corresponds to a measurement, like temperature or humidity. For example, you can add a new 'battery' field.", "step_imgs": ["https://cdn.instructables.com/FY6/ETIS/JGCJFSJH/FY6ETISJGCJFSJH.LARGE.jpg"], "step_title": "Step 7: List of Fields"}, {"step": 8, "steps_text": "After the addition, the new field will be appearing in the list. You can select it by follow the link of the name of the field.", "step_imgs": ["https://cdn.instructables.com/FVI/UFHC/JGCJFSRU/FVIUFHCJGCJFSRU.LARGE.jpg"], "step_title": "Step 8: List of the Fields"}, {"step": 9, "steps_text": "On the measurement page you can see four charts: a daily, a weekly, a monthly and a yearly values of your measurement.Also, you can see the URL: http://api.iothub.live/measurement/create/uXoHGY-uBk0aEKID2O9Fow/battery/3241You can use this URL to send measurement us.", "step_imgs": ["https://cdn.instructables.com/FJU/GW9B/JGGTFP4C/FJUGW9BJGGTFP4C.LARGE.jpg"], "step_title": "Step 9: The Measurement Page"}, {"step": 10, "steps_text": "For example, you can send the battery level of the WeMOS D1 mini in mV.", "step_imgs": ["/assets/img/pixel.png"], "step_title": "Step 10: Send the Battery Status"}, {"step": 11, "steps_text": "The IoT-HUB-Live will be aggregates the measurements and displays them on the charts.", "step_imgs": ["https://cdn.instructables.com/FI6/7DOC/JGGTFPZ9/FI67DOCJGGTFPZ9.LARGE.jpg"], "step_title": "Step 11: Its Working! :)"}], "channel": "Sensors"}, {"category": "technology", "description": "An Independent-Samples T Test is used to determine the likelihood that two independent data samples came from populations with identical means. If this were true, then the difference between the means should equal zero. In this case, the null hypothesis would indicate that the two means are equal. Two variables are required in the data set. One variable is the measured parameter. Examples include weight, height or frequency. The second variable divides the data set into two groups. The means of the light and dark groups will be compared. Created by the ITS Training Program at CSULA for students.", "title": "Independent Samples T Test: SPSS (2.4)", "url": "https://www.instructables.com/id/Independent-Samples-T-Test-SPSS-24/", "section": "technology", "steps": [], "channel": "Software"}, {"category": "technology", "description": "I've always wanted to make time lapse videos, but I don't have a camera with an intervalometer feature built in. In fact, I don't think very many cameras come with such a feature (especially not SLR cameras).So what do you want to do if you want to make time-lapse videos? You can buy a commercial intervalometer (yeah, right). You can check out some instructables like this one and make one yourself out of electronic components.But what if you don't have the time/skills necessary to build one? You just want something quick and cheap.Well, you can actually use a common TI graphing calculator (I don't know of any high school student without one of these) and hook it up to any camera with a remote shutter release socket. It's quite easy, and depending on your camera can require no electronic work at all.", "title": "Turn a TI Graphing Calculator Into an Intervalometer and Create Time Lapse Videos", "url": "https://www.instructables.com/id/Turn-a-TI-Graphing-Calculator-into-an-Intervalomet/", "section": "technology", "steps": [{"step": 1, "steps_text": "Here's a list of parts you need:A TI graphing calculator - I'm using the TI-83+. I haven't tested my code on any other model, so I can't guarantee it will work.Camera with remote shutter release socket - I'm using the Canon EOS Rebel. This has a 2.5mm socket that you can use to connect to the calculator. If your camera does not have a 2.5mm shutter release socket, you will need to create some sort of link cable that can connect the two together.Link Cable - If your camera has a 2.5mm socket, you can use the link cable that should come with your calculator.", "step_imgs": ["https://cdn.instructables.com/FQN/6I12/FB11KXR0/FQN6I12FB11KXR0.LARGE.jpg", "https://cdn.instructables.com/FEA/CWA2/FB11KXRU/FEACWA2FB11KXRU.LARGE.jpg"], "step_title": "Step 1: Parts Needed"}, {"step": 2, "steps_text": "Depending on your calculator, this process might be a little different. The following directions are for the Ti-83+. I will try to get instructions for different models, but I will also have to convert the program to work with them also.\n1) Turn on your graphing calculator (duh)\n2) Press the PRGM key\n3) Press the Right arrow twice to highlight the tab at the top titled \"New\"\n4) Press ENTER\n5) Enter in a name (I used \"Camera\")\n6) You are now ready to insert the following program. The functions prompt, while, for, and end can be found by pressing the PRGM key again. The function Send has to be selected by press 2nd -> 0 (catalog).\nHere is the program:\n: Prompt A\n: While 1\n: For (H,1,A,1)\n: End\n: Send(A)\n: End\nThis is a very simple program. I wrote one once that kept track of how many images were taken, displayed the estimated time remaining, etc, but it seems that it drains too much battery life and for some reason the calculator actually slowed down after a certain number of images. It might work better if you write the program on a PC in assembler, then send it to the calculator, but you need a special link cable, and that kind of defeats the point of this instructable.Update:\nThe above code is claimed to work on both TI-83 and Ti-84 models.\nThanks LightShadow756 for sending me the following code for theTi-89:\n(Program)\ncamera(pics,delay)\nPrgm\n0->x\nWhile x < pics\nFor y,0,delay,1\nEndFor\nTry\nx+1->x\nSendChat a\nElse\nClrErr\nEndTry\nEndWhile\nEndPrgm\n(End Program)", "step_imgs": ["https://cdn.instructables.com/FSB/UN7Y/FB11KXRF/FSBUN7YFB11KXRF.LARGE.jpg", "https://cdn.instructables.com/FL6/B10V/FB11TXZC/FL6B10VFB11TXZC.LARGE.jpg", "https://cdn.instructables.com/F63/5WHM/FB11TXZF/F635WHMFB11TXZF.LARGE.jpg"], "step_title": "Step 2: Program the Calculator"}, {"step": 3, "steps_text": "This step should be pretty easy depending on what kind of camera you have. Most TI calculators have a 2.5mm audio jack used for linking two calculators together. It turns out my EOS rebel uses the same type of jack, and there is no conversion required.\rHowever, if your camera uses a different size audio cable, you might need to use a adapter. Even worse, if it uses a different shape connector, you might have to buy or make an adapter (I know cameras like the canon 10D have shutter release plugs that are specially made for them, it's very hard to find these types of connectors).", "step_imgs": ["https://cdn.instructables.com/F8H/KII2/FB11KXT8/F8HKII2FB11KXT8.LARGE.jpg", "https://cdn.instructables.com/FEH/IROP/FB11KXTC/FEHIROPFB11KXTC.LARGE.jpg"], "step_title": "Step 3: Making the Connection!"}, {"step": 4, "steps_text": "This is where the fun starts. Don't plug in your calculator yet.First, decide what you want to photograph. If outdoors, try to do this at a time where lighting conditions remain fairly constant. Also, try to shoot away from the sun.Set up your shot - Use a sturdy tripod and don't zoom in too tight. Don't forget that things can change over a long period of time.Focus - After focusing, switch your camera to manual focus, or use a lock focus feature if your camera has one. This step is very important because your camera might decide to focus on something else in the picture if your subject moves. It won't look very good if the focus is rapidly changing in a video. Also, if you're photographing the sky and there are no clouds in the frame, the camera won't be able to focus on anything at it might not take a picture at all.Set the exposure - This step might be even more crucial than the focus step. If your camera has a manual exposure mode, or a lock exposure mode, it is very important that you use it. Like with the focus, exposure can change over time and it doesn't look good at all when your video is getting brighter and darker very quickly.Set Quality - Depending on your camera and how much resolution you want, you will need to adjust your picture quality. My canon rebel can take pictures up to 6.3 megapixels, but this is very unnecessary if I'm going to make a small video to put on youtube.Also, depending on your computer, it will take a LONG time to open up 200+ photos taken in the highest quality.So, I usually turn my quality down to the lowest setting.Some optional stepsTurning picture review off - If you want to save battery life by not having the LCD turn on every time you take a picture, remember to turn the image review off.Turn camera sleep off - If you're going to be taking pictures with very large delays in between, you'll need to turn your camera sleep mode off. (This will drain battery faster though. If you're really worried about this you can actually modify the program to \"wake up\" the calculator before attempting to take a shot, this way you can keep the calculator in sleep mode. However, I think this is unnecessary).", "step_imgs": ["https://cdn.instructables.com/FJA/PCN6/FB11KXVK/FJAPCN6FB11KXVK.LARGE.jpg", "https://cdn.instructables.com/FDX/UPRG/FB11KXVW/FDXUPRGFB11KXVW.LARGE.jpg", "https://cdn.instructables.com/F4D/ETE9/FB11KXW0/F4DETE9FB11KXW0.LARGE.jpg"], "step_title": "Step 4: Set Up Your Shot."}, {"step": 5, "steps_text": "This part is fairly easy:Connect your Camera and Calculator - Use the link cable from part 3 to connect the twoStart the program - Turn on your calculator and press the PRGM button. Find the program you made on the list, and press enter.On your screen, you should see the prompt \"A=?\". Enter in the amount of time you want in between the pictures. Note: this is not the amount of time in seconds. I think about 100 of these make a second, but this can change depending on battery life and your calculator model. If you don't want to think about this conversion every time, you can add a small piece of code in the program to do it for you.Press Enter - Your camera should start snapping away! Now sit back and relax and make sure nothing explodes.Turn the Program off - When you're done shooting, you can turn the program off by pressing or holding the ON button. You will see a prompt that says \"ERR: BREAK\". Just highlight Quit and press enter. The program will now be stopped and you can turn your calculator off.If you want to restart the program, all you have to do is press ENTER again, you don't need to go to the program dialog again.", "step_imgs": ["https://cdn.instructables.com/FH8/BPC3/FB11KXXF/FH8BPC3FB11KXXF.LARGE.jpg"], "step_title": "Step 5: Shoot the Photos!"}, {"step": 6, "steps_text": "Now that you have all your pictures, all you need to do is put them together into a video. There are many ways you can do this.Youtube has a guide to compiling a video using Windows Movie Maker here. What I don't like about this though is that you can't easily change the framerate of your video, so the final product will look slow and choppy.Personally, I like to use QuickTime Pro from Apple (as much as I don't like Apple...)First, copy all of you photos onto your computer hard drive and put them into a folder.You will probably want to resize all of your photos beforehand. This will prevent your computer from freezing up if it tries to open up too many large photos with quicktime. I suggest using Windows XP PowerToys image resizer which you can download directly here. It's very easy to use and you can resize all your photos in a snap.Next (if you're using Quicktime Pro), go to file > Open Image Sequence. Select the first image from your video, and press Okay. Your video should be automatically created!Then, select File > Export. This is where you might have to play with the settings. If you want to upload your video to YouTube, I suggest looking at this page.If you want your video to be streamlined for Youtube, select \"Movie to MPEG-4\" in the export dialog, then click the Options button to change more options around. I've included a picture with some settings, but I'm not very good with video stuff, so please experiment to find what suits your needs.If you want a higher quality video, I'd suggest AVI or a Quicktime Movie format, but once again I'm not very good with this so please experiment.If you don't want to \"buy\" Quicktime Pro though, there are many other options. It's really beyond the scope of this instructable though, so I'll leave that up to you. A quick google search for \"Stop Motion software\" should yield plenty of results.I won't go much more into this as it will vary greatly depending on your setup.", "step_imgs": ["https://cdn.instructables.com/FD8/SU79/FB11TXZT/FD8SU79FB11TXZT.LARGE.jpg", "https://cdn.instructables.com/FLZ/TT9D/FB11TXZZ/FLZTT9DFB11TXZZ.LARGE.jpg", "https://cdn.instructables.com/F8J/CGLS/FB11TY01/F8JCGLSFB11TY01.LARGE.jpg", "https://cdn.instructables.com/FZY/8E3O/FB11TY0D/FZY8E3OFB11TY0D.LARGE.jpg"], "step_title": "Step 6: Compile the Video!"}, {"step": 7, "steps_text": "\n          Here are a couple finished videos I've made using this method.It would also be nice if anyone who knows how to program later model calculators (Ti-84, 86, and 89) could write some programs to do the same thing. I could probably write the programs but i wouldn't have any way of testing it.Have Fun!", "step_imgs": ["https://cdn.instructables.com/FGV/UNU8/FB11TY0Z/FGVUNU8FB11TY0Z.LARGE.jpg"], "step_title": "Step 7: Enjoy!"}], "channel": "Photography"}, {"category": "technology", "description": "I recently bought the Samsung Galaxy Note II and noticed that there were not many cases available. So I decided to make my own. After doing this I thought it was a good design exercise and thought I would share it.", "title": "@TechShop MP: Make Your Own Phone Case", "url": "https://www.instructables.com/id/TechShop-MP-Make-your-own-phone-case/", "section": "technology", "steps": [{"step": 1, "steps_text": "This is the most important part. To start with you will probably need a set of calipers so you can measure your phone. Input the length and width of your phone into Autodesk Inventor then extrude to the thickness so you get a block about the same size as your phone. Since we are going to make a case we want our block to be bigger than our phone by about the thickness of the case. So if we are making a case that is 0.100 inches thick then we need to add 0.200 inches to the length and width, and 0.100 to the thickness.", "step_imgs": ["https://cdn.instructables.com/FUB/5QD4/HAUNMY91/FUB5QD4HAUNMY91.LARGE.jpg"], "step_title": "Step 1: Design Phase"}, {"step": 2, "steps_text": "Phones are not square. They have many curves and contours that need to be accounted for in our case. Measure the curves and angles of your phone and input them as fillets and chamfers.", "step_imgs": ["https://cdn.instructables.com/F1W/WS41/HAUNMYAJ/F1WWS41HAUNMYAJ.LARGE.jpg", "https://cdn.instructables.com/F0D/FXA0/HAUNMYAK/F0DFXA0HAUNMYAK.LARGE.jpg", "https://cdn.instructables.com/FUD/OJ2N/HAUNMYAL/FUDOJ2NHAUNMYAL.LARGE.jpg"], "step_title": "Step 2: Adding Shape"}, {"step": 3, "steps_text": "So we now have an oversized phone simulate but it's not a case. The shell command will take care of that. Make your shell the same thickness as the extra you added in step one. 0.100 inches for example.\nYou may see that my thickness is 0.050, I found that with the Makerbot this is too thin to use due to strength issues. I recommend 0.100 or 0.150 if you are going to print it on a Makerbot.", "step_imgs": ["https://cdn.instructables.com/FMQ/TJEN/HAUNMYBM/FMQTJENHAUNMYBM.LARGE.jpg"], "step_title": "Step 3: Is It a Case?"}, {"step": 4, "steps_text": "Your phone probably has a camera, flash, earphone jack, charging port, power button, volume rocker, and at least one microphone. Currently our case is just a cover for the phone and won't allow us access to any of these features. This next step is to measure these features and their locations then cut out places for them.\nYou are going to create a new sketch for each face that has features to add (or you could create a new sketch for each feature) and then do an extrude cut to make an opening for the feature.", "step_imgs": ["https://cdn.instructables.com/FUL/HYY2/HAUNMYCW/FULHYY2HAUNMYCW.LARGE.jpg", "https://cdn.instructables.com/FY2/RPV2/HAUNMYCX/FY2RPV2HAUNMYCX.LARGE.jpg", "https://cdn.instructables.com/F0N/LFA5/HAUNMYCY/F0NLFA5HAUNMYCY.LARGE.jpg", "https://cdn.instructables.com/F56/7DC5/HAUNMYD0/F567DC5HAUNMYD0.LARGE.jpg"], "step_title": "Step 4: Feature Rich"}, {"step": 5, "steps_text": "Once we have all our features in place we can export an .STL file for use with Replicator G or Makerware. Import the .STL file, create your gcode, save an .S3G file, and print your case.\nYou may find that your case isn't quite right the first time out after all some of the measurements can be hard to make. Also depending on the material that you use you may get different results. So after you print you may need to go back in and tweak your design a little.", "step_imgs": ["https://cdn.instructables.com/F78/S879/HAUNMYFE/F78S879HAUNMYFE.LARGE.jpg", "https://cdn.instructables.com/FFF/XTOX/HAUNMYFF/FFFXTOXHAUNMYFF.LARGE.jpg", "https://cdn.instructables.com/FW2/2NK0/HAUNMYFH/FW22NK0HAUNMYFH.LARGE.jpg"], "step_title": "Step 5: Let's Print"}], "channel": "3D Printing"}, {"category": "technology", "description": "It used to be that the number of different microcontroller chips available to the hobbyist was pretty limited. You got to use whatever you could manage to buy from the mail-order chip dealer, and that narrowed down the choice to a small number of chips.\nBut times have changed. Digikey lists over 16000 different line items under a 'microcontroller' search. Which one should a hobbyist with no particular prior experience choose?\nHere are some hints. These are particularly aimed at someone trying to pick a microcontroller to use for the first time at least partially as a learning experience, rather than someone who wants to accomplish a particular task.\nUpdate 2009-01-28: This Instructable was recently mentioned in some popular blogs, and is getting a bunch of new readers. Be sure to read the 'comments' made by other readers and the responses to them; there's a lot of value in those comments...", "title": "How to Choose a MicroController", "url": "https://www.instructables.com/id/How-to-choose-a-MicroController/", "section": "technology", "steps": [{"step": 1, "steps_text": "\n          If you ever took a very introductory computer course, you probably learned about the major components of ANY computer:A Central Processing Unit or CPU.  The part that actually performs logic and mathMemory.  Where the computer stores data and instructionsInput and Output or I/O.  How the computer moves data between its other components and the real world.\nA microprocessor uses microelectronic fabrication techniques to shrink the CPU to a very small size; usually a single \"chip.\"\nA microcontroller uses the same techniques to shrink the entire computer to a single chip (or very small module.)  CPU, Memory, and I/O all in a little package as small as a grain of rice.  Just connect up power and it starts doing its thing; computing and talking to the world.  Usually the I/O on a microcontroller is aimed at \"low level\" hardware like talking to individual switches and LEDs instead of keyboards, internets, and displays (like your desktop computer.)  A microcontroller is just the thing you want, if you want to talk to individual switches and LEDs...", "step_imgs": ["https://cdn.instructables.com/F4B/ZHJZ/C50EWIJLB3Z/F4BZHJZC50EWIJLB3Z.LARGE.jpg"], "step_title": "Step 1: What IS a \"Microcontroller\" ?"}, {"step": 2, "steps_text": "There are a number design considerations that might immediately reduce your number of choices a great deal. \nProgramability and Reprogramability: \nAt this point in time, I would say that a hobbyist should only consider microcontrollers that have internal flash or eeprom program memory and can be erased and reprogrammed a substantial number of times.   There are also micros that can be used with external memory (adds complexity and expense), UV erasable micros (usually quite expensive due to the special packaging), one-time programmable chips (potentially usable after you have a working design, but losing their price advantage anyway), and mask-programmed chips (essentially useless.) \nPeripherals: \nIf you want your microcontroller to have built in Ethernet, CAN, USB, or even multiple serial ports, many common choices are going to be eliminated.  Some peripherals can be handy to have: UARTs, SPI or I2C controllers, PWM controllers, and EEPROM data memory are good examples, even though similar functionality can frequently be implemnented in software or external parts. \nIt's convenient if output pins can supply reasonable amounts of current for driving LEDs or transistors directly; some chips have 5mA or less drive capability. \nPhysical packaging: \nHobbyists are somewhat limited is the packages they are able to deal with, from a prototyping, PCB fabrication, and/or soldering.  That 256 ball BGA coldfire CPU may be sweet, but it's effectively unusable by mere mortals.  Microcontrollers available in 0.1in DIP packages are much easier to deal with.  Probably anything with a pin spacing smaller than 0.05in should be viewed with some skepticism. \nMemory: \nThe size of memory may be an important consideration.  Some micros have as few as 256 innstructions and 16 bytes of RAM.  You can do a lot in that sort of space (believe it or not), but not everything.  Moreover, while you can frequently upgrade to a \"bigger chip\", some chip families have relatively small memory limits imposed by their architecture, so even the biggest chip you can get will have only 8k instructions (for example.)  RAM (data memory) is usually scarce in microcontrollers; some algorithms require substantial RAM to be implemented in a straightforward manner, and it may be worthwhile looking for a micro with a lot of RAM (or external RAM expansion capabilities) if that's the sort of thing you had in mind.  (For instance, implementing TCP/IP networking protocols in a micro whose total RAM space is less than used by a typical ethernet packet is likely to be ... interesting.) ", "step_imgs": ["https://cdn.instructables.com/F6T/9RBA/XHZEWIJLRDS/F6T9RBAXHZEWIJLRDS.LARGE.gif"], "step_title": "Step 2: Show Stoppers"}, {"step": 3, "steps_text": "The \"architecture\" of a microcontroller refers to the philosophy of the internal implementation, sort of.  It includes details like how many \"registers\" there are, and how \"general purpose\" those registers are, whether code can execute out of data memory, whether the peripherals are treated like memory, registers, or yet something else, whether there is a stack and how it works, and so on.\nYou will hear people talk about how some architectures are better than others.  I suppose this is true.  But I'm going to claim that it is largely irrelevant for the typical hobbyist.  If you wish to avoid the architectural quirks of a particular family of microcontrollers, you can use a high level language.  If you're willing to program in assembler, you're at a level of interest where learning and overcoming the quirks is party of the stuff you should be learning.  Besides, we're not talking here about evaluating some new architecture that some company is proposing.  All of the chips I mention in this instructable have been around long enough that they've proven that their architectures are good enough for MANY real applications.\nHere are some architectural \"features\" you may read about and some explanation of what they mean.\nCISC/RISC.  Complex Instruction Set Computer.   Reduced Instruction Set Computer.\nIn the old days, CPU designers were getting clever and wanted their CPUs to support high-level language features in hardware, leading to cobol-like string manipulation instructions  that accepted arguments in blocks of 8 registers.  IIRC, it was Berkeley and IBM who noticed that compiler writers didn't really know how to USE such complicated instructions from a compiler, the amount of silicon real estate used by these instructions was getting large, and in fact the hardware implementation sometimes wasn't as fast as doing the same thing in software anyway.  So they said \"I bet we can make the CPU go a lot faster if we leave out these complex instructions and dedicate the silicon to more registers or cache memory or something\", and thereby invented the RISC CPU.  Nowadays \"RISC\" is widely used by marketing departments to mean \"we don't have very many instructions\", even if the rest of the architecture isn't very much like the original RISC researchers had envisioned.\nHarvard Architecture.\nIn a Harvard architecture, the instruction memory and the data memory are separate, controlled by different buses, and sometimes have different sizes.  For microcontrollers, the instructions are usually stored in \"read only\" memory, and data is in RAM or registers.  An example is the\nPIC microcontroller, where instructions are in 12, 14, or 16 bit wide flash, and data is  in 8bit\nwide RAM.\nVon Neuman Architecture.\nIn a von Neuman Architecture, data and instructions share memory space, so you could do things like dynamic compilation to generate instructions in RAM and then execute them.  The TI MSP430 is an example of a von Neuman architecture.\nAccumulator based\nIn an \"accumulator based\" architecture, there is usually one \"special\" register where most of the actual computation (math, logic, etc) occurs.  Some effort has to be spent to get operands into the accumulator and results back out to where you need them.  The opposite is a processor with \"general purpose\" registers, where any of several registers can be used for math/etc.\nLoad/Store\nA load/store architecture typically means that operands to ALU operations have to be in registers, so that you have to load them from memory beforehand and store them back when operations are complete.  The opposite typically allows operations between a register or\naccumulator and a memory location directly.  RISC architectures tend to be load/store, since a lot or the CISCness of CISC processors shows up in implementing complex \"addressing modes\" for accessing the memory operands.  In a RISC architecture, all that complexity only has to be implemented in the load and store instructions (if at all.)\nRegisters\nMemory Mapped I/O", "step_imgs": ["https://cdn.instructables.com/FG0/NEFT/NCTEWIJLRFA/FG0NEFTNCTEWIJLRFA.LARGE.jpg"], "step_title": "Step 3: Thoughts About Architectures"}, {"step": 4, "steps_text": "Minimally, you'll need some sort of programmer to load the program into the microcontroller. \nThese vary wildly in cost.  It's pretty common for manufacturers to offer some low-cost programmer so that people can \"evaluate\" their microcontrollers without risking too much cash (or requiring director level approval :-)  \"low cost\" used to mean \"less than $500\" (which happens to be a common \"expensable\" limit), but the number has been going down.  I think you can find manufacturer supplied development tools for most of the microcontrollers mentioned here for \n$50 or less. \nCheaper tools can be bought from third parties, or built yourself.  If you don't mind the possibility that bugs in your tools might cause more problems than bugs in your code. \nMaximally,  production gang programmers, In circuit emulators, logic analyzers, oscilloscopes, lab-bench power supplies...  You can spend as much money as you've got, probably. ", "step_imgs": ["https://cdn.instructables.com/F3H/YYG2/40EEWIJLRGG/F3HYYG240EEWIJLRGG.LARGE.gif", "https://cdn.instructables.com/F9X/FOLA/S6CEWIJLRJI/F9XFOLAS6CEWIJLRJI.LARGE.jpg", "https://cdn.instructables.com/FRK/RDCY/D0UEWIJLRK8/FRKRDCYD0UEWIJLRK8.LARGE.jpg"], "step_title": "Step 4: Thoughts About Hardware Tools"}, {"step": 5, "steps_text": "All of the microcontrollers mentioned here have some level of standard tools (at least an assembler) provided by the manufacturer.  Most have \"Integrated Development Environments\" (IDE) that allow integrated use of an editor (that you won't like) with the assembler, some compilers, and a simulator (of perhaps limited value.)  Some have significant additional support from the open source movement. \nTools from manufacturers aren't always great, but you appreciate them more after you've tried to use a microcontroller that doesn't have any such tools available... ", "step_imgs": ["https://cdn.instructables.com/FO9/FPQP/TX7EWIJLRLY/FO9FPQPTX7EWIJLRLY.LARGE.gif"], "step_title": "Step 5: Thoughts About Software Tools"}, {"step": 6, "steps_text": "If your budget extends as far as $100 for the computing hardware, it's worth noting that you \nhave bought your way into an interesting realm of \"bang for buck.\" \n\"About\" $100 will buy: \n- Relatively fancy development board for most micros; covering a wide range of processors and performances (including PC compatibles, for instance.) \n- brand new Low end palmtop (ie Palm Z22) \n- used last-generation desktop system (go two generations old and you can probably get a display too.) \nIt WON'T buy much in the way of custom development, if you're paying for it. \nNow a palmtop makes a lousy motor controller.   But if you \"need\" the color display and touchscreen, it might be easier (and cheaper) to add motor control electronics to a palmtop than it is to add a display to a bare microcontroller.   Especially since the palmtop comes with a development environment for making the display DO things... ", "step_imgs": ["https://cdn.instructables.com/FMJ/C3WF/UNNEWIFO3C8/FMJC3WFUNNEWIFO3C8.LARGE.jpg"], "step_title": "Step 6: The $100 Paradox"}, {"step": 7, "steps_text": "The Microchip PIC microcontrollers were perhaps the first that were marketed to the hobbyist and student community, one of the first microcontrollers to be offered in a relatively small package (18 pin DIP) and one of the first to implement flash or eeprom program memory (in the PIC16C84 in 1993)\nArchitecture: harvard, accumulator based (mostly)\nPackage sizes:  6, 8, 14, 18, 20, 28, 40, ... 100\nProgram memory size: 256 words (12bit words = one instruction) to 256k bytes (2 bytes=1 instruction)\nData RAM:  16 to ~3900 bytes (4096 byte address space, shared with peripheral registers.)\nSpecial features: EEPROM, 20mA output drive, several \"sub-architectures\"\nFlash memory based PIC microcontrollers curently range from vanishingly small 6-pin chips in SOT23 packages to 100pin TQFPs.   The basic architecture has been extended to chips with 16bit ALUs and integral DSP functionality.\nMicrochip has a liberal sample policy and chips are widely available from many vendors.", "step_imgs": ["https://cdn.instructables.com/FNF/VCDR/36QEWIJKTP5/FNFVCDR36QEWIJKTP5.LARGE.jpg"], "step_title": "Step 7: Microchip PIC Microcontrollers"}, {"step": 8, "steps_text": "Microchip the ManufacturerPICList mailing list repository of knowlege[http://techtrain.microchip.com/masters2004/(kgmnvafutocq2355egt11231)/downloads/classlist.htm Microchip Masters Conference 2004 Downloads]  Tutorials and presentations[http://techtrain.microchip.com/masters2005/(kgmnvafutocq2355egt11231)/downloads/classlist.htm Microchip Masters Conference 2005 Downloads]  Tutorials and presentationsStarting with PICmicro Controllers TutorialPIC Elmer 160 Another TutorialWinPicProg Tutorial Tutorial w hardware designs.PIC vs. AVR smackdown A comparison between PIC and AVR\nThere are a bunch of existing Instructables that use use Microchip PICs:Intro to PIC MicrocontrollersPIC micro Timer Code\"TouchTimer\" EggLightBusiness Card PIC ProgrammerBuildng the Inchworm ICD2 PIC Programmer / DebuggerOther PIC Instructables\n...Collaborators feel free to extend this page here...", "step_imgs": ["https://cdn.instructables.com/FNK/T3WZ/ABGEWIJLT4U/FNKT3WZABGEWIJLT4U.LARGE.gif"], "step_title": "Step 8: Resources for Microchip PIC"}, {"step": 9, "steps_text": "As near as I can tell, Atmel came along and decided to steal some of Microchip's business by offering \"similar but better\" chips.  Some things they did right, some things they didn't do so well. But the Atmel AVR chips have also gained a lot of popularity among hobbyists, and we get to cash in on the sometimes-war between Atmel and Microchip.  My subjective observation is that microchip seems to do low-end chips a bit better, and Atmel does high-end chips a bit better.\nArchitecture: harvard, GP register based (mostly)\nPackage sizes:   8, 14,  20, 28, 40, ... 100\nProgram memory size: 1k byte to 256k bytes (2 bytes=1 instruction)\nData RAM:  32 to 8k+32 (32 bytes of gp registers, 0 to 8k of RAM)\nSpecial features: EEPROM, 20mA output drive", "step_imgs": ["https://cdn.instructables.com/FNR/NUMK/8NAEWIJKU0U/FNRNUMK8NAEWIJKU0U.LARGE.jpg"], "step_title": "Step 9: Atmel AVR"}, {"step": 10, "steps_text": "Atmel the ManufacturerAVR Freaks  Despite the amateurish name, this is a REALLY good site.PIC vs. AVR smackdown A comparison between PIC and AVRAVR Butterfly The AVR \"Butterfly\" evaluation board is a phenomenal value at the current price of $20.Another Butterfly vendor\nGCC supports all but the smallest AVRs; giving you a C compiler of substantial quality for free.GCC and WinAVRArduino is a sort of combination of some standardized hardware based on the ATmega8 or ATmega168 and a simplified development environment that hides some of the complexities of using gcc for AVRs.  See also under \"modules.\"\nProduct guides/comparison charts:Official Atmel Product GuideDevice list at AVR FreaksAtmel AVR MCU Comparison Table Non-official table contributed by skylen\nInstructables using Atmel AVRs:Getting started with AVR microprocessors on the cheapProgrammable LEDSynchronizing FirefliesOther AVR Instructables\n...Collaborators feel free to add additional information here...", "step_imgs": ["https://cdn.instructables.com/FB2/O0H4/B0FEWIJLS7E/FB2O0H4B0FEWIJLS7E.LARGE.gif", "https://cdn.instructables.com/FGC/N5WA/KHAEWIJLS7U/FGCN5WAKHAEWIJLS7U.LARGE.jpg"], "step_title": "Step 10: Resources for Atmel AVR"}, {"step": 11, "steps_text": "Intel invented the 8051 architecture a long time ago, and garnered some hobbyist interest with the  8052BASIC chip, which contained a basic interpretter in masked ROM and allowed one to build a very small BASIC based computer.  Since then the architecture has been licensed and/or stolen by MANY vendors, and good things have happened to it.  It's been shrunk, expanded, speeded up, made lower power, had peripherals added, increased memory, flash and eeprom (and even ferromagnetic ram) added.  Most variants are somewhat harder to find than PIC or AVR chips. ", "step_imgs": ["https://cdn.instructables.com/F2E/3O84/BG5EWIJLSB0/F2E3O84BG5EWIJLSB0.LARGE.gif"], "step_title": "Step 11: Intel 8051 and Variants"}, {"step": 12, "steps_text": "8052.com site   Massive amounts of info.Atmel 8051s   Atmel does 8051s as well as AVR and ARMNXP (Philips) 8051  89LPC controllers.RAMTron micros  8051s with FRAM non-volatile memorySilicon Labs  Neat 8051s including high performance ADCs.  Also the smallest 8051; 11pins in a 3x3mm QFN.  Cheap USB \"toolstick\" eval platforms.\n...add more here", "step_imgs": ["https://cdn.instructables.com/F2E/3O84/BG5EWIJLSB0/F2E3O84BG5EWIJLSB0.LARGE.gif"], "step_title": "Step 12: Resources for 8051"}, {"step": 13, "steps_text": "Motorola (well, now Freescale) has several lines of popular microcontrollers, the most accessible of which seems to be the flash-based 68HC908 and/or HCS08 or RS08 (all the same or very similar architectures, with some renaming and assorted minor differences) series.  Traditionally, Motorola chips have been very difficult to obtain through low-volume channels (ie to the hobbyist) and Mot hasn't been very good about distinguishing chips you can actually buy vs chips that are so targetted to a particular industry segment that they're essentially unobtainium.  But they seem to be catching on.  Many can be bought at Digikey, and low-cost development systems are pretty common. \nThe Freescale xx08 microcontrollers are one of the few microcontrollers with a genuine von Neuman architecture.  Peripherals, Flash, and RAM all share the same 64k address space. ", "step_imgs": ["https://cdn.instructables.com/F0S/REMO/UI8EWIJLSEE/F0SREMOUI8EWIJLSEE.LARGE.jpg"], "step_title": "Step 13: Freescale (Motorola) 68HC908, HCS08"}, {"step": 14, "steps_text": "\n          Texas Instruments garnered some interest when they introduced (bought?) their MSP430 series of  extemely low-power microcontrollers.  Until recently, most of the MSP430s were only available in  assorted hobbyist-unfriendly SMT packages, but a couple of recent chips have been introduced in DIP packages.  And there's a low cost USB-development dongle that offers better than the usual functionality for such things, so maybe things are looking up.\nThe MSP430 is one of the few natively 16-bit architetcures in the microcontroller world.There's currently a rather cool $20 USB stick development system offered: eZ430-F2013TI's MSP430 Overview page  They have free online training, too.  Every year about the beginning of may (4/30, get it?) they have a free seminar given at various locations around the country.  Usually this includes a giveaway (last year it was one of the eZ430 things.)  Worthwhile.Trip report to an Early TI seminar Describes 430 basics  (by me)MSP430 Application Reports Nice document by Lutz BierlMSP430 Yahoo Group pretty good forum.", "step_imgs": ["https://cdn.instructables.com/F68/GFX2/JSMEWIJLSKV/F68GFX2JSMEWIJLSKV.LARGE.jpg", "https://cdn.instructables.com/FM4/YQXY/I8LEWIJLSLE/FM4YQXYI8LEWIJLSLE.LARGE.jpg"], "step_title": "Step 14: Texas Instrument MSP430 Micropower Microcontrollers"}, {"step": 15, "steps_text": "\n          ARM is a company that designs microprocessor architetcures, and licenses them to manufacturers who build actual chips.  The ARM is a 32bit true RISC architecture, and scales upwards to CPUs with floating point hardware and clocks speeds of several hundred MHz.  If you have a palmtop, it probably contains an ARM-based chip.  Your cellphone probably has an ARM based chip.\nRecently, some of the manufacturers of ARM architecture chips have started offering combinations of on-chip memory and peripherals, and price, that put them into the same marketplace with 8 and 16bit microcontrollers.  If you're likely to need lots of memory and performance, it may be worth looking at ARM chips.  Or maybe even if you're NOT.  As a professional, the possibility of having a single architecture that spans from 28pin microcontrollers to  400MHz router CPUs is attractive in many ways.\nCurrently, I'm finding that the breadth of the ARM space seems to generate some confusion.  Putting together a tool set and development environment for a particular ARM chip can be challenging.[Http://www.arm.com ARM the company]Luminary Stellaris  $1 ARMs with as few as 28 pinsNXP (philips) LPC ARM controllers down to 48 pins and $3.Atmel ARM chips Atmel does ARMs as well as AVRs and 8051sST M32 Cortex M3 chips Cheap chips with good peripherals, and Cute \"primer\" development systemOlimex ARM development boards for Atmel, NXP, and other small ARMsGNUARM Homepage for the GNU ARM toolchainInstuctable: Pixecuter - Run Software on Matell JuiceBox", "step_imgs": ["https://cdn.instructables.com/FYY/RXAG/LWFEWIJLSJA/FYYRXAGLWFEWIJLSJA.LARGE.gif"], "step_title": "Step 15: ARM Microcontrollers"}, {"step": 16, "steps_text": "- Cypress PSOC \n- Renesas (Hitachi) H8, M6 ", "step_imgs": [], "step_title": "Step 16: Other Interesting Microcontrollers"}, {"step": 17, "steps_text": "A number of companies have made a business of selling \"modules\" , usually incorporating some sort of microcontroller and some of its support components with a high-level-lanaguge development environment, some sort of chip-programming capability, and communications.  This gets rid of the need for any special hardware tools (usually just a cable to your PC), provides the HLL, and in general lets you get started much faster than the \"pure\" microcontroller route.  The main disadvantage would be price ($30 for a basic stamp vs $5 for a chip with similar capability) and (sometimes) performance (the basic stamp uses interpreted basic, which is very slow compared to native code.)Parallax: home of the Basic StampBasic Micro \"ATOM\"BASIC TigerSunSpot Java thingModules/IDEs with ethernet/etcArduino: open source hardware and IDE for Atmel AVR\nAnother disadvantage is WRT the education aspect.  You won't learn much about \"microcontrollers\" by programming a module in a HLL that hides ALL the microcontroller details.", "step_imgs": ["https://cdn.instructables.com/FKZ/C3NG/9ZKEWIFO3AM/FKZC3NG9ZKEWIFO3AM.LARGE.jpg"], "step_title": "Step 17: Modules, Bootloaders, and \"hidden\" Microcontrollers"}, {"step": 18, "steps_text": "Zilog (inventor of the famous Z80 microprocessor chip) has updated versions of the Z80 in microcontroller form, and also updated versions of the even older Z8 architecture.  Both have flash memory and some interesting peripherals , and inexpensive \"evaluation boards\" that include a C compiler.  At one time, the zilog evaluation boards were quite \"full\" compared to many low cost evaluation boards, but the current versions seem less so.  (My EZ8kit has 4 5x7 matrix displays, an IRDA transceiver, two rs232 async ports, an rs485 port, and assorted buttons and lights.  IIRC, it was $50 (special deal at a trade show.))Fritzk9 said in comments:\nMost of the people who have commented list the PIC, PICAxe, ARM, 8052, or Basic Stamps. These are all popular chips, but if you are just getting started with microcontrollers, you might want to start with something fairly cheap. How does $40 sound?\nThat's what the Zilog Z8 Encore! 8-bit microcontroller development kit costs. The Z8 Encore! microcontrollers are available with 1K to 64K of flash RAM. For speed, they operate at 5- to 20-MHz, and depending on the chip, they are available in various packages from 8 to 80 pins. The $39.95 development kit contains a development board with input/output pins, a wall wart power supply, computer cable (USB or serial to connect your computer to the development board), and a free C compiler and assembler that runs under Windows. You don't need to buy or build a programmer, since you can program the chip right in the circuit you've built -- without having to remove it and reprogram it in a programmer.\nAll the Encore! chips can communicate serially through a UART (some have 2 UARTs). Some have analog-to-digital converters built-in, and some have an infra-red (IRDA) communications port. Oh, and there are up to 4 built-in timers on the chip, depending on the chip version. The price of an Encore! microcontroller is pretty reasonable, given all the capabilities (anywhere from $3 to $13 each from Digi-Key).\nThe C compiler is excellent. The Zilog C compiler has most of the capabilities of \"big boy\" compilers, like a floating point library, trig functions, etc. It produces better assembly code than I can, so I use it almost exclusively.\nRemember that almost any non-trivial code you write will have bugs. The debugger supplied with the development kit permits you to step through your code and look at the results of variables stored in the various registers to help you locate your mistakes.\nDigi-Key stocks two different Encore! development kits (either one costs $39.95); one for 8K/4K chips, and the other for 16K through 64K chips. The Digi-Key part number for the 8K/4K development kit is 269-3183-ND, and the part number for the 64K development kit is 2693249-ND. http://www.digikey.comZilog's website has a large number of sample applications, full documentation of their microcontrollers, and free updates to the C compiler supplied with the development kit.\nI'd say that the only downside is that the Z8 Encore! isn't as popular as the PIC as a hobbyist chip, so there haven't been any books or many of projects published for it except for some articles in Circuit Cellar magazine. Oh, and if you are interested in microcontrollers, Circuit Cellar and Nuts & Volts magazines are two that cover the subject. Both are available at Barnes & Noble bookstores -- maybe Borders too. Or, just go directly to their websites:Circuit Cellar MagazineNuts & Volts Magazine", "step_imgs": ["https://cdn.instructables.com/FWB/KN84/UN0EXCFLS55/FWBKN84UN0EXCFLS55.LARGE.gif", "https://cdn.instructables.com/F24/ER26/T8SEXCFLT02/F24ER26T8SEXCFLT02.LARGE.jpg"], "step_title": "Step 18: Zilog Z8 and Z80 Chips"}, {"step": 19, "steps_text": "\n          Periodically, many of the manufacturers of microcontrollers will sponsor \"Design Contests\" where engineers all over will be challenged to come up with a particularly clever design using a particular microcontroller.  The idea is to entice engineers into looking at THEIR chips even if they're already using some other microcontroller.  At any given time of year, there's likely to be at least one contest \"in progress.\"  There are a number of good things about these contests:PRIZES.  Some of the contests have significant cash prizes.  $5-10k, which is not to be sneezed at.Winning even a minor prize (or being published) will look good on your resume.Frequently the contests are accompanied by \"special offers\" in the form of low cost development tools or free samples.Motivation!A contest may generate at least temporary interest and discussion on some processor of interest.\n    The end of the contest usually includes publishing some or all of the entered designs, serving as useful examples for everyone else.\nI've talked to reps at trade shows; the final number of entrants to these contests tends to be pretty small, so as contests go your chances of winning (if you complete an entry) are unusually high.\nUsually there is nothing in the rules that prevents the entry from also being (say) your college senior design project.  Alas, many contests are restricted to people over 18, and completing an entry in the timeframe usually allowed is not so easy as it sounds before you've tried it.\nCurrently running:Freescale Low-end x08 \"Black Widow\" Contest  half-price development kit on completion of 2 parts of the 4-part contest.  $10k+ prize.PICList Free PCB Contest  Free olimex-fabbed PCB for your design.  Small prize, small contest; runs every month!  Must be PIC or SX based.\nGeneral reference for a lot of contests (includes past winners, etc.):Circuit Cellar Magazine Contest Page\nI entered Freescale's recent \"Black Widow\" contest for designs based on their very small 8-bit microcontrollers, which had a top prize of $10000 cash plus a trip to their design conference (and $1000 for each of 10 finalists to aid in completing a prototype.)  I didn't make the finals :-(\nHowever, I netted a T-shirt, a coupon good for $15 off a (low cost) development system, and oneof some ROOMBA robot vacuum cleaners raffled off to  \"early entrants.\"  And I learned some stuff, too.  That's not a bad haul.  The contest apparently had 775 participants at the final phase...", "step_imgs": ["https://cdn.instructables.com/FB2/3L2H/OGAEXCFLS8Z/FB23L2HOGAEXCFLS8Z.LARGE.jpg", "https://cdn.instructables.com/FGC/5GTY/BZ1EXCFLSOQ/FGC5GTYBZ1EXCFLSOQ.LARGE.jpg"], "step_title": "Step 19: Win Valuable Prizes"}, {"step": 20, "steps_text": "Tech Online is a pretty good website for technical News in general, and they've apparently implemented something they call \"Virtual Labs\" that will allow you to try out a vendor's development system over the internet with nothing but a browser on your end.  I used this for the first time as part of the Freescale \"Black Widow Design Contest\", since one of the required steps was to get the virtual development board to behave in a certain way.  It was pretty neat.  But it wasn't entirely bug-free, so be a bit careful.\nThey have several Freescale, Luminary, Renesas, and TI development systems available.", "step_imgs": ["https://cdn.instructables.com/F9V/QPCD/F0ZSTEK9/F9VQPCDF0ZSTEK9.LARGE.gif"], "step_title": "Step 20: Try It Online: Virtual Labs"}, {"step": 21, "steps_text": "In the old days, companies would mail datasheets and databooks to just about anyone who asked.  The web has done away with the need for most of that, and many vendors seem to have taken the money they saved on postage and used it to make their sample program more accessible.The way \"free samples\" work is that the manufacturer will happily send you several samples of a part, in the hopes that you'll try them out and be so impressed that you'll used them in a project that nets them sales of millions of units.  Or (if you're a student) that they'll win some loyalty and \"mindshare\" when you get out into the real world and be more likely to use their microcontrollers than someone else's.  Or that you'll write some magazine or web article that will call attention to their products.  It's a marketing expense, and it's probably cheaper than many marketing expenses...Microchip, Freescale, and TI all have very liberal sample policies.  Look up a part on their website, and it's likely to have a \"sample\" button somewhere on the page; send them some info and in a week or so you're likely to have chips in hand.  Other vendors are harder; you may have to talk to a representative.  Vendors have a weak spot (as they should) for students; you might think that a sample request from a \"my-u.edu\" email address carries less weight than one from \"nonexistantcompany.com\", but that's not necessarilly true.Ethics of Free SamplingI suppose there are ethics to requesting free samples.  Here are some of my personal rules:1) NEVER resell samples.  I see lots of eBay listings for chips in quantities that match the max sample quantities of some vendors.  It pisses me off.  (Of course, this COULD be another \"sample channel\" officially endorsed by the vendor.  But it doesn't look that way.)2) Don't lie more than necessary.  I think making up a company name is fine, but inventing 10000 fellow employees and a product that will sell 10k/year of a chip is over the line.  (This has been especially interesting as I've transitions from student to engineer at unknown company to engineer at extemely well-known company.  These days If I ask for a sample, I'm likely to get a phone call from an enthusiastic salesperson hoping for a win in our next big product, and I usually explain that no, the best they can hope for from me is to get inserted into some odd piece of custom lab gear.)3) Don't be greedy.  Some vendors limit you to so many samples per month, or per order.  That doesn't mean you should submit new sample orders every month, or order the maximum number of samples allowed.  (OTOH, be aware that for many of the chips we're talking about, the order processing and shipping costs more than the chips themselves...)4) Spread Good Publicity.   If you pubish a project that used a sample, be sure to say nice things about their product.  If you can't find something nice to say about a chip you sampled, you probably shouldn't say anything at all.  (\"Don't look a gift horse in the mouth\"?)", "step_imgs": ["https://cdn.instructables.com/FMT/ZA0K/7B5EYF7HVPQ/FMTZA0K7B5EYF7HVPQ.LARGE.jpg", "https://cdn.instructables.com/FRK/3ZNT/WNNEYF7HVOE/FRK3ZNTWNNEYF7HVOE.LARGE.jpg", "https://cdn.instructables.com/FJV/716U/BDIEYF7HVOV/FJV716UBDIEYF7HVOV.LARGE.gif", "https://cdn.instructables.com/FPZ/OX8B/2FSEYF7HVPA/FPZOX8B2FSEYF7HVPA.LARGE.gif"], "step_title": "Step 21: Free Stuff!"}], "channel": "Microcontrollers"}, {"category": "technology", "description": "Even if you don't regularly use the metric system terra, giga, mega, kilo, milli, micro, nano and more prefixes are useful to know and be able to convert between, they are being used in more and more measurements systems.This technique is so fast and easy it'll have you speeding through your equations. Some measurement systems that use these are;Watts, volts, ohms, amps, bytes, joules, meters, litres, grams, seconds, hertz, pascals, newtons, and many more.", "title": "Fast and Easy Metric Prefixes Conversions", "url": "https://www.instructables.com/id/Fast-and-Easy-Metric-Prefixes-Conversions/", "section": "technology", "steps": [{"step": 1, "steps_text": "Draw the picture.Draw lots of 000,s with decimal points between them and either the prefix or its symbol (whichever you prefer) allighned with the appropriate decimal point.Draw whichever ones you will be using, there's no need for pica's if your working in bytes.", "step_imgs": ["https://cdn.instructables.com/FI9/XL5W/J5CQK2KR/FI9XL5WJ5CQK2KR.LARGE.jpg"], "step_title": "Step 1: Draw Your Base Chart"}, {"step": 2, "steps_text": "Draw your number in its place over (or above) the 000's.Use its current prefix and put the decimal point at the point labeled with that prefix.If there is no decimal point in your number the point is straight after your number.", "step_imgs": ["https://cdn.instructables.com/FNE/YPEP/J5CQK2LD/FNEYPEPJ5CQK2LD.LARGE.jpg"], "step_title": "Step 2: Draw in Your Number"}, {"step": 3, "steps_text": "Choose the prefix you wish to use, or wish to turn this into.Put the new decimal point where the decimal point with your desired prefix is.Fill in any blanks spots between the written number and the decimal point with 00000'sYou have your number.If you have any questions feel free to ask.", "step_imgs": ["https://cdn.instructables.com/FDV/BO8Q/J5CQK2LP/FDVBO8QJ5CQK2LP.LARGE.jpg"], "step_title": "Step 3: Choose Your New Prefix"}], "channel": "Science"}, {"category": "technology", "description": "In this video users will learn how to define variables. The instructions and examples will help guide you through establishing different types of variables for your particular research or analysis needs. Creating a new SPSS Statistics data file consists of two stages: (1) defining the variables and (2) entering the data. Defining the variables involves multiple processes and requires careful planning. Once the variables have been defined, the data can then be added. First, assign variable names based on your research questionnaire. If variable names are not assigned, SPSS Statistics provides default names that may not be recognizable. Second, each variable\u2019s Type attribute should be specified. If necessary, assign labels to values to help all users of the file better understand the data. Created by the ITS Training Program at CSULA for students.", "title": "Defining Variable: SPSS (1.3a)", "url": "https://www.instructables.com/id/Defining-Variable-SPSS-13a/", "section": "technology", "steps": [], "channel": "Software"}, {"category": "technology", "description": "Sometimes we throw away a lot of garbage that can be used to create something useful. A piggy bank made out of glass can be hard to maintain and use. A piggy ban made out of an empty milk jug is easy to make, easily decorated, and everything you need to create is probably in your house right now. If you throw away or recycle your empty milk jugs, you can use them to store your savings or loose change to exchange later. Some people don't like keeping excessive amounts of change in their wallets. We are going to use volume to find around how many pennies can be stored in one empty milk jug.", "title": "Earth Day Piggy Bank + Geometry", "url": "https://www.instructables.com/id/Earth-Day-Piggy-Bank-Geometry/", "section": "technology", "steps": [{"step": 1, "steps_text": "Through research we found out that the volume of one penny is about .36 cubic cm. This is rounded to the nearest hundredth. The formula for volume is (surface area of 1 face) x (height), so in the case of the penny with a circular face, we can say the formula of the penny is (pi) x (radius^2) x (height). Volume= 3.14 x 9.5 x 9.5 x 1.27 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 360 cubic mm or .360 cubic cm", "step_imgs": ["https://cdn.instructables.com/FEI/9PZQ/HHI55VMI/FEI9PZQHHI55VMI.LARGE.jpg", "https://cdn.instructables.com/F61/TQNR/HHI55VMJ/F61TQNRHHI55VMJ.LARGE.jpg"], "step_title": "Step 1: Finding the Volume of a Penny"}, {"step": 2, "steps_text": "Again, the volume of a single penny is .36 cubic cm. We are going to convert this number into liters because it is more proportional to gallons. There are 1000 cubic cm in one liter, so our conversion would become .00036 L. Therefore, if one penny is .00036 L, and 1 L is divided by .00036 L per penny, then one liter should hold 2777.7 pennies.\u00a0", "step_imgs": ["https://cdn.instructables.com/FYF/ZBO6/HHI55VN2/FYFZBO6HHI55VN2.LARGE.jpg"], "step_title": "Step 2: Converting Measurements to Liters"}, {"step": 3, "steps_text": "Through a unit converter, we found out that there are 4.405 L per dry gallon. We are using dry measurements because the pennies are solid but the jug uses liquid measurements (gallon). 2777.7 pennies per liter x 4.405 liters per dry gallon = 12236 pennies This amount of pennies is assuming that the jug is packed to the brim and it is totally filled with pennies. But pennies have an irrregular shape and they aren't liquid, so there will be about 25% (roughly) air space between the pennies.\u00a0 12236 pennies x 25% = 9176 pennies", "step_imgs": [], "step_title": "Step 3: Converting Measurements to Gallons"}, {"step": 4, "steps_text": "If you plan to go along with\u00a0our milk jug piggy bank idea, you could keep saving up coins for donating or personal use. Keeping them in a closet or a cabinet could be more convenient than having them out in the open. This could also be a fun project to do with your children or a child you know. Decorating them will make it more valuable and you and your friend could watch as the coins add up over time. Cut a slit in the cap to make your bank, and you're pretty much done. Open the cap to retrieve your money more efficiently when the jug is full. You can customize and decorate the jugs to your liking, too.", "step_imgs": ["https://cdn.instructables.com/FGX/YJ5X/HHI55VIX/FGXYJ5XHHI55VIX.LARGE.jpg", "https://cdn.instructables.com/F3I/HU9S/HHI55VIU/F3IHU9SHHI55VIU.LARGE.jpg", "https://cdn.instructables.com/FTC/G1Q6/HHI55VIV/FTCG1Q6HHI55VIV.LARGE.jpg", "https://cdn.instructables.com/FD4/U32V/HHI55VIR/FD4U32VHHI55VIR.LARGE.jpg"], "step_title": "Step 4: Additional Ideas"}, {"step": 5, "steps_text": "People don't usually think twice about the milk jugs that they throw away. Those milk jugs end up in landfills and build up over time which isn't good for the environment because plastic can take centuries to decompose into the ground. This is a disadvantage due to the fact that the soil on the ground would benefit greatly from added nutrients making richer soil for plants to grow some day. Saving the bottles can help a ton and will make a difference if everyone works together to save the Earth's health and beauty.", "step_imgs": ["https://cdn.instructables.com/FEA/HGHV/HHI55VO7/FEAHGHVHHI55VO7.LARGE.jpg", "https://cdn.instructables.com/FM2/5ZS8/HHI55VO9/FM25ZS8HHI55VO9.LARGE.jpg", "https://cdn.instructables.com/F52/IUOI/HHI55VOA/F52IUOIHHI55VOA.LARGE.jpg"], "step_title": "Step 5: Our Philosophy"}, {"step": 6, "steps_text": "The formula for volume is (surface area of 1 face) x (height), so in the case of the nickel with a circular face, we can say the formula of the nickel is (pi) x (radius^2) x (height). 3.14 x 1.05^2 cm x .17 cm =.59 cm^3 or converted into an appropriate unit, .59 mL. Using a unit converter, we found out that .59 mL =\u00a00.00059 L Therefore, if one nickel is 0.00059 L, and 1 L is divided by 0.00059 \u00a0L per nickel, then one liter should hold about 1694 nickels. Through a unit converter, we found out that there are 4.405 L per dry gallon. We are using dry measurements because the nickels are solid but the jug uses liquid measurements (gallon). 1694 nickels per liter x 4.405 liters per dry gallon =7466 nickels This amount of nickels is assuming that the jug is packed to the brim and it is totally filled with nickels. But nickels have an irrregular shape and they aren't liquid, so there will be about 25% (roughly) air space between the nickels. 7466 nickels x .25% air=\u00a01866 nickels", "step_imgs": [], "step_title": "Step 6: Repeating the Steps With a Nickel"}, {"step": 7, "steps_text": "The formula for volume is (surface area of 1 face) x (height), so in the case of the nickel with a circular face, we can say the formula of the nickel is (pi) x (radius^2) x (height). 3.14 x\u00a00.895 cm^2 x 0.135 cm\u00a0 =0.34 cm^3", "step_imgs": [], "step_title": "Step 7: Repeating the Steps With a Dime"}], "channel": "Reuse"}]